
W5500_loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000380c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  20000000  08003bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002f0  200000b8  08003cac  000200b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003a8  08003cac  000203a8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ea4d  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028e3  00000000  00000000  0002eb35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006dec  00000000  00000000  00031418  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a08  00000000  00000000  00038208  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c68  00000000  00000000  00038c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005667  00000000  00000000  00039878  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003934  00000000  00000000  0003eedf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00042813  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002404  00000000  00000000  00042890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003994 	.word	0x08003994

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	08003994 	.word	0x08003994

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f896 	bl	80006e8 <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f84a 	bl	8000664 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000020 	.word	0x20000020
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f81b 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f001 fa50 	bl	8001ab4 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000104 	.word	0x20000104
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000104 	.word	0x20000104

08000640 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000642:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	0200      	lsls	r0, r0, #8
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800065a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800065c:	60d3      	str	r3, [r2, #12]
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	68dc      	ldr	r4, [r3, #12]
 800066a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	2b04      	cmp	r3, #4
 8000676:	bf28      	it	cs
 8000678:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 0501 	mov.w	r5, #1
 8000680:	fa05 f303 	lsl.w	r3, r5, r3
 8000684:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000688:	bf8c      	ite	hi
 800068a:	3c03      	subhi	r4, #3
 800068c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068e:	4019      	ands	r1, r3
 8000690:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000692:	fa05 f404 	lsl.w	r4, r5, r4
 8000696:	3c01      	subs	r4, #1
 8000698:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800069a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	ea42 0201 	orr.w	r2, r2, r1
 80006a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfad      	iteet	ge
 80006a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f000 000f 	andlt.w	r0, r0, #15
 80006ae:	4b06      	ldrlt	r3, [pc, #24]	; (80006c8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	bfb5      	itete	lt
 80006b6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000ed14 	.word	0xe000ed14

080006cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006cc:	2800      	cmp	r0, #0
 80006ce:	db08      	blt.n	80006e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d0:	0942      	lsrs	r2, r0, #5
 80006d2:	2301      	movs	r3, #1
 80006d4:	f000 001f 	and.w	r0, r0, #31
 80006d8:	fa03 f000 	lsl.w	r0, r3, r0
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <HAL_NVIC_EnableIRQ+0x18>)
 80006de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e8:	3801      	subs	r0, #1
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d20a      	bcs.n	8000706 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	21f0      	movs	r1, #240	; 0xf0
 80006f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000714:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000718:	2b02      	cmp	r3, #2
 800071a:	d003      	beq.n	8000724 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000720:	2001      	movs	r0, #1
 8000722:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000724:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000726:	2305      	movs	r3, #5
 8000728:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800072c:	6813      	ldr	r3, [r2, #0]
 800072e:	f023 0301 	bic.w	r3, r3, #1
 8000732:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000734:	2000      	movs	r0, #0
}
 8000736:	4770      	bx	lr

08000738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800073c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000740:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80008e0 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000744:	4a64      	ldr	r2, [pc, #400]	; (80008d8 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000746:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000748:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800074c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000750:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000754:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000758:	42b7      	cmp	r7, r6
 800075a:	f040 80ad 	bne.w	80008b8 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800075e:	684c      	ldr	r4, [r1, #4]
 8000760:	f024 0a10 	bic.w	sl, r4, #16
 8000764:	f1ba 0f02 	cmp.w	sl, #2
 8000768:	d116      	bne.n	8000798 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800076a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800076e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000772:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000776:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800077a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800077e:	f04f 0e0f 	mov.w	lr, #15
 8000782:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000786:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800078a:	690d      	ldr	r5, [r1, #16]
 800078c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000790:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000794:	f8cc 5020 	str.w	r5, [ip, #32]
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800079c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800079e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a2:	fa05 f50c 	lsl.w	r5, r5, ip
 80007a6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007ac:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007bc:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80007c2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c6:	d815      	bhi.n	80007f4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80007c8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007cc:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007d0:	68cd      	ldr	r5, [r1, #12]
 80007d2:	fa05 fa0c 	lsl.w	sl, r5, ip
 80007d6:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80007da:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80007de:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007e2:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007e6:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80007ea:	fa0e fe03 	lsl.w	lr, lr, r3
 80007ee:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80007f2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007f4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007f6:	9d00      	ldr	r5, [sp, #0]
 80007f8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007fa:	688f      	ldr	r7, [r1, #8]
 80007fc:	fa07 f70c 	lsl.w	r7, r7, ip
 8000800:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000802:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000804:	00e5      	lsls	r5, r4, #3
 8000806:	d557      	bpl.n	80008b8 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000808:	f04f 0b00 	mov.w	fp, #0
 800080c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000810:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000814:	4d31      	ldr	r5, [pc, #196]	; (80008dc <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800081a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800081e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000822:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000826:	9703      	str	r7, [sp, #12]
 8000828:	9f03      	ldr	r7, [sp, #12]
 800082a:	f023 0703 	bic.w	r7, r3, #3
 800082e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000832:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000836:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800083a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800083e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000842:	f04f 0e0f 	mov.w	lr, #15
 8000846:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800084a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800084c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000850:	d039      	beq.n	80008c6 <HAL_GPIO_Init+0x18e>
 8000852:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000856:	42a8      	cmp	r0, r5
 8000858:	d037      	beq.n	80008ca <HAL_GPIO_Init+0x192>
 800085a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800085e:	42a8      	cmp	r0, r5
 8000860:	d035      	beq.n	80008ce <HAL_GPIO_Init+0x196>
 8000862:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000866:	42a8      	cmp	r0, r5
 8000868:	d033      	beq.n	80008d2 <HAL_GPIO_Init+0x19a>
 800086a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800086e:	42a8      	cmp	r0, r5
 8000870:	bf14      	ite	ne
 8000872:	2507      	movne	r5, #7
 8000874:	2504      	moveq	r5, #4
 8000876:	fa05 f50c 	lsl.w	r5, r5, ip
 800087a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800087e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000880:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000882:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000884:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000888:	bf0c      	ite	eq
 800088a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800088c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800088e:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000890:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000892:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000896:	bf0c      	ite	eq
 8000898:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800089a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800089c:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800089e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008a0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008a4:	bf0c      	ite	eq
 80008a6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008a8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008aa:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008ac:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ae:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008b0:	bf54      	ite	pl
 80008b2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008b4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008b6:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008b8:	3301      	adds	r3, #1
 80008ba:	2b10      	cmp	r3, #16
 80008bc:	f47f af47 	bne.w	800074e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008c0:	b005      	add	sp, #20
 80008c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008c6:	465d      	mov	r5, fp
 80008c8:	e7d5      	b.n	8000876 <HAL_GPIO_Init+0x13e>
 80008ca:	2501      	movs	r5, #1
 80008cc:	e7d3      	b.n	8000876 <HAL_GPIO_Init+0x13e>
 80008ce:	2502      	movs	r5, #2
 80008d0:	e7d1      	b.n	8000876 <HAL_GPIO_Init+0x13e>
 80008d2:	2503      	movs	r5, #3
 80008d4:	e7cf      	b.n	8000876 <HAL_GPIO_Init+0x13e>
 80008d6:	bf00      	nop
 80008d8:	40013c00 	.word	0x40013c00
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008e4:	b10a      	cbz	r2, 80008ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008e6:	6181      	str	r1, [r0, #24]
 80008e8:	4770      	bx	lr
 80008ea:	0409      	lsls	r1, r1, #16
 80008ec:	e7fb      	b.n	80008e6 <HAL_GPIO_WritePin+0x2>
	...

080008f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008f4:	4604      	mov	r4, r0
 80008f6:	b918      	cbnz	r0, 8000900 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008f8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008fa:	b002      	add	sp, #8
 80008fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000900:	6803      	ldr	r3, [r0, #0]
 8000902:	07dd      	lsls	r5, r3, #31
 8000904:	d410      	bmi.n	8000928 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	0798      	lsls	r0, r3, #30
 800090a:	d458      	bmi.n	80009be <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	071a      	lsls	r2, r3, #28
 8000910:	f100 809a 	bmi.w	8000a48 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	075b      	lsls	r3, r3, #29
 8000918:	f100 80b8 	bmi.w	8000a8c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800091c:	69a2      	ldr	r2, [r4, #24]
 800091e:	2a00      	cmp	r2, #0
 8000920:	f040 8119 	bne.w	8000b56 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000924:	2000      	movs	r0, #0
 8000926:	e7e8      	b.n	80008fa <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000928:	4ba6      	ldr	r3, [pc, #664]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	f002 020c 	and.w	r2, r2, #12
 8000930:	2a04      	cmp	r2, #4
 8000932:	d007      	beq.n	8000944 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800093a:	2a08      	cmp	r2, #8
 800093c:	d10a      	bne.n	8000954 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	0259      	lsls	r1, r3, #9
 8000942:	d507      	bpl.n	8000954 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000944:	4b9f      	ldr	r3, [pc, #636]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	039a      	lsls	r2, r3, #14
 800094a:	d5dc      	bpl.n	8000906 <HAL_RCC_OscConfig+0x16>
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1d9      	bne.n	8000906 <HAL_RCC_OscConfig+0x16>
 8000952:	e7d1      	b.n	80008f8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000954:	6863      	ldr	r3, [r4, #4]
 8000956:	4d9b      	ldr	r5, [pc, #620]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800095c:	d111      	bne.n	8000982 <HAL_RCC_OscConfig+0x92>
 800095e:	682b      	ldr	r3, [r5, #0]
 8000960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000964:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000966:	f7ff fe65 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096a:	4d96      	ldr	r5, [pc, #600]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800096c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096e:	682b      	ldr	r3, [r5, #0]
 8000970:	039b      	lsls	r3, r3, #14
 8000972:	d4c8      	bmi.n	8000906 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000974:	f7ff fe5e 	bl	8000634 <HAL_GetTick>
 8000978:	1b80      	subs	r0, r0, r6
 800097a:	2864      	cmp	r0, #100	; 0x64
 800097c:	d9f7      	bls.n	800096e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800097e:	2003      	movs	r0, #3
 8000980:	e7bb      	b.n	80008fa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000982:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000986:	d104      	bne.n	8000992 <HAL_RCC_OscConfig+0xa2>
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800098e:	602b      	str	r3, [r5, #0]
 8000990:	e7e5      	b.n	800095e <HAL_RCC_OscConfig+0x6e>
 8000992:	682a      	ldr	r2, [r5, #0]
 8000994:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000998:	602a      	str	r2, [r5, #0]
 800099a:	682a      	ldr	r2, [r5, #0]
 800099c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009a0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1df      	bne.n	8000966 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80009a6:	f7ff fe45 	bl	8000634 <HAL_GetTick>
 80009aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	039f      	lsls	r7, r3, #14
 80009b0:	d5a9      	bpl.n	8000906 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b2:	f7ff fe3f 	bl	8000634 <HAL_GetTick>
 80009b6:	1b80      	subs	r0, r0, r6
 80009b8:	2864      	cmp	r0, #100	; 0x64
 80009ba:	d9f7      	bls.n	80009ac <HAL_RCC_OscConfig+0xbc>
 80009bc:	e7df      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009be:	4b81      	ldr	r3, [pc, #516]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	f012 0f0c 	tst.w	r2, #12
 80009c6:	d007      	beq.n	80009d8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009ce:	2a08      	cmp	r2, #8
 80009d0:	d111      	bne.n	80009f6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	025e      	lsls	r6, r3, #9
 80009d6:	d40e      	bmi.n	80009f6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d8:	4b7a      	ldr	r3, [pc, #488]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0795      	lsls	r5, r2, #30
 80009de:	d502      	bpl.n	80009e6 <HAL_RCC_OscConfig+0xf6>
 80009e0:	68e2      	ldr	r2, [r4, #12]
 80009e2:	2a01      	cmp	r2, #1
 80009e4:	d188      	bne.n	80008f8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	6921      	ldr	r1, [r4, #16]
 80009ea:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009ee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009f2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f4:	e78a      	b.n	800090c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009f6:	68e2      	ldr	r2, [r4, #12]
 80009f8:	4b73      	ldr	r3, [pc, #460]	; (8000bc8 <HAL_RCC_OscConfig+0x2d8>)
 80009fa:	b1b2      	cbz	r2, 8000a2a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a00:	f7ff fe18 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a04:	4d6f      	ldr	r5, [pc, #444]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a08:	682b      	ldr	r3, [r5, #0]
 8000a0a:	0798      	lsls	r0, r3, #30
 8000a0c:	d507      	bpl.n	8000a1e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a0e:	682b      	ldr	r3, [r5, #0]
 8000a10:	6922      	ldr	r2, [r4, #16]
 8000a12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a16:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a1a:	602b      	str	r3, [r5, #0]
 8000a1c:	e776      	b.n	800090c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a1e:	f7ff fe09 	bl	8000634 <HAL_GetTick>
 8000a22:	1b80      	subs	r0, r0, r6
 8000a24:	2802      	cmp	r0, #2
 8000a26:	d9ef      	bls.n	8000a08 <HAL_RCC_OscConfig+0x118>
 8000a28:	e7a9      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a2c:	f7ff fe02 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a30:	4d64      	ldr	r5, [pc, #400]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a34:	682b      	ldr	r3, [r5, #0]
 8000a36:	0799      	lsls	r1, r3, #30
 8000a38:	f57f af68 	bpl.w	800090c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a3c:	f7ff fdfa 	bl	8000634 <HAL_GetTick>
 8000a40:	1b80      	subs	r0, r0, r6
 8000a42:	2802      	cmp	r0, #2
 8000a44:	d9f6      	bls.n	8000a34 <HAL_RCC_OscConfig+0x144>
 8000a46:	e79a      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a48:	6962      	ldr	r2, [r4, #20]
 8000a4a:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <HAL_RCC_OscConfig+0x2dc>)
 8000a4c:	b17a      	cbz	r2, 8000a6e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a52:	f7ff fdef 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a56:	4d5b      	ldr	r5, [pc, #364]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a58:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a5c:	079f      	lsls	r7, r3, #30
 8000a5e:	f53f af59 	bmi.w	8000914 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a62:	f7ff fde7 	bl	8000634 <HAL_GetTick>
 8000a66:	1b80      	subs	r0, r0, r6
 8000a68:	2802      	cmp	r0, #2
 8000a6a:	d9f6      	bls.n	8000a5a <HAL_RCC_OscConfig+0x16a>
 8000a6c:	e787      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a70:	f7ff fde0 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a74:	4d53      	ldr	r5, [pc, #332]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a76:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a78:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a7a:	0798      	lsls	r0, r3, #30
 8000a7c:	f57f af4a 	bpl.w	8000914 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a80:	f7ff fdd8 	bl	8000634 <HAL_GetTick>
 8000a84:	1b80      	subs	r0, r0, r6
 8000a86:	2802      	cmp	r0, #2
 8000a88:	d9f6      	bls.n	8000a78 <HAL_RCC_OscConfig+0x188>
 8000a8a:	e778      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a8c:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a90:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a94:	d128      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	9201      	str	r2, [sp, #4]
 8000a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000aaa:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aac:	4d48      	ldr	r5, [pc, #288]	; (8000bd0 <HAL_RCC_OscConfig+0x2e0>)
 8000aae:	682b      	ldr	r3, [r5, #0]
 8000ab0:	05d9      	lsls	r1, r3, #23
 8000ab2:	d51b      	bpl.n	8000aec <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab4:	68a3      	ldr	r3, [r4, #8]
 8000ab6:	4d43      	ldr	r5, [pc, #268]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d127      	bne.n	8000b0c <HAL_RCC_OscConfig+0x21c>
 8000abc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ac4:	f7ff fdb6 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac8:	4d3e      	ldr	r5, [pc, #248]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000aca:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000acc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ad2:	079b      	lsls	r3, r3, #30
 8000ad4:	d539      	bpl.n	8000b4a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	f43f af20 	beq.w	800091c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000adc:	4a39      	ldr	r2, [pc, #228]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000ade:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	e719      	b.n	800091c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e7df      	b.n	8000aac <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000af4:	f7ff fd9e 	bl	8000634 <HAL_GetTick>
 8000af8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000afa:	682b      	ldr	r3, [r5, #0]
 8000afc:	05da      	lsls	r2, r3, #23
 8000afe:	d4d9      	bmi.n	8000ab4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b00:	f7ff fd98 	bl	8000634 <HAL_GetTick>
 8000b04:	1bc0      	subs	r0, r0, r7
 8000b06:	2802      	cmp	r0, #2
 8000b08:	d9f7      	bls.n	8000afa <HAL_RCC_OscConfig+0x20a>
 8000b0a:	e738      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0c:	2b05      	cmp	r3, #5
 8000b0e:	d104      	bne.n	8000b1a <HAL_RCC_OscConfig+0x22a>
 8000b10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	672b      	str	r3, [r5, #112]	; 0x70
 8000b18:	e7d0      	b.n	8000abc <HAL_RCC_OscConfig+0x1cc>
 8000b1a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b1c:	f022 0201 	bic.w	r2, r2, #1
 8000b20:	672a      	str	r2, [r5, #112]	; 0x70
 8000b22:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b24:	f022 0204 	bic.w	r2, r2, #4
 8000b28:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1ca      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b2e:	f7ff fd81 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b36:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b3a:	0798      	lsls	r0, r3, #30
 8000b3c:	d5cb      	bpl.n	8000ad6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fd79 	bl	8000634 <HAL_GetTick>
 8000b42:	1bc0      	subs	r0, r0, r7
 8000b44:	4540      	cmp	r0, r8
 8000b46:	d9f7      	bls.n	8000b38 <HAL_RCC_OscConfig+0x248>
 8000b48:	e719      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b4a:	f7ff fd73 	bl	8000634 <HAL_GetTick>
 8000b4e:	1bc0      	subs	r0, r0, r7
 8000b50:	4540      	cmp	r0, r8
 8000b52:	d9bd      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x1e0>
 8000b54:	e713      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b56:	4d1b      	ldr	r5, [pc, #108]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000b58:	68ab      	ldr	r3, [r5, #8]
 8000b5a:	f003 030c 	and.w	r3, r3, #12
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	f43f aeca 	beq.w	80008f8 <HAL_RCC_OscConfig+0x8>
 8000b64:	4e1b      	ldr	r6, [pc, #108]	; (8000bd4 <HAL_RCC_OscConfig+0x2e4>)
 8000b66:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b68:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b6a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b6c:	d134      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b6e:	f7ff fd61 	bl	8000634 <HAL_GetTick>
 8000b72:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b74:	682b      	ldr	r3, [r5, #0]
 8000b76:	0199      	lsls	r1, r3, #6
 8000b78:	d41e      	bmi.n	8000bb8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b7a:	6a22      	ldr	r2, [r4, #32]
 8000b7c:	69e3      	ldr	r3, [r4, #28]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b82:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b8e:	4c0d      	ldr	r4, [pc, #52]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b90:	0852      	lsrs	r2, r2, #1
 8000b92:	3a01      	subs	r2, #1
 8000b94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b98:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b9e:	f7ff fd49 	bl	8000634 <HAL_GetTick>
 8000ba2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	019a      	lsls	r2, r3, #6
 8000ba8:	f53f aebc 	bmi.w	8000924 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bac:	f7ff fd42 	bl	8000634 <HAL_GetTick>
 8000bb0:	1b40      	subs	r0, r0, r5
 8000bb2:	2802      	cmp	r0, #2
 8000bb4:	d9f6      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x2b4>
 8000bb6:	e6e2      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bb8:	f7ff fd3c 	bl	8000634 <HAL_GetTick>
 8000bbc:	1bc0      	subs	r0, r0, r7
 8000bbe:	2802      	cmp	r0, #2
 8000bc0:	d9d8      	bls.n	8000b74 <HAL_RCC_OscConfig+0x284>
 8000bc2:	e6dc      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	42470000 	.word	0x42470000
 8000bcc:	42470e80 	.word	0x42470e80
 8000bd0:	40007000 	.word	0x40007000
 8000bd4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fd2c 	bl	8000634 <HAL_GetTick>
 8000bdc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bde:	682b      	ldr	r3, [r5, #0]
 8000be0:	019b      	lsls	r3, r3, #6
 8000be2:	f57f ae9f 	bpl.w	8000924 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000be6:	f7ff fd25 	bl	8000634 <HAL_GetTick>
 8000bea:	1b00      	subs	r0, r0, r4
 8000bec:	2802      	cmp	r0, #2
 8000bee:	d9f6      	bls.n	8000bde <HAL_RCC_OscConfig+0x2ee>
 8000bf0:	e6c5      	b.n	800097e <HAL_RCC_OscConfig+0x8e>
 8000bf2:	bf00      	nop

08000bf4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bf4:	4913      	ldr	r1, [pc, #76]	; (8000c44 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bf6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bf8:	688b      	ldr	r3, [r1, #8]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	d003      	beq.n	8000c0a <HAL_RCC_GetSysClockFreq+0x16>
 8000c02:	2b08      	cmp	r3, #8
 8000c04:	d003      	beq.n	8000c0e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c06:	4810      	ldr	r0, [pc, #64]	; (8000c48 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c08:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <HAL_RCC_GetSysClockFreq+0x58>)
 8000c0c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c0e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c10:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c12:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c14:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c18:	bf14      	ite	ne
 8000c1a:	480c      	ldrne	r0, [pc, #48]	; (8000c4c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c1c:	480a      	ldreq	r0, [pc, #40]	; (8000c48 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c1e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c22:	bf18      	it	ne
 8000c24:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c2a:	fba1 0100 	umull	r0, r1, r1, r0
 8000c2e:	f7ff fb2f 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c42:	bd08      	pop	{r3, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	00f42400 	.word	0x00f42400
 8000c4c:	007a1200 	.word	0x007a1200

08000c50 <HAL_RCC_ClockConfig>:
{
 8000c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c54:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c56:	4604      	mov	r4, r0
 8000c58:	b910      	cbnz	r0, 8000c60 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c60:	4b44      	ldr	r3, [pc, #272]	; (8000d74 <HAL_RCC_ClockConfig+0x124>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	f002 020f 	and.w	r2, r2, #15
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d328      	bcc.n	8000cbe <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c6c:	6821      	ldr	r1, [r4, #0]
 8000c6e:	078f      	lsls	r7, r1, #30
 8000c70:	d42d      	bmi.n	8000cce <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c72:	07c8      	lsls	r0, r1, #31
 8000c74:	d440      	bmi.n	8000cf8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c76:	4b3f      	ldr	r3, [pc, #252]	; (8000d74 <HAL_RCC_ClockConfig+0x124>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	f002 020f 	and.w	r2, r2, #15
 8000c7e:	4295      	cmp	r5, r2
 8000c80:	d366      	bcc.n	8000d50 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c82:	6822      	ldr	r2, [r4, #0]
 8000c84:	0751      	lsls	r1, r2, #29
 8000c86:	d46c      	bmi.n	8000d62 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c88:	0713      	lsls	r3, r2, #28
 8000c8a:	d507      	bpl.n	8000c9c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c8c:	4a3a      	ldr	r2, [pc, #232]	; (8000d78 <HAL_RCC_ClockConfig+0x128>)
 8000c8e:	6921      	ldr	r1, [r4, #16]
 8000c90:	6893      	ldr	r3, [r2, #8]
 8000c92:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c9a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c9c:	f7ff ffaa 	bl	8000bf4 <HAL_RCC_GetSysClockFreq>
 8000ca0:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <HAL_RCC_ClockConfig+0x128>)
 8000ca2:	4a36      	ldr	r2, [pc, #216]	; (8000d7c <HAL_RCC_ClockConfig+0x12c>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	40d8      	lsrs	r0, r3
 8000cae:	4b34      	ldr	r3, [pc, #208]	; (8000d80 <HAL_RCC_ClockConfig+0x130>)
 8000cb0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff fc74 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cbe:	b2ca      	uxtb	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 030f 	and.w	r3, r3, #15
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d1c6      	bne.n	8000c5a <HAL_RCC_ClockConfig+0xa>
 8000ccc:	e7ce      	b.n	8000c6c <HAL_RCC_ClockConfig+0x1c>
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cd0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cd4:	bf1e      	ittt	ne
 8000cd6:	689a      	ldrne	r2, [r3, #8]
 8000cd8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cdc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cde:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ce0:	bf42      	ittt	mi
 8000ce2:	689a      	ldrmi	r2, [r3, #8]
 8000ce4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000ce8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	68a0      	ldr	r0, [r4, #8]
 8000cee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cf2:	4302      	orrs	r2, r0
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	e7bc      	b.n	8000c72 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf8:	6862      	ldr	r2, [r4, #4]
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <HAL_RCC_ClockConfig+0x128>)
 8000cfc:	2a01      	cmp	r2, #1
 8000cfe:	d11d      	bne.n	8000d3c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d06:	d0a8      	beq.n	8000c5a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d08:	4e1b      	ldr	r6, [pc, #108]	; (8000d78 <HAL_RCC_ClockConfig+0x128>)
 8000d0a:	68b3      	ldr	r3, [r6, #8]
 8000d0c:	f023 0303 	bic.w	r3, r3, #3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d14:	f7ff fc8e 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d18:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d1c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d1e:	68b3      	ldr	r3, [r6, #8]
 8000d20:	6862      	ldr	r2, [r4, #4]
 8000d22:	f003 030c 	and.w	r3, r3, #12
 8000d26:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d2a:	d0a4      	beq.n	8000c76 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d2c:	f7ff fc82 	bl	8000634 <HAL_GetTick>
 8000d30:	1bc0      	subs	r0, r0, r7
 8000d32:	4540      	cmp	r0, r8
 8000d34:	d9f3      	bls.n	8000d1e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d36:	2003      	movs	r0, #3
}
 8000d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d3c:	1e91      	subs	r1, r2, #2
 8000d3e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d40:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d42:	d802      	bhi.n	8000d4a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d48:	e7dd      	b.n	8000d06 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4a:	f013 0f02 	tst.w	r3, #2
 8000d4e:	e7da      	b.n	8000d06 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d50:	b2ea      	uxtb	r2, r5
 8000d52:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	429d      	cmp	r5, r3
 8000d5c:	f47f af7d 	bne.w	8000c5a <HAL_RCC_ClockConfig+0xa>
 8000d60:	e78f      	b.n	8000c82 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d62:	4905      	ldr	r1, [pc, #20]	; (8000d78 <HAL_RCC_ClockConfig+0x128>)
 8000d64:	68e0      	ldr	r0, [r4, #12]
 8000d66:	688b      	ldr	r3, [r1, #8]
 8000d68:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d6c:	4303      	orrs	r3, r0
 8000d6e:	608b      	str	r3, [r1, #8]
 8000d70:	e78a      	b.n	8000c88 <HAL_RCC_ClockConfig+0x38>
 8000d72:	bf00      	nop
 8000d74:	40023c00 	.word	0x40023c00
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	08003ad2 	.word	0x08003ad2
 8000d80:	20000020 	.word	0x20000020

08000d84 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d92:	6810      	ldr	r0, [r2, #0]
}
 8000d94:	40d8      	lsrs	r0, r3
 8000d96:	4770      	bx	lr
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	08003ae2 	.word	0x08003ae2
 8000da0:	20000020 	.word	0x20000020

08000da4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	4a03      	ldr	r2, [pc, #12]	; (8000dc0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000db2:	6810      	ldr	r0, [r2, #0]
}
 8000db4:	40d8      	lsrs	r0, r3
 8000db6:	4770      	bx	lr
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	08003ae2 	.word	0x08003ae2
 8000dc0:	20000020 	.word	0x20000020

08000dc4 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	460e      	mov	r6, r1
 8000dca:	4615      	mov	r5, r2
 8000dcc:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000dce:	6821      	ldr	r1, [r4, #0]
 8000dd0:	688a      	ldr	r2, [r1, #8]
 8000dd2:	ea36 0302 	bics.w	r3, r6, r2
 8000dd6:	d001      	beq.n	8000ddc <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000dd8:	2000      	movs	r0, #0
}
 8000dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000ddc:	1c6b      	adds	r3, r5, #1
 8000dde:	d0f7      	beq.n	8000dd0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000de0:	f7ff fc28 	bl	8000634 <HAL_GetTick>
 8000de4:	1bc0      	subs	r0, r0, r7
 8000de6:	4285      	cmp	r5, r0
 8000de8:	d8f1      	bhi.n	8000dce <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000df2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000df4:	6862      	ldr	r2, [r4, #4]
 8000df6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000dfa:	d10a      	bne.n	8000e12 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000dfc:	68a2      	ldr	r2, [r4, #8]
 8000dfe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e02:	d002      	beq.n	8000e0a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e04:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000e08:	d103      	bne.n	8000e12 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e10:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e14:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e18:	d107      	bne.n	8000e2a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e28:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000e30:	2300      	movs	r3, #0
 8000e32:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000e36:	2003      	movs	r0, #3
 8000e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e3e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e40:	4a13      	ldr	r2, [pc, #76]	; (8000e90 <SPI_EndRxTxTransaction+0x54>)
 8000e42:	4e14      	ldr	r6, [pc, #80]	; (8000e94 <SPI_EndRxTxTransaction+0x58>)
 8000e44:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e46:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e48:	fbb5 f6f6 	udiv	r6, r5, r6
 8000e4c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000e50:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e52:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000e56:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e58:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e5a:	d10d      	bne.n	8000e78 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	f7ff ffb0 	bl	8000dc4 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000e64:	b910      	cbnz	r0, 8000e6c <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000e66:	2000      	movs	r0, #0
}
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e6e:	f043 0320 	orr.w	r3, r3, #32
 8000e72:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000e74:	2003      	movs	r0, #3
 8000e76:	e7f7      	b.n	8000e68 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000e78:	9b01      	ldr	r3, [sp, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f3      	beq.n	8000e66 <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000e7e:	9b01      	ldr	r3, [sp, #4]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	061b      	lsls	r3, r3, #24
 8000e8a:	d4f5      	bmi.n	8000e78 <SPI_EndRxTxTransaction+0x3c>
 8000e8c:	e7eb      	b.n	8000e66 <SPI_EndRxTxTransaction+0x2a>
 8000e8e:	bf00      	nop
 8000e90:	20000020 	.word	0x20000020
 8000e94:	016e3600 	.word	0x016e3600

08000e98 <HAL_SPI_Init>:
{
 8000e98:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d036      	beq.n	8000f0e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ea4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000ea8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eac:	b91b      	cbnz	r3, 8000eb6 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000eae:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000eb2:	f000 fe1f 	bl	8001af4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000eb6:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000eb8:	68a0      	ldr	r0, [r4, #8]
 8000eba:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000ec2:	680b      	ldr	r3, [r1, #0]
 8000ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ec8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000eca:	6863      	ldr	r3, [r4, #4]
 8000ecc:	4303      	orrs	r3, r0
 8000ece:	68e0      	ldr	r0, [r4, #12]
 8000ed0:	4303      	orrs	r3, r0
 8000ed2:	6920      	ldr	r0, [r4, #16]
 8000ed4:	4303      	orrs	r3, r0
 8000ed6:	6960      	ldr	r0, [r4, #20]
 8000ed8:	4303      	orrs	r3, r0
 8000eda:	69e0      	ldr	r0, [r4, #28]
 8000edc:	4303      	orrs	r3, r0
 8000ede:	6a20      	ldr	r0, [r4, #32]
 8000ee0:	4303      	orrs	r3, r0
 8000ee2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000ee4:	4303      	orrs	r3, r0
 8000ee6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000eea:	4303      	orrs	r3, r0
 8000eec:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000eee:	0c12      	lsrs	r2, r2, #16
 8000ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ef2:	f002 0204 	and.w	r2, r2, #4
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000efa:	69cb      	ldr	r3, [r1, #28]
 8000efc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f00:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f02:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000f04:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f06:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f08:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000f0c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f0e:	2001      	movs	r0, #1
}
 8000f10:	bd10      	pop	{r4, pc}

08000f12 <HAL_SPI_TransmitReceive>:
{
 8000f12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f16:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000f18:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000f1c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000f1e:	2b01      	cmp	r3, #1
{
 8000f20:	4604      	mov	r4, r0
 8000f22:	460d      	mov	r5, r1
 8000f24:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8000f26:	f000 80e2 	beq.w	80010ee <HAL_SPI_TransmitReceive+0x1dc>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f30:	f7ff fb80 	bl	8000634 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000f34:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8000f38:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8000f3a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f3c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000f3e:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f40:	d00a      	beq.n	8000f58 <HAL_SPI_TransmitReceive+0x46>
 8000f42:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000f46:	f040 80d0 	bne.w	80010ea <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000f4a:	68a0      	ldr	r0, [r4, #8]
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	f040 80cc 	bne.w	80010ea <HAL_SPI_TransmitReceive+0x1d8>
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	f040 80c9 	bne.w	80010ea <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	f000 80c4 	beq.w	80010e6 <HAL_SPI_TransmitReceive+0x1d4>
 8000f5e:	f1b9 0f00 	cmp.w	r9, #0
 8000f62:	f000 80c0 	beq.w	80010e6 <HAL_SPI_TransmitReceive+0x1d4>
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	f000 80bd 	beq.w	80010e6 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f6c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000f70:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f74:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000f76:	bf1c      	itt	ne
 8000f78:	2305      	movne	r3, #5
 8000f7a:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000f82:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000f84:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f86:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000f88:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000f8a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f8c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000f8e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f90:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f92:	bf58      	it	pl
 8000f94:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000f96:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000f98:	bf58      	it	pl
 8000f9a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000f9e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000fa0:	bf58      	it	pl
 8000fa2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000fa4:	68e2      	ldr	r2, [r4, #12]
 8000fa6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000faa:	d158      	bne.n	800105e <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000fac:	b109      	cbz	r1, 8000fb2 <HAL_SPI_TransmitReceive+0xa0>
 8000fae:	2e01      	cmp	r6, #1
 8000fb0:	d107      	bne.n	8000fc2 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000fb2:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000fb6:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000fb8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000fba:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000fc2:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000fc4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	b9ab      	cbnz	r3, 8000ff6 <HAL_SPI_TransmitReceive+0xe4>
 8000fca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b993      	cbnz	r3, 8000ff6 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	4639      	mov	r1, r7
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f7ff ff31 	bl	8000e3c <SPI_EndRxTxTransaction>
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	f040 8081 	bne.w	80010e2 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000fe0:	68a3      	ldr	r3, [r4, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d132      	bne.n	800104c <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	9001      	str	r0, [sp, #4]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	9201      	str	r2, [sp, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	9b01      	ldr	r3, [sp, #4]
 8000ff4:	e02a      	b.n	800104c <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000ff6:	6822      	ldr	r2, [r4, #0]
 8000ff8:	6893      	ldr	r3, [r2, #8]
 8000ffa:	0799      	lsls	r1, r3, #30
 8000ffc:	d50d      	bpl.n	800101a <HAL_SPI_TransmitReceive+0x108>
 8000ffe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001000:	b29b      	uxth	r3, r3
 8001002:	b153      	cbz	r3, 800101a <HAL_SPI_TransmitReceive+0x108>
 8001004:	b14d      	cbz	r5, 800101a <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001006:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001008:	f833 1b02 	ldrh.w	r1, [r3], #2
 800100c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800100e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001010:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001012:	3b01      	subs	r3, #1
 8001014:	b29b      	uxth	r3, r3
 8001016:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001018:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800101a:	6893      	ldr	r3, [r2, #8]
 800101c:	07db      	lsls	r3, r3, #31
 800101e:	d50c      	bpl.n	800103a <HAL_SPI_TransmitReceive+0x128>
 8001020:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001022:	b29b      	uxth	r3, r3
 8001024:	b14b      	cbz	r3, 800103a <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001026:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001028:	68d2      	ldr	r2, [r2, #12]
 800102a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800102e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001030:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001032:	3b01      	subs	r3, #1
 8001034:	b29b      	uxth	r3, r3
 8001036:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001038:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800103a:	f7ff fafb 	bl	8000634 <HAL_GetTick>
 800103e:	eba0 0008 	sub.w	r0, r0, r8
 8001042:	4287      	cmp	r7, r0
 8001044:	d8be      	bhi.n	8000fc4 <HAL_SPI_TransmitReceive+0xb2>
 8001046:	1c7e      	adds	r6, r7, #1
 8001048:	d0bc      	beq.n	8000fc4 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 800104a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800104c:	2301      	movs	r3, #1
 800104e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001052:	2300      	movs	r3, #0
 8001054:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001058:	b003      	add	sp, #12
 800105a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800105e:	b109      	cbz	r1, 8001064 <HAL_SPI_TransmitReceive+0x152>
 8001060:	2e01      	cmp	r6, #1
 8001062:	d108      	bne.n	8001076 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001064:	782a      	ldrb	r2, [r5, #0]
 8001066:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001068:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800106a:	3301      	adds	r3, #1
 800106c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800106e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001070:	3b01      	subs	r3, #1
 8001072:	b29b      	uxth	r3, r3
 8001074:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001076:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001078:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800107a:	b29b      	uxth	r3, r3
 800107c:	b91b      	cbnz	r3, 8001086 <HAL_SPI_TransmitReceive+0x174>
 800107e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001080:	b29b      	uxth	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0a4      	beq.n	8000fd0 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001086:	6822      	ldr	r2, [r4, #0]
 8001088:	6893      	ldr	r3, [r2, #8]
 800108a:	0798      	lsls	r0, r3, #30
 800108c:	d50e      	bpl.n	80010ac <HAL_SPI_TransmitReceive+0x19a>
 800108e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001090:	b29b      	uxth	r3, r3
 8001092:	b15b      	cbz	r3, 80010ac <HAL_SPI_TransmitReceive+0x19a>
 8001094:	b155      	cbz	r5, 80010ac <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001096:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800109c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800109e:	3301      	adds	r3, #1
 80010a0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80010a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80010aa:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80010ac:	6822      	ldr	r2, [r4, #0]
 80010ae:	6893      	ldr	r3, [r2, #8]
 80010b0:	07d9      	lsls	r1, r3, #31
 80010b2:	d50d      	bpl.n	80010d0 <HAL_SPI_TransmitReceive+0x1be>
 80010b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b153      	cbz	r3, 80010d0 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80010ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010bc:	68d2      	ldr	r2, [r2, #12]
 80010be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80010c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010c2:	3301      	adds	r3, #1
 80010c4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80010c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80010ce:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80010d0:	f7ff fab0 	bl	8000634 <HAL_GetTick>
 80010d4:	eba0 0008 	sub.w	r0, r0, r8
 80010d8:	4287      	cmp	r7, r0
 80010da:	d8cd      	bhi.n	8001078 <HAL_SPI_TransmitReceive+0x166>
 80010dc:	1c7b      	adds	r3, r7, #1
 80010de:	d0cb      	beq.n	8001078 <HAL_SPI_TransmitReceive+0x166>
 80010e0:	e7b3      	b.n	800104a <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010e2:	2320      	movs	r3, #32
 80010e4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80010e6:	2001      	movs	r0, #1
 80010e8:	e7b0      	b.n	800104c <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80010ea:	2002      	movs	r0, #2
 80010ec:	e7ae      	b.n	800104c <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80010ee:	2002      	movs	r0, #2
 80010f0:	e7b2      	b.n	8001058 <HAL_SPI_TransmitReceive+0x146>

080010f2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80010f2:	6803      	ldr	r3, [r0, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80010fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	f022 0201 	bic.w	r2, r2, #1
 8001102:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001104:	2320      	movs	r3, #32
 8001106:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800110a:	4770      	bx	lr

0800110c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800110c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001110:	6806      	ldr	r6, [r0, #0]
 8001112:	68c2      	ldr	r2, [r0, #12]
 8001114:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001116:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001118:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800111c:	4313      	orrs	r3, r2
 800111e:	6133      	str	r3, [r6, #16]
{
 8001120:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001122:	6883      	ldr	r3, [r0, #8]
 8001124:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001126:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001128:	4303      	orrs	r3, r0
 800112a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800112c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001130:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001132:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001136:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001138:	4313      	orrs	r3, r2
 800113a:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800113c:	6973      	ldr	r3, [r6, #20]
 800113e:	69a2      	ldr	r2, [r4, #24]
 8001140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001144:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001146:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800114a:	6173      	str	r3, [r6, #20]
 800114c:	4b7a      	ldr	r3, [pc, #488]	; (8001338 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800114e:	d17c      	bne.n	800124a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001150:	429e      	cmp	r6, r3
 8001152:	d003      	beq.n	800115c <UART_SetConfig+0x50>
 8001154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001158:	429e      	cmp	r6, r3
 800115a:	d144      	bne.n	80011e6 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800115c:	f7ff fe22 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 8001160:	2519      	movs	r5, #25
 8001162:	fb05 f300 	mul.w	r3, r5, r0
 8001166:	6860      	ldr	r0, [r4, #4]
 8001168:	f04f 0964 	mov.w	r9, #100	; 0x64
 800116c:	0040      	lsls	r0, r0, #1
 800116e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001172:	fbb3 f3f9 	udiv	r3, r3, r9
 8001176:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800117a:	f7ff fe13 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 800117e:	6863      	ldr	r3, [r4, #4]
 8001180:	4368      	muls	r0, r5
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fbb0 f7f3 	udiv	r7, r0, r3
 8001188:	f7ff fe0c 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 800118c:	6863      	ldr	r3, [r4, #4]
 800118e:	4368      	muls	r0, r5
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fbb0 f3f3 	udiv	r3, r0, r3
 8001196:	fbb3 f3f9 	udiv	r3, r3, r9
 800119a:	fb09 7313 	mls	r3, r9, r3, r7
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	3332      	adds	r3, #50	; 0x32
 80011a2:	fbb3 f3f9 	udiv	r3, r3, r9
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80011ac:	f7ff fdfa 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 80011b0:	6862      	ldr	r2, [r4, #4]
 80011b2:	4368      	muls	r0, r5
 80011b4:	0052      	lsls	r2, r2, #1
 80011b6:	fbb0 faf2 	udiv	sl, r0, r2
 80011ba:	f7ff fdf3 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80011be:	6863      	ldr	r3, [r4, #4]
 80011c0:	4368      	muls	r0, r5
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80011cc:	fb09 a313 	mls	r3, r9, r3, sl
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	3332      	adds	r3, #50	; 0x32
 80011d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80011de:	443b      	add	r3, r7
 80011e0:	60b3      	str	r3, [r6, #8]
 80011e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80011e6:	f7ff fdcd 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 80011ea:	2519      	movs	r5, #25
 80011ec:	fb05 f300 	mul.w	r3, r5, r0
 80011f0:	6860      	ldr	r0, [r4, #4]
 80011f2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80011f6:	0040      	lsls	r0, r0, #1
 80011f8:	fbb3 f3f0 	udiv	r3, r3, r0
 80011fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001200:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001204:	f7ff fdbe 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8001208:	6863      	ldr	r3, [r4, #4]
 800120a:	4368      	muls	r0, r5
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fbb0 f7f3 	udiv	r7, r0, r3
 8001212:	f7ff fdb7 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8001216:	6863      	ldr	r3, [r4, #4]
 8001218:	4368      	muls	r0, r5
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001220:	fbb3 f3f9 	udiv	r3, r3, r9
 8001224:	fb09 7313 	mls	r3, r9, r3, r7
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	3332      	adds	r3, #50	; 0x32
 800122c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001236:	f7ff fda5 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 800123a:	6862      	ldr	r2, [r4, #4]
 800123c:	4368      	muls	r0, r5
 800123e:	0052      	lsls	r2, r2, #1
 8001240:	fbb0 faf2 	udiv	sl, r0, r2
 8001244:	f7ff fd9e 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8001248:	e7b9      	b.n	80011be <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800124a:	429e      	cmp	r6, r3
 800124c:	d002      	beq.n	8001254 <UART_SetConfig+0x148>
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <UART_SetConfig+0x230>)
 8001250:	429e      	cmp	r6, r3
 8001252:	d140      	bne.n	80012d6 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001254:	f7ff fda6 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 8001258:	6867      	ldr	r7, [r4, #4]
 800125a:	2519      	movs	r5, #25
 800125c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001260:	fb05 f300 	mul.w	r3, r5, r0
 8001264:	00bf      	lsls	r7, r7, #2
 8001266:	fbb3 f3f7 	udiv	r3, r3, r7
 800126a:	fbb3 f3f9 	udiv	r3, r3, r9
 800126e:	011f      	lsls	r7, r3, #4
 8001270:	f7ff fd98 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 8001274:	6863      	ldr	r3, [r4, #4]
 8001276:	4368      	muls	r0, r5
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	fbb0 f8f3 	udiv	r8, r0, r3
 800127e:	f7ff fd91 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 8001282:	6863      	ldr	r3, [r4, #4]
 8001284:	4368      	muls	r0, r5
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fbb0 f3f3 	udiv	r3, r0, r3
 800128c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001290:	fb09 8313 	mls	r3, r9, r3, r8
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	3332      	adds	r3, #50	; 0x32
 8001298:	fbb3 f3f9 	udiv	r3, r3, r9
 800129c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80012a0:	f7ff fd80 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
 80012a4:	6862      	ldr	r2, [r4, #4]
 80012a6:	4368      	muls	r0, r5
 80012a8:	0092      	lsls	r2, r2, #2
 80012aa:	fbb0 faf2 	udiv	sl, r0, r2
 80012ae:	f7ff fd79 	bl	8000da4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80012b2:	6863      	ldr	r3, [r4, #4]
 80012b4:	4368      	muls	r0, r5
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80012c0:	fb09 a313 	mls	r3, r9, r3, sl
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	3332      	adds	r3, #50	; 0x32
 80012c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	ea43 0308 	orr.w	r3, r3, r8
 80012d4:	e783      	b.n	80011de <UART_SetConfig+0xd2>
 80012d6:	f7ff fd55 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 80012da:	6867      	ldr	r7, [r4, #4]
 80012dc:	2519      	movs	r5, #25
 80012de:	f04f 0964 	mov.w	r9, #100	; 0x64
 80012e2:	fb05 f300 	mul.w	r3, r5, r0
 80012e6:	00bf      	lsls	r7, r7, #2
 80012e8:	fbb3 f3f7 	udiv	r3, r3, r7
 80012ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80012f0:	011f      	lsls	r7, r3, #4
 80012f2:	f7ff fd47 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 80012f6:	6863      	ldr	r3, [r4, #4]
 80012f8:	4368      	muls	r0, r5
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	fbb0 f8f3 	udiv	r8, r0, r3
 8001300:	f7ff fd40 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8001304:	6863      	ldr	r3, [r4, #4]
 8001306:	4368      	muls	r0, r5
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	fbb0 f3f3 	udiv	r3, r0, r3
 800130e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001312:	fb09 8313 	mls	r3, r9, r3, r8
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	3332      	adds	r3, #50	; 0x32
 800131a:	fbb3 f3f9 	udiv	r3, r3, r9
 800131e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001322:	f7ff fd2f 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8001326:	6862      	ldr	r2, [r4, #4]
 8001328:	4368      	muls	r0, r5
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	fbb0 faf2 	udiv	sl, r0, r2
 8001330:	f7ff fd28 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8001334:	e7bd      	b.n	80012b2 <UART_SetConfig+0x1a6>
 8001336:	bf00      	nop
 8001338:	40011000 	.word	0x40011000
 800133c:	40011400 	.word	0x40011400

08001340 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001342:	4604      	mov	r4, r0
 8001344:	460e      	mov	r6, r1
 8001346:	4617      	mov	r7, r2
 8001348:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800134a:	6821      	ldr	r1, [r4, #0]
 800134c:	680b      	ldr	r3, [r1, #0]
 800134e:	ea36 0303 	bics.w	r3, r6, r3
 8001352:	d101      	bne.n	8001358 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001354:	2000      	movs	r0, #0
}
 8001356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001358:	1c6b      	adds	r3, r5, #1
 800135a:	d0f7      	beq.n	800134c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800135c:	b995      	cbnz	r5, 8001384 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001366:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001370:	2320      	movs	r3, #32
 8001372:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001376:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800137a:	2300      	movs	r3, #0
 800137c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001380:	2003      	movs	r0, #3
 8001382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001384:	f7ff f956 	bl	8000634 <HAL_GetTick>
 8001388:	1bc0      	subs	r0, r0, r7
 800138a:	4285      	cmp	r5, r0
 800138c:	d2dd      	bcs.n	800134a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800138e:	e7e6      	b.n	800135e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001390 <HAL_UART_Init>:
{
 8001390:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001392:	4604      	mov	r4, r0
 8001394:	b340      	cbz	r0, 80013e8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001396:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800139a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800139e:	b91b      	cbnz	r3, 80013a8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80013a0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80013a4:	f000 fbdc 	bl	8001b60 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80013a8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80013aa:	2324      	movs	r3, #36	; 0x24
 80013ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80013b0:	68d3      	ldr	r3, [r2, #12]
 80013b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013b6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80013b8:	4620      	mov	r0, r4
 80013ba:	f7ff fea7 	bl	800110c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	691a      	ldr	r2, [r3, #16]
 80013c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013ce:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013d6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013d8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80013da:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013dc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80013de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80013e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80013e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80013e8:	2001      	movs	r0, #1
}
 80013ea:	bd10      	pop	{r4, pc}

080013ec <HAL_UART_Transmit>:
{
 80013ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80013f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80013f6:	2b20      	cmp	r3, #32
{
 80013f8:	4604      	mov	r4, r0
 80013fa:	460d      	mov	r5, r1
 80013fc:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80013fe:	d14f      	bne.n	80014a0 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001400:	2900      	cmp	r1, #0
 8001402:	d04a      	beq.n	800149a <HAL_UART_Transmit+0xae>
 8001404:	2a00      	cmp	r2, #0
 8001406:	d048      	beq.n	800149a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001408:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800140c:	2b01      	cmp	r3, #1
 800140e:	d047      	beq.n	80014a0 <HAL_UART_Transmit+0xb4>
 8001410:	2301      	movs	r3, #1
 8001412:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001416:	2300      	movs	r3, #0
 8001418:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800141a:	2321      	movs	r3, #33	; 0x21
 800141c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001420:	f7ff f908 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001424:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001428:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800142a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800142e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001430:	b29b      	uxth	r3, r3
 8001432:	b96b      	cbnz	r3, 8001450 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4632      	mov	r2, r6
 8001438:	2140      	movs	r1, #64	; 0x40
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff ff80 	bl	8001340 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001440:	b9b0      	cbnz	r0, 8001470 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8001442:	2320      	movs	r3, #32
 8001444:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001448:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001450:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001452:	3b01      	subs	r3, #1
 8001454:	b29b      	uxth	r3, r3
 8001456:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001458:	68a3      	ldr	r3, [r4, #8]
 800145a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800145e:	4632      	mov	r2, r6
 8001460:	463b      	mov	r3, r7
 8001462:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001466:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001468:	d10e      	bne.n	8001488 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800146a:	f7ff ff69 	bl	8001340 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800146e:	b110      	cbz	r0, 8001476 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001470:	2003      	movs	r0, #3
 8001472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001476:	882b      	ldrh	r3, [r5, #0]
 8001478:	6822      	ldr	r2, [r4, #0]
 800147a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800147e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001480:	6923      	ldr	r3, [r4, #16]
 8001482:	b943      	cbnz	r3, 8001496 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8001484:	3502      	adds	r5, #2
 8001486:	e7d2      	b.n	800142e <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001488:	f7ff ff5a 	bl	8001340 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800148c:	2800      	cmp	r0, #0
 800148e:	d1ef      	bne.n	8001470 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	782a      	ldrb	r2, [r5, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	3501      	adds	r5, #1
 8001498:	e7c9      	b.n	800142e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800149a:	2001      	movs	r0, #1
 800149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80014a0:	2002      	movs	r0, #2
}
 80014a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080014a6 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80014a6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80014aa:	2b20      	cmp	r3, #32
 80014ac:	d120      	bne.n	80014f0 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80014ae:	b1e9      	cbz	r1, 80014ec <HAL_UART_Receive_IT+0x46>
 80014b0:	b1e2      	cbz	r2, 80014ec <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80014b2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d01a      	beq.n	80014f0 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80014ba:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80014bc:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014be:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014c0:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014c2:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014c4:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014c8:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80014ca:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014cc:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80014ce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014d2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80014d6:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80014d8:	6951      	ldr	r1, [r2, #20]
 80014da:	f041 0101 	orr.w	r1, r1, #1
 80014de:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80014e0:	68d1      	ldr	r1, [r2, #12]
 80014e2:	f041 0120 	orr.w	r1, r1, #32
 80014e6:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80014e8:	4618      	mov	r0, r3
 80014ea:	4770      	bx	lr
      return HAL_ERROR;
 80014ec:	2001      	movs	r0, #1
 80014ee:	4770      	bx	lr
    return HAL_BUSY;
 80014f0:	2002      	movs	r0, #2
}
 80014f2:	4770      	bx	lr

080014f4 <HAL_UART_TxCpltCallback>:
 80014f4:	4770      	bx	lr

080014f6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80014f6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80014fa:	2b22      	cmp	r3, #34	; 0x22
{
 80014fc:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80014fe:	d136      	bne.n	800156e <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001500:	6883      	ldr	r3, [r0, #8]
 8001502:	6901      	ldr	r1, [r0, #16]
 8001504:	6802      	ldr	r2, [r0, #0]
 8001506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800150a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800150c:	d123      	bne.n	8001556 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800150e:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001510:	b9e9      	cbnz	r1, 800154e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001512:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001516:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800151a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800151c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800151e:	3c01      	subs	r4, #1
 8001520:	b2a4      	uxth	r4, r4
 8001522:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001524:	b98c      	cbnz	r4, 800154a <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001526:	6803      	ldr	r3, [r0, #0]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	f022 0220 	bic.w	r2, r2, #32
 800152e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001536:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	f022 0201 	bic.w	r2, r2, #1
 800153e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001540:	2320      	movs	r3, #32
 8001542:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001546:	f000 f90b 	bl	8001760 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800154a:	2000      	movs	r0, #0
}
 800154c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	f823 2b01 	strh.w	r2, [r3], #1
 8001554:	e7e1      	b.n	800151a <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001556:	b921      	cbnz	r1, 8001562 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001558:	1c59      	adds	r1, r3, #1
 800155a:	6852      	ldr	r2, [r2, #4]
 800155c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	e7dc      	b.n	800151c <UART_Receive_IT+0x26>
 8001562:	6852      	ldr	r2, [r2, #4]
 8001564:	1c59      	adds	r1, r3, #1
 8001566:	6281      	str	r1, [r0, #40]	; 0x28
 8001568:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800156c:	e7f7      	b.n	800155e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800156e:	2002      	movs	r0, #2
 8001570:	bd10      	pop	{r4, pc}

08001572 <HAL_UART_ErrorCallback>:
 8001572:	4770      	bx	lr

08001574 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001574:	6803      	ldr	r3, [r0, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001578:	68d9      	ldr	r1, [r3, #12]
{
 800157a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800157c:	0716      	lsls	r6, r2, #28
{
 800157e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001580:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001582:	d107      	bne.n	8001594 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001584:	0696      	lsls	r6, r2, #26
 8001586:	d55a      	bpl.n	800163e <HAL_UART_IRQHandler+0xca>
 8001588:	068d      	lsls	r5, r1, #26
 800158a:	d558      	bpl.n	800163e <HAL_UART_IRQHandler+0xca>
}
 800158c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001590:	f7ff bfb1 	b.w	80014f6 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001594:	f015 0501 	ands.w	r5, r5, #1
 8001598:	d102      	bne.n	80015a0 <HAL_UART_IRQHandler+0x2c>
 800159a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800159e:	d04e      	beq.n	800163e <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80015a0:	07d3      	lsls	r3, r2, #31
 80015a2:	d505      	bpl.n	80015b0 <HAL_UART_IRQHandler+0x3c>
 80015a4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80015a6:	bf42      	ittt	mi
 80015a8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80015aa:	f043 0301 	orrmi.w	r3, r3, #1
 80015ae:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015b0:	0750      	lsls	r0, r2, #29
 80015b2:	d504      	bpl.n	80015be <HAL_UART_IRQHandler+0x4a>
 80015b4:	b11d      	cbz	r5, 80015be <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80015b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015be:	0793      	lsls	r3, r2, #30
 80015c0:	d504      	bpl.n	80015cc <HAL_UART_IRQHandler+0x58>
 80015c2:	b11d      	cbz	r5, 80015cc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80015c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015cc:	0716      	lsls	r6, r2, #28
 80015ce:	d504      	bpl.n	80015da <HAL_UART_IRQHandler+0x66>
 80015d0:	b11d      	cbz	r5, 80015da <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80015d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80015da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d066      	beq.n	80016ae <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015e0:	0695      	lsls	r5, r2, #26
 80015e2:	d504      	bpl.n	80015ee <HAL_UART_IRQHandler+0x7a>
 80015e4:	0688      	lsls	r0, r1, #26
 80015e6:	d502      	bpl.n	80015ee <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7ff ff84 	bl	80014f6 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80015f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80015f4:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80015f6:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80015f8:	d402      	bmi.n	8001600 <HAL_UART_IRQHandler+0x8c>
 80015fa:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80015fe:	d01a      	beq.n	8001636 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001600:	f7ff fd77 	bl	80010f2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	0652      	lsls	r2, r2, #25
 800160a:	d510      	bpl.n	800162e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800160c:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800160e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001614:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001616:	b150      	cbz	r0, 800162e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_UART_IRQHandler+0x13c>)
 800161a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800161c:	f7ff f87a 	bl	8000714 <HAL_DMA_Abort_IT>
 8001620:	2800      	cmp	r0, #0
 8001622:	d044      	beq.n	80016ae <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001624:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800162a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800162c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff ff9f 	bl	8001572 <HAL_UART_ErrorCallback>
 8001634:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001636:	f7ff ff9c 	bl	8001572 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800163a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800163c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800163e:	0616      	lsls	r6, r2, #24
 8001640:	d527      	bpl.n	8001692 <HAL_UART_IRQHandler+0x11e>
 8001642:	060d      	lsls	r5, r1, #24
 8001644:	d525      	bpl.n	8001692 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001646:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800164a:	2a21      	cmp	r2, #33	; 0x21
 800164c:	d12f      	bne.n	80016ae <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800164e:	68a2      	ldr	r2, [r4, #8]
 8001650:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001654:	6a22      	ldr	r2, [r4, #32]
 8001656:	d117      	bne.n	8001688 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001658:	8811      	ldrh	r1, [r2, #0]
 800165a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800165e:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001660:	6921      	ldr	r1, [r4, #16]
 8001662:	b979      	cbnz	r1, 8001684 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001664:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001666:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001668:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800166a:	3a01      	subs	r2, #1
 800166c:	b292      	uxth	r2, r2
 800166e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001670:	b9ea      	cbnz	r2, 80016ae <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001678:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001684:	3201      	adds	r2, #1
 8001686:	e7ee      	b.n	8001666 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001688:	1c51      	adds	r1, r2, #1
 800168a:	6221      	str	r1, [r4, #32]
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	e7ea      	b.n	8001668 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001692:	0650      	lsls	r0, r2, #25
 8001694:	d50b      	bpl.n	80016ae <HAL_UART_IRQHandler+0x13a>
 8001696:	064a      	lsls	r2, r1, #25
 8001698:	d509      	bpl.n	80016ae <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016a0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80016a2:	2320      	movs	r3, #32
 80016a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff ff23 	bl	80014f4 <HAL_UART_TxCpltCallback>
 80016ae:	bd70      	pop	{r4, r5, r6, pc}
 80016b0:	080016b5 	.word	0x080016b5

080016b4 <UART_DMAAbortOnError>:
{
 80016b4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80016bc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80016be:	f7ff ff58 	bl	8001572 <HAL_UART_ErrorCallback>
 80016c2:	bd08      	pop	{r3, pc}

080016c4 <csEnable>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void csEnable(void)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2140      	movs	r1, #64	; 0x40
 80016c8:	4801      	ldr	r0, [pc, #4]	; (80016d0 <csEnable+0xc>)
 80016ca:	f7ff b90b 	b.w	80008e4 <HAL_GPIO_WritePin>
 80016ce:	bf00      	nop
 80016d0:	40020400 	.word	0x40020400

080016d4 <csDisable>:
}

void csDisable(void)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	2140      	movs	r1, #64	; 0x40
 80016d8:	4801      	ldr	r0, [pc, #4]	; (80016e0 <csDisable+0xc>)
 80016da:	f7ff b903 	b.w	80008e4 <HAL_GPIO_WritePin>
 80016de:	bf00      	nop
 80016e0:	40020400 	.word	0x40020400

080016e4 <spiWriteByte>:
}

void spiWriteByte(uint8_t tx)
{
 80016e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t rx;
	HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, 10);
 80016e6:	230a      	movs	r3, #10
{
 80016e8:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, 10);
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	f10d 0217 	add.w	r2, sp, #23
 80016f2:	2301      	movs	r3, #1
 80016f4:	f10d 010f 	add.w	r1, sp, #15
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <spiWriteByte+0x20>)
 80016fa:	f7ff fc0a 	bl	8000f12 <HAL_SPI_TransmitReceive>
}
 80016fe:	b007      	add	sp, #28
 8001700:	f85d fb04 	ldr.w	pc, [sp], #4
 8001704:	2000030c 	.word	0x2000030c

08001708 <spiReadByte>:

uint8_t spiReadByte(void)
{
 8001708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t rx = 0, tx = 0xFF;
 800170a:	2300      	movs	r3, #0
 800170c:	f88d 300e 	strb.w	r3, [sp, #14]
 8001710:	23ff      	movs	r3, #255	; 0xff
 8001712:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, 10);
 8001716:	230a      	movs	r3, #10
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	f10d 020e 	add.w	r2, sp, #14
 800171e:	2301      	movs	r3, #1
 8001720:	f10d 010f 	add.w	r1, sp, #15
 8001724:	4803      	ldr	r0, [pc, #12]	; (8001734 <spiReadByte+0x2c>)
 8001726:	f7ff fbf4 	bl	8000f12 <HAL_SPI_TransmitReceive>
	return rx;
}
 800172a:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800172e:	b005      	add	sp, #20
 8001730:	f85d fb04 	ldr.w	pc, [sp], #4
 8001734:	2000030c 	.word	0x2000030c

08001738 <_write>:
{
 8001738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 800173a:	4f08      	ldr	r7, [pc, #32]	; (800175c <_write+0x24>)
{
 800173c:	460e      	mov	r6, r1
 800173e:	4615      	mov	r5, r2
	for(int i=0; i<len; i++)
 8001740:	2400      	movs	r4, #0
 8001742:	42ac      	cmp	r4, r5
 8001744:	db01      	blt.n	800174a <_write+0x12>
}
 8001746:	4628      	mov	r0, r5
 8001748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 800174a:	1931      	adds	r1, r6, r4
 800174c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001750:	2201      	movs	r2, #1
 8001752:	4638      	mov	r0, r7
 8001754:	f7ff fe4a 	bl	80013ec <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 8001758:	3401      	adds	r4, #1
 800175a:	e7f2      	b.n	8001742 <_write+0xa>
 800175c:	20000364 	.word	0x20000364

08001760 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001760:	b570      	push	{r4, r5, r6, lr}
     HAL_UART_Receive_IT(&huart2, rxData, 1);
 8001762:	4d08      	ldr	r5, [pc, #32]	; (8001784 <HAL_UART_RxCpltCallback+0x24>)
 8001764:	4c08      	ldr	r4, [pc, #32]	; (8001788 <HAL_UART_RxCpltCallback+0x28>)
 8001766:	4629      	mov	r1, r5
 8001768:	2201      	movs	r2, #1
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff fe9b 	bl	80014a6 <HAL_UART_Receive_IT>
     HAL_UART_Transmit(&huart2, rxData, 1, 1000);
 8001770:	4629      	mov	r1, r5
 8001772:	4620      	mov	r0, r4
 8001774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001778:	2201      	movs	r2, #1
}
 800177a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     HAL_UART_Transmit(&huart2, rxData, 1, 1000);
 800177e:	f7ff be35 	b.w	80013ec <HAL_UART_Transmit>
 8001782:	bf00      	nop
 8001784:	20000108 	.word	0x20000108
 8001788:	20000364 	.word	0x20000364

0800178c <W5500_Initialze>:
void W5500_Initialze(void)
{
 800178c:	b570      	push	{r4, r5, r6, lr}
 800178e:	b086      	sub	sp, #24
	//intr_kind temp;
	//unsigned char W5100S_AdrSet[2][4] = {{2,2,2,2},{2,2,2,2}};
	csDisable();
 8001790:	f7ff ffa0 	bl	80016d4 <csDisable>
	/*
	 */
	reg_wizchip_cs_cbfunc(csEnable, csDisable);
 8001794:	4918      	ldr	r1, [pc, #96]	; (80017f8 <W5500_Initialze+0x6c>)
 8001796:	4819      	ldr	r0, [pc, #100]	; (80017fc <W5500_Initialze+0x70>)
 8001798:	f000 feee 	bl	8002578 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spiReadByte,spiWriteByte);
 800179c:	4918      	ldr	r1, [pc, #96]	; (8001800 <W5500_Initialze+0x74>)
 800179e:	4819      	ldr	r0, [pc, #100]	; (8001804 <W5500_Initialze+0x78>)
 80017a0:	f000 fefc 	bl	800259c <reg_wizchip_spi_cbfunc>
			printf("Unknown PHY link status.\r\n");
		}
	}while(temp == PHY_LINK_OFF);
	*/
	uint8_t tmp;
	uint8_t memsize[2][8] = { {2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <W5500_Initialze+0x7c>)
 80017a6:	aa02      	add	r2, sp, #8
 80017a8:	f103 0610 	add.w	r6, r3, #16
 80017ac:	4615      	mov	r5, r2
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	4614      	mov	r4, r2
 80017b4:	c403      	stmia	r4!, {r0, r1}
 80017b6:	3308      	adds	r3, #8
 80017b8:	42b3      	cmp	r3, r6
 80017ba:	4622      	mov	r2, r4
 80017bc:	d1f7      	bne.n	80017ae <W5500_Initialze+0x22>
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 80017be:	4629      	mov	r1, r5
 80017c0:	2001      	movs	r0, #1
 80017c2:	f001 f865 	bl	8002890 <ctlwizchip>
 80017c6:	3001      	adds	r0, #1
 80017c8:	d10b      	bne.n	80017e2 <W5500_Initialze+0x56>
	{
		//myprintf("WIZCHIP Initialized fail.\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t *)"WIZCHIP Initialized fail.\r\n", 1, 10);
 80017ca:	4910      	ldr	r1, [pc, #64]	; (800180c <W5500_Initialze+0x80>)
 80017cc:	230a      	movs	r3, #10
 80017ce:	2201      	movs	r2, #1

	/* PHY link status check */
	do {
		if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
		{
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown PHY Link status.\r\n", 1, 10);
 80017d0:	480f      	ldr	r0, [pc, #60]	; (8001810 <W5500_Initialze+0x84>)
 80017d2:	f7ff fe0b 	bl	80013ec <HAL_UART_Transmit>
		  return;
		}
	} while (tmp == PHY_LINK_OFF);
}
 80017d6:	b006      	add	sp, #24
 80017d8:	bd70      	pop	{r4, r5, r6, pc}
	} while (tmp == PHY_LINK_OFF);
 80017da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f9      	bne.n	80017d6 <W5500_Initialze+0x4a>
		if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 80017e2:	f10d 0107 	add.w	r1, sp, #7
 80017e6:	200f      	movs	r0, #15
 80017e8:	f001 f852 	bl	8002890 <ctlwizchip>
 80017ec:	3001      	adds	r0, #1
 80017ee:	d1f4      	bne.n	80017da <W5500_Initialze+0x4e>
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown PHY Link status.\r\n", 1, 10);
 80017f0:	230a      	movs	r3, #10
 80017f2:	2201      	movs	r2, #1
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <W5500_Initialze+0x88>)
 80017f6:	e7eb      	b.n	80017d0 <W5500_Initialze+0x44>
 80017f8:	080016d5 	.word	0x080016d5
 80017fc:	080016c5 	.word	0x080016c5
 8001800:	080016e5 	.word	0x080016e5
 8001804:	08001709 	.word	0x08001709
 8001808:	080039ac 	.word	0x080039ac
 800180c:	080039bc 	.word	0x080039bc
 8001810:	20000364 	.word	0x20000364
 8001814:	080039d8 	.word	0x080039d8

08001818 <print_network_information>:


void print_network_information(void)
{
 8001818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	wizchip_getnetinfo(&defaultNetInfo);
 800181a:	4c19      	ldr	r4, [pc, #100]	; (8001880 <print_network_information+0x68>)
 800181c:	4620      	mov	r0, r4
 800181e:	f001 f8d3 	bl	80029c8 <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",defaultNetInfo.mac[0],defaultNetInfo.mac[1],defaultNetInfo.mac[2],defaultNetInfo.mac[3],defaultNetInfo.mac[4],defaultNetInfo.mac[5]);
 8001822:	7960      	ldrb	r0, [r4, #5]
 8001824:	9002      	str	r0, [sp, #8]
 8001826:	7920      	ldrb	r0, [r4, #4]
 8001828:	9001      	str	r0, [sp, #4]
 800182a:	78e0      	ldrb	r0, [r4, #3]
 800182c:	78a3      	ldrb	r3, [r4, #2]
 800182e:	7862      	ldrb	r2, [r4, #1]
 8001830:	7821      	ldrb	r1, [r4, #0]
 8001832:	9000      	str	r0, [sp, #0]
 8001834:	4813      	ldr	r0, [pc, #76]	; (8001884 <print_network_information+0x6c>)
 8001836:	f001 f9fd 	bl	8002c34 <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",defaultNetInfo.ip[0],defaultNetInfo.ip[1],defaultNetInfo.ip[2],defaultNetInfo.ip[3]);
 800183a:	7a60      	ldrb	r0, [r4, #9]
 800183c:	7a23      	ldrb	r3, [r4, #8]
 800183e:	79e2      	ldrb	r2, [r4, #7]
 8001840:	79a1      	ldrb	r1, [r4, #6]
 8001842:	9000      	str	r0, [sp, #0]
 8001844:	4810      	ldr	r0, [pc, #64]	; (8001888 <print_network_information+0x70>)
 8001846:	f001 f9f5 	bl	8002c34 <iprintf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r",defaultNetInfo.sn[0],defaultNetInfo.sn[1],defaultNetInfo.sn[2],defaultNetInfo.sn[3]);
 800184a:	7b60      	ldrb	r0, [r4, #13]
 800184c:	7b23      	ldrb	r3, [r4, #12]
 800184e:	7ae2      	ldrb	r2, [r4, #11]
 8001850:	7aa1      	ldrb	r1, [r4, #10]
 8001852:	9000      	str	r0, [sp, #0]
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <print_network_information+0x74>)
 8001856:	f001 f9ed 	bl	8002c34 <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",defaultNetInfo.gw[0],defaultNetInfo.gw[1],defaultNetInfo.gw[2],defaultNetInfo.gw[3]);
 800185a:	7c60      	ldrb	r0, [r4, #17]
 800185c:	7c23      	ldrb	r3, [r4, #16]
 800185e:	7be2      	ldrb	r2, [r4, #15]
 8001860:	7ba1      	ldrb	r1, [r4, #14]
 8001862:	9000      	str	r0, [sp, #0]
 8001864:	480a      	ldr	r0, [pc, #40]	; (8001890 <print_network_information+0x78>)
 8001866:	f001 f9e5 	bl	8002c34 <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",defaultNetInfo.dns[0],defaultNetInfo.dns[1],defaultNetInfo.dns[2],defaultNetInfo.dns[3]);
 800186a:	7d60      	ldrb	r0, [r4, #21]
 800186c:	9000      	str	r0, [sp, #0]
 800186e:	7d23      	ldrb	r3, [r4, #20]
 8001870:	7ce2      	ldrb	r2, [r4, #19]
 8001872:	7ca1      	ldrb	r1, [r4, #18]
 8001874:	4807      	ldr	r0, [pc, #28]	; (8001894 <print_network_information+0x7c>)
 8001876:	f001 f9dd 	bl	8002c34 <iprintf>
}
 800187a:	b004      	add	sp, #16
 800187c:	bd10      	pop	{r4, pc}
 800187e:	bf00      	nop
 8001880:	20000008 	.word	0x20000008
 8001884:	08003a39 	.word	0x08003a39
 8001888:	08003a66 	.word	0x08003a66
 800188c:	08003a81 	.word	0x08003a81
 8001890:	08003a9c 	.word	0x08003a9c
 8001894:	08003ab7 	.word	0x08003ab7

08001898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001898:	b530      	push	{r4, r5, lr}
 800189a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189c:	2230      	movs	r2, #48	; 0x30
 800189e:	2100      	movs	r1, #0
 80018a0:	a808      	add	r0, sp, #32
 80018a2:	f001 f913 	bl	8002acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a6:	2100      	movs	r1, #0
 80018a8:	2214      	movs	r2, #20
 80018aa:	a803      	add	r0, sp, #12
 80018ac:	f001 f90e 	bl	8002acc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b0:	2400      	movs	r4, #0
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <SystemClock_Config+0x84>)
 80018b4:	9401      	str	r4, [sp, #4]
 80018b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <SystemClock_Config+0x88>)
 80018ca:	9402      	str	r4, [sp, #8]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018d6:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e0:	2301      	movs	r3, #1
 80018e2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e4:	2310      	movs	r3, #16
 80018e6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018e8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80018ea:	23c8      	movs	r3, #200	; 0xc8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ec:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 200;
 80018ee:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018f2:	2304      	movs	r3, #4
 80018f4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f6:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f8:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018fa:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fc:	f7fe fff8 	bl	80008f0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001900:	230f      	movs	r3, #15
 8001902:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001904:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800190a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800190c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001910:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001912:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001914:	f7ff f99c 	bl	8000c50 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001918:	b015      	add	sp, #84	; 0x54
 800191a:	bd30      	pop	{r4, r5, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40007000 	.word	0x40007000

08001924 <main>:
{
 8001924:	b570      	push	{r4, r5, r6, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001928:	f7fe fe5e 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 800192c:	f7ff ffb4 	bl	8001898 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	2214      	movs	r2, #20
 8001932:	2100      	movs	r1, #0
 8001934:	eb0d 0002 	add.w	r0, sp, r2
 8001938:	f001 f8c8 	bl	8002acc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193c:	2400      	movs	r4, #0
 800193e:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <main+0x158>)
 8001940:	9401      	str	r4, [sp, #4]
 8001942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001944:	484e      	ldr	r0, [pc, #312]	; (8001a80 <main+0x15c>)
  huart2.Instance = USART2;
 8001946:	4d4f      	ldr	r5, [pc, #316]	; (8001a84 <main+0x160>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001948:	f042 0204 	orr.w	r2, r2, #4
 800194c:	631a      	str	r2, [r3, #48]	; 0x30
 800194e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001950:	f002 0204 	and.w	r2, r2, #4
 8001954:	9201      	str	r2, [sp, #4]
 8001956:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001958:	9402      	str	r4, [sp, #8]
 800195a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800195c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
 8001962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001964:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001968:	9202      	str	r2, [sp, #8]
 800196a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	9403      	str	r4, [sp, #12]
 800196e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001970:	f042 0201 	orr.w	r2, r2, #1
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
 8001976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001978:	f002 0201 	and.w	r2, r2, #1
 800197c:	9203      	str	r2, [sp, #12]
 800197e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001980:	9404      	str	r4, [sp, #16]
 8001982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001984:	f042 0202 	orr.w	r2, r2, #2
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001990:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001994:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001998:	f7fe ffa4 	bl	80008e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800199c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019a2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019a4:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <main+0x164>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019a6:	4839      	ldr	r0, [pc, #228]	; (8001a8c <main+0x168>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019a8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	9407      	str	r4, [sp, #28]

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f7fe fec3 	bl	8000738 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019b2:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	a905      	add	r1, sp, #20
 80019b6:	4832      	ldr	r0, [pc, #200]	; (8001a80 <main+0x15c>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019b8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f7fe feba 	bl	8000738 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 80019c4:	4832      	ldr	r0, [pc, #200]	; (8001a90 <main+0x16c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019c6:	4a33      	ldr	r2, [pc, #204]	; (8001a94 <main+0x170>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019c8:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ca:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019ce:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d6:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80019d8:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019da:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019dc:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019de:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e0:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e2:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e4:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e6:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ea:	f7ff fa55 	bl	8000e98 <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 80019ee:	492a      	ldr	r1, [pc, #168]	; (8001a98 <main+0x174>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019f0:	60ac      	str	r4, [r5, #8]
  huart2.Init.BaudRate = 115200;
 80019f2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019f6:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fa:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019fc:	230c      	movs	r3, #12
 80019fe:	616b      	str	r3, [r5, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a00:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a02:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a04:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a06:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a08:	f7ff fcc2 	bl	8001390 <HAL_UART_Init>
  printf("Hello! W5500 loopback System \r\n");
 8001a0c:	4823      	ldr	r0, [pc, #140]	; (8001a9c <main+0x178>)
	ret = loopback_tcps(0, eth0_buf, 5001);
 8001a0e:	4c24      	ldr	r4, [pc, #144]	; (8001aa0 <main+0x17c>)
  printf("Hello! W5500 loopback System \r\n");
 8001a10:	f001 f984 	bl	8002d1c <puts>
    HAL_UART_Receive_IT(&huart2, rxData, 1);
 8001a14:	4632      	mov	r2, r6
 8001a16:	4923      	ldr	r1, [pc, #140]	; (8001aa4 <main+0x180>)
 8001a18:	4628      	mov	r0, r5
 8001a1a:	f7ff fd44 	bl	80014a6 <HAL_UART_Receive_IT>
    W5500_Initialze();
 8001a1e:	f7ff feb5 	bl	800178c <W5500_Initialze>
    wizchip_setnetinfo(&defaultNetInfo);
 8001a22:	4821      	ldr	r0, [pc, #132]	; (8001aa8 <main+0x184>)
		printf("ret = %d, buf = %X[%s]\r\n", ret, eth0_buf[0],eth0_buf);
 8001a24:	4d21      	ldr	r5, [pc, #132]	; (8001aac <main+0x188>)
    wizchip_setnetinfo(&defaultNetInfo);
 8001a26:	f000 ffa1 	bl	800296c <wizchip_setnetinfo>
    print_network_information();
 8001a2a:	f7ff fef5 	bl	8001818 <print_network_information>
	ret = loopback_tcps(0, eth0_buf, 5001);
 8001a2e:	f241 3289 	movw	r2, #5001	; 0x1389
 8001a32:	491b      	ldr	r1, [pc, #108]	; (8001aa0 <main+0x17c>)
 8001a34:	2000      	movs	r0, #0
 8001a36:	f000 f93d 	bl	8001cb4 <loopback_tcps>
	if(eth0_buf[0] != 0 )
 8001a3a:	7822      	ldrb	r2, [r4, #0]
 8001a3c:	2a00      	cmp	r2, #0
 8001a3e:	d0f6      	beq.n	8001a2e <main+0x10a>
		printf("ret = %d, buf = %X[%s]\r\n", ret, eth0_buf[0],eth0_buf);
 8001a40:	4623      	mov	r3, r4
 8001a42:	b2c1      	uxtb	r1, r0
 8001a44:	4628      	mov	r0, r5
 8001a46:	f001 f8f5 	bl	8002c34 <iprintf>
		if(eth0_buf[0] == 0x5a)
 8001a4a:	7823      	ldrb	r3, [r4, #0]
 8001a4c:	2b5a      	cmp	r3, #90	; 0x5a
 8001a4e:	d110      	bne.n	8001a72 <main+0x14e>
			printf("data = 0x5a \r\n");
 8001a50:	4817      	ldr	r0, [pc, #92]	; (8001ab0 <main+0x18c>)
 8001a52:	f001 f963 	bl	8002d1c <puts>
			eth0_buf[0] = 0xA5;
 8001a56:	23a5      	movs	r3, #165	; 0xa5
 8001a58:	7023      	strb	r3, [r4, #0]
			ret = send(0, eth0_buf, 1);
 8001a5a:	2201      	movs	r2, #1
			ret = send(0, eth0_buf, strlen(eth0_buf));
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 fc80 	bl	8002364 <send>
		memset(eth0_buf, 0, sizeof(eth0_buf));
 8001a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f001 f82e 	bl	8002acc <memset>
 8001a70:	e7dd      	b.n	8001a2e <main+0x10a>
			ret = send(0, eth0_buf, strlen(eth0_buf));
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7fe fbb4 	bl	80001e0 <strlen>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	e7ef      	b.n	8001a5c <main+0x138>
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020400 	.word	0x40020400
 8001a84:	20000364 	.word	0x20000364
 8001a88:	10210000 	.word	0x10210000
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	2000030c 	.word	0x2000030c
 8001a94:	40013000 	.word	0x40013000
 8001a98:	40004400 	.word	0x40004400
 8001a9c:	080039f3 	.word	0x080039f3
 8001aa0:	2000010a 	.word	0x2000010a
 8001aa4:	20000108 	.word	0x20000108
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	08003a12 	.word	0x08003a12
 8001ab0:	08003a2b 	.word	0x08003a2b

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_MspInit+0x3c>)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	9100      	str	r1, [sp, #0]
 8001abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ac6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001aca:	9200      	str	r2, [sp, #0]
 8001acc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	9101      	str	r1, [sp, #4]
 8001ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ae0:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ae4:	f7fe fdac 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae8:	b003      	add	sp, #12
 8001aea:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001af4:	b510      	push	{r4, lr}
 8001af6:	4604      	mov	r4, r0
 8001af8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afa:	2214      	movs	r2, #20
 8001afc:	2100      	movs	r1, #0
 8001afe:	a803      	add	r0, sp, #12
 8001b00:	f000 ffe4 	bl	8002acc <memset>
  if(hspi->Instance==SPI1)
 8001b04:	6822      	ldr	r2, [r4, #0]
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_SPI_MspInit+0x64>)
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d122      	bne.n	8001b52 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b0c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001b10:	2100      	movs	r1, #0
 8001b12:	9101      	str	r1, [sp, #4]
 8001b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	4811      	ldr	r0, [pc, #68]	; (8001b5c <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b1c:	645a      	str	r2, [r3, #68]	; 0x44
 8001b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b24:	9201      	str	r2, [sp, #4]
 8001b26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	9102      	str	r1, [sp, #8]
 8001b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b2c:	f042 0201 	orr.w	r2, r2, #1
 8001b30:	631a      	str	r2, [r3, #48]	; 0x30
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	9302      	str	r3, [sp, #8]
 8001b3a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b3c:	23e0      	movs	r3, #224	; 0xe0
 8001b3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f7fe fdf3 	bl	8000738 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b52:	b008      	add	sp, #32
 8001b54:	bd10      	pop	{r4, pc}
 8001b56:	bf00      	nop
 8001b58:	40013000 	.word	0x40013000
 8001b5c:	40020000 	.word	0x40020000

08001b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b60:	b510      	push	{r4, lr}
 8001b62:	4604      	mov	r4, r0
 8001b64:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b66:	2214      	movs	r2, #20
 8001b68:	2100      	movs	r1, #0
 8001b6a:	a803      	add	r0, sp, #12
 8001b6c:	f000 ffae 	bl	8002acc <memset>
  if(huart->Instance==USART2)
 8001b70:	6822      	ldr	r2, [r4, #0]
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_UART_MspInit+0x78>)
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d12c      	bne.n	8001bd2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b78:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001b7c:	2400      	movs	r4, #0
 8001b7e:	9401      	str	r4, [sp, #4]
 8001b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	4816      	ldr	r0, [pc, #88]	; (8001bdc <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b84:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b8c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b90:	9201      	str	r2, [sp, #4]
 8001b92:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	9402      	str	r4, [sp, #8]
 8001b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b98:	f042 0201 	orr.w	r2, r2, #1
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ba8:	230c      	movs	r3, #12
 8001baa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bba:	2307      	movs	r3, #7
 8001bbc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f7fe fdbb 	bl	8000738 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bc2:	2026      	movs	r0, #38	; 0x26
 8001bc4:	4622      	mov	r2, r4
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	f7fe fd4c 	bl	8000664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bcc:	2026      	movs	r0, #38	; 0x26
 8001bce:	f7fe fd7d 	bl	80006cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bd2:	b008      	add	sp, #32
 8001bd4:	bd10      	pop	{r4, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40004400 	.word	0x40004400
 8001bdc:	40020000 	.word	0x40020000

08001be0 <NMI_Handler>:
 8001be0:	4770      	bx	lr

08001be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	e7fe      	b.n	8001be4 <MemManage_Handler>

08001be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be6:	e7fe      	b.n	8001be6 <BusFault_Handler>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler>

08001bea <SVC_Handler>:
 8001bea:	4770      	bx	lr

08001bec <DebugMon_Handler>:
 8001bec:	4770      	bx	lr

08001bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bee:	4770      	bx	lr

08001bf0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf0:	f7fe bd14 	b.w	800061c <HAL_IncTick>

08001bf4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bf4:	4801      	ldr	r0, [pc, #4]	; (8001bfc <USART2_IRQHandler+0x8>)
 8001bf6:	f7ff bcbd 	b.w	8001574 <HAL_UART_IRQHandler>
 8001bfa:	bf00      	nop
 8001bfc:	20000364 	.word	0x20000364

08001c00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	460e      	mov	r6, r1
 8001c04:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c06:	460c      	mov	r4, r1
 8001c08:	1ba3      	subs	r3, r4, r6
 8001c0a:	429d      	cmp	r5, r3
 8001c0c:	dc01      	bgt.n	8001c12 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001c0e:	4628      	mov	r0, r5
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001c12:	f3af 8000 	nop.w
 8001c16:	f804 0b01 	strb.w	r0, [r4], #1
 8001c1a:	e7f5      	b.n	8001c08 <_read+0x8>

08001c1c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001c1c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <_sbrk+0x2c>)
 8001c20:	6819      	ldr	r1, [r3, #0]
{
 8001c22:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001c24:	b909      	cbnz	r1, 8001c2a <_sbrk+0xe>
		heap_end = &end;
 8001c26:	4909      	ldr	r1, [pc, #36]	; (8001c4c <_sbrk+0x30>)
 8001c28:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8001c2a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001c2c:	4669      	mov	r1, sp
 8001c2e:	4402      	add	r2, r0
 8001c30:	428a      	cmp	r2, r1
 8001c32:	d906      	bls.n	8001c42 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001c34:	f000 ff20 	bl	8002a78 <__errno>
 8001c38:	230c      	movs	r3, #12
 8001c3a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001c42:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001c44:	bd08      	pop	{r3, pc}
 8001c46:	bf00      	nop
 8001c48:	200000d4 	.word	0x200000d4
 8001c4c:	200003a8 	.word	0x200003a8

08001c50 <_close>:

int _close(int file)
{
	return -1;
}
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	4770      	bx	lr

08001c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001c56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c5a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	4770      	bx	lr

08001c60 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001c60:	2001      	movs	r0, #1
 8001c62:	4770      	bx	lr

08001c64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001c64:	2000      	movs	r0, #0
 8001c66:	4770      	bx	lr

08001c68 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c68:	490f      	ldr	r1, [pc, #60]	; (8001ca8 <SystemInit+0x40>)
 8001c6a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <SystemInit+0x44>)
 8001c78:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c7a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001c82:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001c8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c90:	4a07      	ldr	r2, [pc, #28]	; (8001cb0 <SystemInit+0x48>)
 8001c92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c9c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ca2:	608b      	str	r3, [r1, #8]
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	24003010 	.word	0x24003010

08001cb4 <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8001cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 8001cb8:	f04f 0a04 	mov.w	sl, #4
 8001cbc:	f04f 0801 	mov.w	r8, #1
 8001cc0:	fb1a 8500 	smlabb	r5, sl, r0, r8
 8001cc4:	00ed      	lsls	r5, r5, #3
{
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	4604      	mov	r4, r0
   switch(getSn_SR(sn))
 8001cca:	f505 7040 	add.w	r0, r5, #768	; 0x300
{
 8001cce:	460f      	mov	r7, r1
 8001cd0:	4616      	mov	r6, r2
   switch(getSn_SR(sn))
 8001cd2:	f000 f891 	bl	8001df8 <WIZCHIP_READ>
 8001cd6:	2813      	cmp	r0, #19
 8001cd8:	4603      	mov	r3, r0
 8001cda:	d073      	beq.n	8001dc4 <loopback_tcps+0x110>
 8001cdc:	d803      	bhi.n	8001ce6 <loopback_tcps+0x32>
 8001cde:	2800      	cmp	r0, #0
 8001ce0:	d07a      	beq.n	8001dd8 <loopback_tcps+0x124>
#endif
         break;
      default:
         break;
   }
   return 1;
 8001ce2:	2501      	movs	r5, #1
 8001ce4:	e05f      	b.n	8001da6 <loopback_tcps+0xf2>
   switch(getSn_SR(sn))
 8001ce6:	2817      	cmp	r0, #23
 8001ce8:	d00c      	beq.n	8001d04 <loopback_tcps+0x50>
 8001cea:	281c      	cmp	r0, #28
 8001cec:	d1f9      	bne.n	8001ce2 <loopback_tcps+0x2e>
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f000 faf4 	bl	80022dc <disconnect>
 8001cf4:	2801      	cmp	r0, #1
 8001cf6:	4605      	mov	r5, r0
 8001cf8:	d155      	bne.n	8001da6 <loopback_tcps+0xf2>
         printf("%d:Socket Closed\r\n", sn);
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	483b      	ldr	r0, [pc, #236]	; (8001dec <loopback_tcps+0x138>)
 8001cfe:	f000 ff99 	bl	8002c34 <iprintf>
         break;
 8001d02:	e050      	b.n	8001da6 <loopback_tcps+0xf2>
         if(getSn_IR(sn) & Sn_IR_CON)
 8001d04:	f505 7900 	add.w	r9, r5, #512	; 0x200
 8001d08:	4648      	mov	r0, r9
 8001d0a:	f000 f875 	bl	8001df8 <WIZCHIP_READ>
 8001d0e:	07c3      	lsls	r3, r0, #31
 8001d10:	d524      	bpl.n	8001d5c <loopback_tcps+0xa8>
			getSn_DIPR(sn, destip);
 8001d12:	4652      	mov	r2, sl
 8001d14:	a905      	add	r1, sp, #20
 8001d16:	f505 6040 	add.w	r0, r5, #3072	; 0xc00
 8001d1a:	f000 f8c9 	bl	8001eb0 <WIZCHIP_READ_BUF>
			destport = getSn_DPORT(sn);
 8001d1e:	f505 5080 	add.w	r0, r5, #4096	; 0x1000
 8001d22:	f000 f869 	bl	8001df8 <WIZCHIP_READ>
 8001d26:	4606      	mov	r6, r0
 8001d28:	f505 5088 	add.w	r0, r5, #4352	; 0x1100
 8001d2c:	f000 f864 	bl	8001df8 <WIZCHIP_READ>
			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 8001d30:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8001d34:	9101      	str	r1, [sp, #4]
			destport = getSn_DPORT(sn);
 8001d36:	eb00 2006 	add.w	r0, r0, r6, lsl #8
			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 8001d3a:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001d3e:	9100      	str	r1, [sp, #0]
 8001d40:	b280      	uxth	r0, r0
 8001d42:	9002      	str	r0, [sp, #8]
 8001d44:	4621      	mov	r1, r4
 8001d46:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001d4a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001d4e:	4828      	ldr	r0, [pc, #160]	; (8001df0 <loopback_tcps+0x13c>)
 8001d50:	f000 ff70 	bl	8002c34 <iprintf>
			setSn_IR(sn,Sn_IR_CON);
 8001d54:	4641      	mov	r1, r8
 8001d56:	4648      	mov	r0, r9
 8001d58:	f000 f87a 	bl	8001e50 <WIZCHIP_WRITE>
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f000 f940 	bl	8001fe2 <getSn_RX_RSR>
 8001d62:	2800      	cmp	r0, #0
 8001d64:	d0bd      	beq.n	8001ce2 <loopback_tcps+0x2e>
			ret = recv(sn, buf, size);
 8001d66:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8001d6a:	bf28      	it	cs
 8001d6c:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 8001d70:	b282      	uxth	r2, r0
 8001d72:	4639      	mov	r1, r7
 8001d74:	4620      	mov	r0, r4
 8001d76:	f000 fb83 	bl	8002480 <recv>
			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8001d7a:	1e05      	subs	r5, r0, #0
 8001d7c:	dd13      	ble.n	8001da6 <loopback_tcps+0xf2>
			if(buf[0]==0x5a)
 8001d7e:	783b      	ldrb	r3, [r7, #0]
 8001d80:	2b5a      	cmp	r3, #90	; 0x5a
			size = (uint16_t) ret;
 8001d82:	fa1f f885 	uxth.w	r8, r5
			if(buf[0]==0x5a)
 8001d86:	d012      	beq.n	8001dae <loopback_tcps+0xfa>
 8001d88:	2600      	movs	r6, #0
			while(size != sentsize)
 8001d8a:	4546      	cmp	r6, r8
 8001d8c:	d0a9      	beq.n	8001ce2 <loopback_tcps+0x2e>
				ret = send(sn, buf+sentsize, size-sentsize);
 8001d8e:	eba8 0206 	sub.w	r2, r8, r6
 8001d92:	b292      	uxth	r2, r2
 8001d94:	19b9      	adds	r1, r7, r6
 8001d96:	4620      	mov	r0, r4
 8001d98:	f000 fae4 	bl	8002364 <send>
				if(ret < 0)
 8001d9c:	1e05      	subs	r5, r0, #0
 8001d9e:	da0e      	bge.n	8001dbe <loopback_tcps+0x10a>
					close(sn);
 8001da0:	4620      	mov	r0, r4
 8001da2:	f000 f997 	bl	80020d4 <close>
}
 8001da6:	4628      	mov	r0, r5
 8001da8:	b006      	add	sp, #24
 8001daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				buf[0] = 0xa5;
 8001dae:	23a5      	movs	r3, #165	; 0xa5
 8001db0:	703b      	strb	r3, [r7, #0]
				ret = send(sn, buf+sentsize, size-sentsize);
 8001db2:	4642      	mov	r2, r8
 8001db4:	4639      	mov	r1, r7
 8001db6:	4620      	mov	r0, r4
 8001db8:	f000 fad4 	bl	8002364 <send>
 8001dbc:	e791      	b.n	8001ce2 <loopback_tcps+0x2e>
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8001dbe:	442e      	add	r6, r5
 8001dc0:	b2b6      	uxth	r6, r6
 8001dc2:	e7e2      	b.n	8001d8a <loopback_tcps+0xd6>
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 8001dc4:	4632      	mov	r2, r6
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	480a      	ldr	r0, [pc, #40]	; (8001df4 <loopback_tcps+0x140>)
 8001dca:	f000 ff33 	bl	8002c34 <iprintf>
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f000 fa4e 	bl	8002270 <listen>
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	e7e6      	b.n	8001da6 <loopback_tcps+0xf2>
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8001dd8:	4632      	mov	r2, r6
 8001dda:	4641      	mov	r1, r8
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f000 f9b5 	bl	800214c <socket>
 8001de2:	4284      	cmp	r4, r0
 8001de4:	4605      	mov	r5, r0
 8001de6:	d1de      	bne.n	8001da6 <loopback_tcps+0xf2>
 8001de8:	e77b      	b.n	8001ce2 <loopback_tcps+0x2e>
 8001dea:	bf00      	nop
 8001dec:	08003b0c 	.word	0x08003b0c
 8001df0:	08003aea 	.word	0x08003aea
 8001df4:	08003b1f 	.word	0x08003b1f

08001df8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001df8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001dfa:	4c14      	ldr	r4, [pc, #80]	; (8001e4c <WIZCHIP_READ+0x54>)
 8001dfc:	68e3      	ldr	r3, [r4, #12]
{
 8001dfe:	4605      	mov	r5, r0
   WIZCHIP_CRITICAL_ENTER();
 8001e00:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001e02:	6963      	ldr	r3, [r4, #20]
 8001e04:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e08:	0c28      	lsrs	r0, r5, #16
 8001e0a:	0a2e      	lsrs	r6, r5, #8
 8001e0c:	b10b      	cbz	r3, 8001e12 <WIZCHIP_READ+0x1a>
 8001e0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e10:	b993      	cbnz	r3, 8001e38 <WIZCHIP_READ+0x40>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001e12:	6a23      	ldr	r3, [r4, #32]
 8001e14:	b2c0      	uxtb	r0, r0
 8001e16:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001e18:	6a23      	ldr	r3, [r4, #32]
 8001e1a:	b2f0      	uxtb	r0, r6
 8001e1c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001e1e:	6a23      	ldr	r3, [r4, #32]
 8001e20:	b2e8      	uxtb	r0, r5
 8001e22:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001e24:	69e3      	ldr	r3, [r4, #28]
 8001e26:	4798      	blx	r3

   WIZCHIP.CS._deselect();
 8001e28:	69a3      	ldr	r3, [r4, #24]
   ret = WIZCHIP.IF.SPI._read_byte();
 8001e2a:	4605      	mov	r5, r0
   WIZCHIP.CS._deselect();
 8001e2c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001e2e:	6923      	ldr	r3, [r4, #16]
 8001e30:	4798      	blx	r3
   return ret;
}
 8001e32:	4628      	mov	r0, r5
 8001e34:	b002      	add	sp, #8
 8001e36:	bd70      	pop	{r4, r5, r6, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001e38:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001e3c:	f88d 6005 	strb.w	r6, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001e40:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001e44:	2103      	movs	r1, #3
 8001e46:	a801      	add	r0, sp, #4
 8001e48:	4798      	blx	r3
 8001e4a:	e7eb      	b.n	8001e24 <WIZCHIP_READ+0x2c>
 8001e4c:	20000028 	.word	0x20000028

08001e50 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001e52:	4c16      	ldr	r4, [pc, #88]	; (8001eac <WIZCHIP_WRITE+0x5c>)
 8001e54:	68e3      	ldr	r3, [r4, #12]
{
 8001e56:	4605      	mov	r5, r0
 8001e58:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 8001e5a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001e5c:	6963      	ldr	r3, [r4, #20]
 8001e5e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001e60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001e62:	f045 0504 	orr.w	r5, r5, #4
 8001e66:	0c28      	lsrs	r0, r5, #16
 8001e68:	0a2f      	lsrs	r7, r5, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001e6a:	b98b      	cbnz	r3, 8001e90 <WIZCHIP_WRITE+0x40>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001e6c:	6a23      	ldr	r3, [r4, #32]
 8001e6e:	b2c0      	uxtb	r0, r0
 8001e70:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001e72:	6a23      	ldr	r3, [r4, #32]
 8001e74:	b2f8      	uxtb	r0, r7
 8001e76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001e78:	6a23      	ldr	r3, [r4, #32]
 8001e7a:	b2e8      	uxtb	r0, r5
 8001e7c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001e7e:	6a23      	ldr	r3, [r4, #32]
 8001e80:	4630      	mov	r0, r6
 8001e82:	4798      	blx	r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		spi_data[3] = wb;
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
   }

   WIZCHIP.CS._deselect();
 8001e84:	69a3      	ldr	r3, [r4, #24]
 8001e86:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001e88:	6923      	ldr	r3, [r4, #16]
 8001e8a:	4798      	blx	r3
}
 8001e8c:	b003      	add	sp, #12
 8001e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001e90:	2104      	movs	r1, #4
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001e92:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001e96:	f88d 7005 	strb.w	r7, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001e9a:	f88d 5006 	strb.w	r5, [sp, #6]
		spi_data[3] = wb;
 8001e9e:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001ea2:	eb0d 0001 	add.w	r0, sp, r1
 8001ea6:	4798      	blx	r3
 8001ea8:	e7ec      	b.n	8001e84 <WIZCHIP_WRITE+0x34>
 8001eaa:	bf00      	nop
 8001eac:	20000028 	.word	0x20000028

08001eb0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001eb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001eb4:	4c1b      	ldr	r4, [pc, #108]	; (8001f24 <WIZCHIP_READ_BUF+0x74>)
 8001eb6:	68e3      	ldr	r3, [r4, #12]
{
 8001eb8:	4605      	mov	r5, r0
 8001eba:	460f      	mov	r7, r1
 8001ebc:	4616      	mov	r6, r2
   WIZCHIP_CRITICAL_ENTER();
 8001ebe:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001ec0:	6963      	ldr	r3, [r4, #20]
 8001ec2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001ec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ec6:	0c28      	lsrs	r0, r5, #16
 8001ec8:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8001ecc:	b10b      	cbz	r3, 8001ed2 <WIZCHIP_READ_BUF+0x22>
 8001ece:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ed0:	b9d3      	cbnz	r3, 8001f08 <WIZCHIP_READ_BUF+0x58>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001ed2:	6a23      	ldr	r3, [r4, #32]
 8001ed4:	b2c0      	uxtb	r0, r0
 8001ed6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001ed8:	6a23      	ldr	r3, [r4, #32]
 8001eda:	fa5f f088 	uxtb.w	r0, r8
 8001ede:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001ee0:	b2e8      	uxtb	r0, r5
 8001ee2:	6a23      	ldr	r3, [r4, #32]
 8001ee4:	4798      	blx	r3
 8001ee6:	3e01      	subs	r6, #1
 8001ee8:	1e7d      	subs	r5, r7, #1
 8001eea:	443e      	add	r6, r7
		for(i = 0; i < len; i++)
 8001eec:	42b5      	cmp	r5, r6
 8001eee:	d106      	bne.n	8001efe <WIZCHIP_READ_BUF+0x4e>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8001ef0:	69a3      	ldr	r3, [r4, #24]
 8001ef2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001ef4:	6923      	ldr	r3, [r4, #16]
 8001ef6:	4798      	blx	r3
}
 8001ef8:	b002      	add	sp, #8
 8001efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001efe:	69e3      	ldr	r3, [r4, #28]
 8001f00:	4798      	blx	r3
 8001f02:	f805 0f01 	strb.w	r0, [r5, #1]!
 8001f06:	e7f1      	b.n	8001eec <WIZCHIP_READ_BUF+0x3c>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001f08:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001f0c:	f88d 8005 	strb.w	r8, [sp, #5]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001f10:	a801      	add	r0, sp, #4
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001f12:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001f16:	2103      	movs	r1, #3
 8001f18:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f1c:	4631      	mov	r1, r6
 8001f1e:	4638      	mov	r0, r7
 8001f20:	4798      	blx	r3
 8001f22:	e7e5      	b.n	8001ef0 <WIZCHIP_READ_BUF+0x40>
 8001f24:	20000028 	.word	0x20000028

08001f28 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001f28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001f2c:	4c1b      	ldr	r4, [pc, #108]	; (8001f9c <WIZCHIP_WRITE_BUF+0x74>)
 8001f2e:	68e3      	ldr	r3, [r4, #12]
{
 8001f30:	4605      	mov	r5, r0
 8001f32:	460f      	mov	r7, r1
 8001f34:	4616      	mov	r6, r2
   WIZCHIP_CRITICAL_ENTER();
 8001f36:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001f38:	6963      	ldr	r3, [r4, #20]
 8001f3a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001f3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001f3e:	f045 0504 	orr.w	r5, r5, #4
 8001f42:	0c28      	lsrs	r0, r5, #16
 8001f44:	ea4f 2815 	mov.w	r8, r5, lsr #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001f48:	b9d3      	cbnz	r3, 8001f80 <WIZCHIP_WRITE_BUF+0x58>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001f4a:	6a23      	ldr	r3, [r4, #32]
 8001f4c:	b2c0      	uxtb	r0, r0
 8001f4e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001f50:	6a23      	ldr	r3, [r4, #32]
 8001f52:	fa5f f088 	uxtb.w	r0, r8
 8001f56:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001f58:	b2e8      	uxtb	r0, r5
 8001f5a:	6a23      	ldr	r3, [r4, #32]
 8001f5c:	4798      	blx	r3
 8001f5e:	3e01      	subs	r6, #1
 8001f60:	1e7d      	subs	r5, r7, #1
 8001f62:	443e      	add	r6, r7
		for(i = 0; i < len; i++)
 8001f64:	42b5      	cmp	r5, r6
 8001f66:	d106      	bne.n	8001f76 <WIZCHIP_WRITE_BUF+0x4e>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8001f68:	69a3      	ldr	r3, [r4, #24]
 8001f6a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001f6c:	6923      	ldr	r3, [r4, #16]
 8001f6e:	4798      	blx	r3
}
 8001f70:	b002      	add	sp, #8
 8001f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001f76:	6a23      	ldr	r3, [r4, #32]
 8001f78:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001f7c:	4798      	blx	r3
 8001f7e:	e7f1      	b.n	8001f64 <WIZCHIP_WRITE_BUF+0x3c>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001f80:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001f84:	f88d 8005 	strb.w	r8, [sp, #5]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001f88:	a801      	add	r0, sp, #4
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001f8a:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001f8e:	2103      	movs	r1, #3
 8001f90:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001f92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f94:	4631      	mov	r1, r6
 8001f96:	4638      	mov	r0, r7
 8001f98:	4798      	blx	r3
 8001f9a:	e7e5      	b.n	8001f68 <WIZCHIP_WRITE_BUF+0x40>
 8001f9c:	20000028 	.word	0x20000028

08001fa0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001fa2:	0146      	lsls	r6, r0, #5
 8001fa4:	3608      	adds	r6, #8
 8001fa6:	f506 5700 	add.w	r7, r6, #8192	; 0x2000
   uint16_t val=0,val1=0;
 8001faa:	2400      	movs	r4, #0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001fac:	f506 5604 	add.w	r6, r6, #8448	; 0x2100
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001fb0:	4638      	mov	r0, r7
 8001fb2:	f7ff ff21 	bl	8001df8 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001fb6:	0200      	lsls	r0, r0, #8
 8001fb8:	b285      	uxth	r5, r0
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f7ff ff1c 	bl	8001df8 <WIZCHIP_READ>
 8001fc0:	4405      	add	r5, r0
 8001fc2:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 8001fc4:	b14d      	cbz	r5, 8001fda <getSn_TX_FSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001fc6:	4638      	mov	r0, r7
 8001fc8:	f7ff ff16 	bl	8001df8 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001fcc:	0200      	lsls	r0, r0, #8
 8001fce:	b284      	uxth	r4, r0
 8001fd0:	4630      	mov	r0, r6
 8001fd2:	f7ff ff11 	bl	8001df8 <WIZCHIP_READ>
 8001fd6:	4404      	add	r4, r0
 8001fd8:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 8001fda:	42ac      	cmp	r4, r5
 8001fdc:	d1e8      	bne.n	8001fb0 <getSn_TX_FSR+0x10>
   return val;
}
 8001fde:	4620      	mov	r0, r4
 8001fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001fe2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001fe4:	0146      	lsls	r6, r0, #5
 8001fe6:	3608      	adds	r6, #8
 8001fe8:	f506 5718 	add.w	r7, r6, #9728	; 0x2600
   uint16_t val=0,val1=0;
 8001fec:	2400      	movs	r4, #0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001fee:	f506 561c 	add.w	r6, r6, #9984	; 0x2700
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001ff2:	4638      	mov	r0, r7
 8001ff4:	f7ff ff00 	bl	8001df8 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001ff8:	0200      	lsls	r0, r0, #8
 8001ffa:	b285      	uxth	r5, r0
 8001ffc:	4630      	mov	r0, r6
 8001ffe:	f7ff fefb 	bl	8001df8 <WIZCHIP_READ>
 8002002:	4405      	add	r5, r0
 8002004:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 8002006:	b14d      	cbz	r5, 800201c <getSn_RX_RSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002008:	4638      	mov	r0, r7
 800200a:	f7ff fef5 	bl	8001df8 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800200e:	0200      	lsls	r0, r0, #8
 8002010:	b284      	uxth	r4, r0
 8002012:	4630      	mov	r0, r6
 8002014:	f7ff fef0 	bl	8001df8 <WIZCHIP_READ>
 8002018:	4404      	add	r4, r0
 800201a:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 800201c:	42ac      	cmp	r4, r5
 800201e:	d1e8      	bne.n	8001ff2 <getSn_RX_RSR+0x10>
   return val;
}
 8002020:	4620      	mov	r0, r4
 8002022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002024 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002028:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 800202a:	4614      	mov	r4, r2
 800202c:	b322      	cbz	r2, 8002078 <wiz_send_data+0x54>
   ptr = getSn_TX_WR(sn);
 800202e:	0087      	lsls	r7, r0, #2
 8002030:	1c7d      	adds	r5, r7, #1
 8002032:	00ed      	lsls	r5, r5, #3
 8002034:	f505 5810 	add.w	r8, r5, #9216	; 0x2400
 8002038:	4640      	mov	r0, r8
 800203a:	f7ff fedd 	bl	8001df8 <WIZCHIP_READ>
 800203e:	f505 5514 	add.w	r5, r5, #9472	; 0x2500
 8002042:	4606      	mov	r6, r0
 8002044:	4628      	mov	r0, r5
 8002046:	f7ff fed7 	bl	8001df8 <WIZCHIP_READ>
 800204a:	eb00 2606 	add.w	r6, r0, r6, lsl #8
 800204e:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002050:	4622      	mov	r2, r4
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002052:	3702      	adds	r7, #2
 8002054:	0230      	lsls	r0, r6, #8
   
   ptr += len;
 8002056:	4434      	add	r4, r6
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002058:	4649      	mov	r1, r9
 800205a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
   ptr += len;
 800205e:	b2a4      	uxth	r4, r4
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002060:	f7ff ff62 	bl	8001f28 <WIZCHIP_WRITE_BUF>
   setSn_TX_WR(sn,ptr);
 8002064:	0a21      	lsrs	r1, r4, #8
 8002066:	4640      	mov	r0, r8
 8002068:	f7ff fef2 	bl	8001e50 <WIZCHIP_WRITE>
 800206c:	b2e1      	uxtb	r1, r4
 800206e:	4628      	mov	r0, r5
}
 8002070:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_TX_WR(sn,ptr);
 8002074:	f7ff beec 	b.w	8001e50 <WIZCHIP_WRITE>
 8002078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800207c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800207c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002080:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 8002082:	4614      	mov	r4, r2
 8002084:	b322      	cbz	r2, 80020d0 <wiz_recv_data+0x54>
   ptr = getSn_RX_RD(sn);
 8002086:	0087      	lsls	r7, r0, #2
 8002088:	1c7d      	adds	r5, r7, #1
 800208a:	00ed      	lsls	r5, r5, #3
 800208c:	f505 5820 	add.w	r8, r5, #10240	; 0x2800
 8002090:	4640      	mov	r0, r8
 8002092:	f7ff feb1 	bl	8001df8 <WIZCHIP_READ>
 8002096:	f505 5524 	add.w	r5, r5, #10496	; 0x2900
 800209a:	4606      	mov	r6, r0
 800209c:	4628      	mov	r0, r5
 800209e:	f7ff feab 	bl	8001df8 <WIZCHIP_READ>
 80020a2:	eb00 2606 	add.w	r6, r0, r6, lsl #8
 80020a6:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80020a8:	4622      	mov	r2, r4
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80020aa:	3703      	adds	r7, #3
 80020ac:	0230      	lsls	r0, r6, #8
   ptr += len;
 80020ae:	4434      	add	r4, r6
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80020b0:	4649      	mov	r1, r9
 80020b2:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
   ptr += len;
 80020b6:	b2a4      	uxth	r4, r4
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80020b8:	f7ff fefa 	bl	8001eb0 <WIZCHIP_READ_BUF>
   
   setSn_RX_RD(sn,ptr);
 80020bc:	0a21      	lsrs	r1, r4, #8
 80020be:	4640      	mov	r0, r8
 80020c0:	f7ff fec6 	bl	8001e50 <WIZCHIP_WRITE>
 80020c4:	b2e1      	uxtb	r1, r4
 80020c6:	4628      	mov	r0, r5
}
 80020c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_RX_RD(sn,ptr);
 80020cc:	f7ff bec0 	b.w	8001e50 <WIZCHIP_WRITE>
 80020d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080020d4 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 80020d4:	2808      	cmp	r0, #8
{
 80020d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d8:	4605      	mov	r5, r0
	CHECK_SOCKNUM();
 80020da:	d82c      	bhi.n	8002136 <close+0x62>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80020dc:	0144      	lsls	r4, r0, #5
 80020de:	3408      	adds	r4, #8
 80020e0:	f504 7780 	add.w	r7, r4, #256	; 0x100
 80020e4:	2110      	movs	r1, #16
 80020e6:	4638      	mov	r0, r7
 80020e8:	f7ff feb2 	bl	8001e50 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80020ec:	4638      	mov	r0, r7
 80020ee:	f7ff fe83 	bl	8001df8 <WIZCHIP_READ>
 80020f2:	4606      	mov	r6, r0
 80020f4:	2800      	cmp	r0, #0
 80020f6:	d1f9      	bne.n	80020ec <close+0x18>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80020f8:	211f      	movs	r1, #31
 80020fa:	f504 7000 	add.w	r0, r4, #512	; 0x200
 80020fe:	f7ff fea7 	bl	8001e50 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002102:	490e      	ldr	r1, [pc, #56]	; (800213c <close+0x68>)
 8002104:	2301      	movs	r3, #1
 8002106:	40ab      	lsls	r3, r5
 8002108:	880a      	ldrh	r2, [r1, #0]
 800210a:	43db      	mvns	r3, r3
 800210c:	b21b      	sxth	r3, r3
 800210e:	401a      	ands	r2, r3
 8002110:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002112:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <close+0x6c>)
 8002114:	8811      	ldrh	r1, [r2, #0]
 8002116:	400b      	ands	r3, r1
 8002118:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <close+0x70>)
 800211c:	f823 6015 	strh.w	r6, [r3, r5, lsl #1]
	sock_pack_info[sn] = 0;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <close+0x74>)
 8002122:	555e      	strb	r6, [r3, r5]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002124:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8002128:	4620      	mov	r0, r4
 800212a:	f7ff fe65 	bl	8001df8 <WIZCHIP_READ>
 800212e:	2800      	cmp	r0, #0
 8002130:	d1fa      	bne.n	8002128 <close+0x54>
	return SOCK_OK;
 8002132:	2001      	movs	r0, #1
 8002134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKNUM();
 8002136:	f04f 30ff 	mov.w	r0, #4294967295
}
 800213a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800213c:	200000d8 	.word	0x200000d8
 8002140:	200000da 	.word	0x200000da
 8002144:	200000e4 	.word	0x200000e4
 8002148:	200000dc 	.word	0x200000dc

0800214c <socket>:
	CHECK_SOCKNUM();
 800214c:	2808      	cmp	r0, #8
{
 800214e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002152:	4604      	mov	r4, r0
 8002154:	4688      	mov	r8, r1
 8002156:	4617      	mov	r7, r2
 8002158:	461d      	mov	r5, r3
	CHECK_SOCKNUM();
 800215a:	d87b      	bhi.n	8002254 <socket+0x108>
	switch(protocol)
 800215c:	2901      	cmp	r1, #1
 800215e:	d005      	beq.n	800216c <socket+0x20>
 8002160:	d301      	bcc.n	8002166 <socket+0x1a>
 8002162:	2904      	cmp	r1, #4
 8002164:	d910      	bls.n	8002188 <socket+0x3c>
         return SOCKERR_SOCKMODE;
 8002166:	f06f 0004 	mvn.w	r0, #4
 800216a:	e00a      	b.n	8002182 <socket+0x36>
            getSIPR((uint8_t*)&taddr);
 800216c:	2204      	movs	r2, #4
 800216e:	eb0d 0102 	add.w	r1, sp, r2
 8002172:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002176:	f7ff fe9b 	bl	8001eb0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800217a:	9b01      	ldr	r3, [sp, #4]
 800217c:	b923      	cbnz	r3, 8002188 <socket+0x3c>
 800217e:	f06f 0002 	mvn.w	r0, #2
}	   
 8002182:	b002      	add	sp, #8
 8002184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002188:	0768      	lsls	r0, r5, #29
 800218a:	d457      	bmi.n	800223c <socket+0xf0>
	if(flag != 0)
 800218c:	b12d      	cbz	r5, 800219a <socket+0x4e>
   	switch(protocol)
 800218e:	f1b8 0f01 	cmp.w	r8, #1
 8002192:	d050      	beq.n	8002236 <socket+0xea>
 8002194:	f1b8 0f02 	cmp.w	r8, #2
 8002198:	d053      	beq.n	8002242 <socket+0xf6>
	close(sn);
 800219a:	4620      	mov	r0, r4
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800219c:	0166      	lsls	r6, r4, #5
	close(sn);
 800219e:	f7ff ff99 	bl	80020d4 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80021a2:	3608      	adds	r6, #8
 80021a4:	f025 010f 	bic.w	r1, r5, #15
 80021a8:	ea41 0108 	orr.w	r1, r1, r8
 80021ac:	4630      	mov	r0, r6
 80021ae:	f7ff fe4f 	bl	8001e50 <WIZCHIP_WRITE>
	if(!port)
 80021b2:	b96f      	cbnz	r7, 80021d0 <socket+0x84>
	   port = sock_any_port++;
 80021b4:	4a29      	ldr	r2, [pc, #164]	; (800225c <socket+0x110>)
 80021b6:	8817      	ldrh	r7, [r2, #0]
 80021b8:	1c7b      	adds	r3, r7, #1
 80021ba:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80021bc:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80021c0:	428b      	cmp	r3, r1
 80021c2:	bf09      	itett	eq
 80021c4:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
	   port = sock_any_port++;
 80021c8:	8013      	strhne	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80021ca:	8013      	strheq	r3, [r2, #0]
 80021cc:	f64f 77ef 	movweq	r7, #65519	; 0xffef
   setSn_PORT(sn,port);	
 80021d0:	0a39      	lsrs	r1, r7, #8
 80021d2:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 80021d6:	f7ff fe3b 	bl	8001e50 <WIZCHIP_WRITE>
 80021da:	b2f9      	uxtb	r1, r7
 80021dc:	f506 60a0 	add.w	r0, r6, #1280	; 0x500
   setSn_CR(sn,Sn_CR_OPEN);
 80021e0:	f506 7780 	add.w	r7, r6, #256	; 0x100
   setSn_PORT(sn,port);	
 80021e4:	f7ff fe34 	bl	8001e50 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80021e8:	2101      	movs	r1, #1
 80021ea:	4638      	mov	r0, r7
 80021ec:	f7ff fe30 	bl	8001e50 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80021f0:	4638      	mov	r0, r7
 80021f2:	f7ff fe01 	bl	8001df8 <WIZCHIP_READ>
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d1fa      	bne.n	80021f0 <socket+0xa4>
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80021fa:	4919      	ldr	r1, [pc, #100]	; (8002260 <socket+0x114>)
   sock_io_mode &= ~(1 <<sn);
 80021fc:	2201      	movs	r2, #1
 80021fe:	40a2      	lsls	r2, r4
 8002200:	880b      	ldrh	r3, [r1, #0]
 8002202:	43d2      	mvns	r2, r2
 8002204:	b212      	sxth	r2, r2
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002206:	f005 0501 	and.w	r5, r5, #1
   sock_io_mode &= ~(1 <<sn);
 800220a:	4013      	ands	r3, r2
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800220c:	40a5      	lsls	r5, r4
 800220e:	431d      	orrs	r5, r3
   sock_is_sending &= ~(1<<sn);
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <socket+0x118>)
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002212:	800d      	strh	r5, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8002214:	8819      	ldrh	r1, [r3, #0]
 8002216:	400a      	ands	r2, r1
 8002218:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <socket+0x11c>)
 800221c:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <socket+0x120>)
 8002222:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002224:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8002228:	4630      	mov	r0, r6
 800222a:	f7ff fde5 	bl	8001df8 <WIZCHIP_READ>
 800222e:	2800      	cmp	r0, #0
 8002230:	d0fa      	beq.n	8002228 <socket+0xdc>
   return (int8_t)sn;
 8002232:	b260      	sxtb	r0, r4
 8002234:	e7a5      	b.n	8002182 <socket+0x36>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002236:	f015 0f21 	tst.w	r5, #33	; 0x21
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800223a:	d1ae      	bne.n	800219a <socket+0x4e>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800223c:	f06f 0005 	mvn.w	r0, #5
 8002240:	e79f      	b.n	8002182 <socket+0x36>
   	      if(flag & SF_IGMP_VER2)
 8002242:	06a9      	lsls	r1, r5, #26
 8002244:	d501      	bpl.n	800224a <socket+0xfe>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002246:	062a      	lsls	r2, r5, #24
 8002248:	d5f8      	bpl.n	800223c <socket+0xf0>
      	      if(flag & SF_UNI_BLOCK)
 800224a:	06eb      	lsls	r3, r5, #27
 800224c:	d5a5      	bpl.n	800219a <socket+0x4e>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800224e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002252:	e7f2      	b.n	800223a <socket+0xee>
	CHECK_SOCKNUM();
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	e793      	b.n	8002182 <socket+0x36>
 800225a:	bf00      	nop
 800225c:	20000024 	.word	0x20000024
 8002260:	200000d8 	.word	0x200000d8
 8002264:	200000da 	.word	0x200000da
 8002268:	200000e4 	.word	0x200000e4
 800226c:	200000dc 	.word	0x200000dc

08002270 <listen>:

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
 8002270:	2808      	cmp	r0, #8
{
 8002272:	b570      	push	{r4, r5, r6, lr}
 8002274:	4605      	mov	r5, r0
	CHECK_SOCKNUM();
 8002276:	d827      	bhi.n	80022c8 <listen+0x58>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002278:	0144      	lsls	r4, r0, #5
 800227a:	3408      	adds	r4, #8
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff fdbb 	bl	8001df8 <WIZCHIP_READ>
 8002282:	f000 000f 	and.w	r0, r0, #15
 8002286:	2801      	cmp	r0, #1
 8002288:	d121      	bne.n	80022ce <listen+0x5e>
	CHECK_SOCKINIT();
 800228a:	f504 7640 	add.w	r6, r4, #768	; 0x300
 800228e:	4630      	mov	r0, r6
 8002290:	f7ff fdb2 	bl	8001df8 <WIZCHIP_READ>
 8002294:	2813      	cmp	r0, #19
 8002296:	d11d      	bne.n	80022d4 <listen+0x64>
	setSn_CR(sn,Sn_CR_LISTEN);
 8002298:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800229c:	2102      	movs	r1, #2
 800229e:	4620      	mov	r0, r4
 80022a0:	f7ff fdd6 	bl	8001e50 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80022a4:	4620      	mov	r0, r4
 80022a6:	f7ff fda7 	bl	8001df8 <WIZCHIP_READ>
 80022aa:	2800      	cmp	r0, #0
 80022ac:	d1fa      	bne.n	80022a4 <listen+0x34>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80022ae:	4630      	mov	r0, r6
 80022b0:	f7ff fda2 	bl	8001df8 <WIZCHIP_READ>
 80022b4:	2814      	cmp	r0, #20
 80022b6:	d101      	bne.n	80022bc <listen+0x4c>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 80022b8:	2001      	movs	r0, #1
 80022ba:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
 80022bc:	4628      	mov	r0, r5
 80022be:	f7ff ff09 	bl	80020d4 <close>
         return SOCKERR_SOCKCLOSED;
 80022c2:	f06f 0003 	mvn.w	r0, #3
 80022c6:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 80022ce:	f06f 0004 	mvn.w	r0, #4
 80022d2:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKINIT();
 80022d4:	f06f 0002 	mvn.w	r0, #2
}
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080022dc <disconnect>:
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 80022dc:	2808      	cmp	r0, #8
{
 80022de:	b570      	push	{r4, r5, r6, lr}
 80022e0:	4605      	mov	r5, r0
   CHECK_SOCKNUM();
 80022e2:	d835      	bhi.n	8002350 <disconnect+0x74>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80022e4:	0144      	lsls	r4, r0, #5
 80022e6:	3408      	adds	r4, #8
 80022e8:	4620      	mov	r0, r4
 80022ea:	f7ff fd85 	bl	8001df8 <WIZCHIP_READ>
 80022ee:	f000 000f 	and.w	r0, r0, #15
 80022f2:	2801      	cmp	r0, #1
 80022f4:	d12f      	bne.n	8002356 <disconnect+0x7a>
	setSn_CR(sn,Sn_CR_DISCON);
 80022f6:	f504 7680 	add.w	r6, r4, #256	; 0x100
 80022fa:	2108      	movs	r1, #8
 80022fc:	4630      	mov	r0, r6
 80022fe:	f7ff fda7 	bl	8001e50 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002302:	4630      	mov	r0, r6
 8002304:	f7ff fd78 	bl	8001df8 <WIZCHIP_READ>
 8002308:	2800      	cmp	r0, #0
 800230a:	d1fa      	bne.n	8002302 <disconnect+0x26>
	sock_is_sending &= ~(1<<sn);
 800230c:	4913      	ldr	r1, [pc, #76]	; (800235c <disconnect+0x80>)
 800230e:	2301      	movs	r3, #1
 8002310:	fa03 f205 	lsl.w	r2, r3, r5
 8002314:	880b      	ldrh	r3, [r1, #0]
 8002316:	ea23 0302 	bic.w	r3, r3, r2
 800231a:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <disconnect+0x84>)
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	412b      	asrs	r3, r5
 8002322:	07da      	lsls	r2, r3, #31
 8002324:	d419      	bmi.n	800235a <disconnect+0x7e>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002326:	f504 7640 	add.w	r6, r4, #768	; 0x300
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800232a:	f504 7400 	add.w	r4, r4, #512	; 0x200
	while(getSn_SR(sn) != SOCK_CLOSED)
 800232e:	4630      	mov	r0, r6
 8002330:	f7ff fd62 	bl	8001df8 <WIZCHIP_READ>
 8002334:	b908      	cbnz	r0, 800233a <disconnect+0x5e>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
 8002336:	2001      	movs	r0, #1
 8002338:	bd70      	pop	{r4, r5, r6, pc}
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff fd5c 	bl	8001df8 <WIZCHIP_READ>
 8002340:	0703      	lsls	r3, r0, #28
 8002342:	d5f4      	bpl.n	800232e <disconnect+0x52>
	      close(sn);
 8002344:	4628      	mov	r0, r5
 8002346:	f7ff fec5 	bl	80020d4 <close>
	      return SOCKERR_TIMEOUT;
 800234a:	f06f 000c 	mvn.w	r0, #12
 800234e:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKNUM();
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002356:	f06f 0004 	mvn.w	r0, #4
}
 800235a:	bd70      	pop	{r4, r5, r6, pc}
 800235c:	200000da 	.word	0x200000da
 8002360:	200000d8 	.word	0x200000d8

08002364 <send>:
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
 8002364:	2808      	cmp	r0, #8
{
 8002366:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800236a:	4606      	mov	r6, r0
 800236c:	468a      	mov	sl, r1
 800236e:	4614      	mov	r4, r2
   CHECK_SOCKNUM();
 8002370:	d879      	bhi.n	8002466 <send+0x102>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002372:	0145      	lsls	r5, r0, #5
 8002374:	3508      	adds	r5, #8
 8002376:	4628      	mov	r0, r5
 8002378:	f7ff fd3e 	bl	8001df8 <WIZCHIP_READ>
 800237c:	f000 000f 	and.w	r0, r0, #15
 8002380:	2801      	cmp	r0, #1
 8002382:	d173      	bne.n	800246c <send+0x108>
   CHECK_SOCKDATA();
 8002384:	2c00      	cmp	r4, #0
 8002386:	d074      	beq.n	8002472 <send+0x10e>
   tmp = getSn_SR(sn);
 8002388:	f505 7940 	add.w	r9, r5, #768	; 0x300
 800238c:	4648      	mov	r0, r9
 800238e:	f7ff fd33 	bl	8001df8 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002392:	2817      	cmp	r0, #23
 8002394:	d001      	beq.n	800239a <send+0x36>
 8002396:	281c      	cmp	r0, #28
 8002398:	d137      	bne.n	800240a <send+0xa6>
   if( sock_is_sending & (1<<sn) )
 800239a:	4a37      	ldr	r2, [pc, #220]	; (8002478 <send+0x114>)
 800239c:	8813      	ldrh	r3, [r2, #0]
 800239e:	4133      	asrs	r3, r6
 80023a0:	f013 0f01 	tst.w	r3, #1
 80023a4:	4690      	mov	r8, r2
 80023a6:	d013      	beq.n	80023d0 <send+0x6c>
   {
      tmp = getSn_IR(sn);
 80023a8:	f505 7700 	add.w	r7, r5, #512	; 0x200
 80023ac:	4638      	mov	r0, r7
 80023ae:	f7ff fd23 	bl	8001df8 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 80023b2:	06c2      	lsls	r2, r0, #27
 80023b4:	d52c      	bpl.n	8002410 <send+0xac>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80023b6:	2110      	movs	r1, #16
 80023b8:	4638      	mov	r0, r7
 80023ba:	f7ff fd49 	bl	8001e50 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80023be:	2301      	movs	r3, #1
 80023c0:	fa03 f206 	lsl.w	r2, r3, r6
 80023c4:	f8b8 3000 	ldrh.w	r3, [r8]
 80023c8:	ea23 0302 	bic.w	r3, r3, r2
 80023cc:	f8a8 3000 	strh.w	r3, [r8]
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
 80023d0:	f505 50f8 	add.w	r0, r5, #7936	; 0x1f00
 80023d4:	f7ff fd10 	bl	8001df8 <WIZCHIP_READ>
 80023d8:	0280      	lsls	r0, r0, #10
 80023da:	b280      	uxth	r0, r0
 80023dc:	4284      	cmp	r4, r0
 80023de:	f04f 0701 	mov.w	r7, #1
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <send+0x118>)
 80023e4:	bf28      	it	cs
 80023e6:	4604      	movcs	r4, r0
 80023e8:	40b7      	lsls	r7, r6
      freesize = getSn_TX_FSR(sn);
 80023ea:	4630      	mov	r0, r6
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	f7ff fdd7 	bl	8001fa0 <getSn_TX_FSR>
 80023f2:	4683      	mov	fp, r0
      tmp = getSn_SR(sn);
 80023f4:	4648      	mov	r0, r9
 80023f6:	f7ff fcff 	bl	8001df8 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80023fa:	2817      	cmp	r0, #23
 80023fc:	9b01      	ldr	r3, [sp, #4]
 80023fe:	d013      	beq.n	8002428 <send+0xc4>
 8002400:	281c      	cmp	r0, #28
 8002402:	d011      	beq.n	8002428 <send+0xc4>
         close(sn);
 8002404:	4630      	mov	r0, r6
 8002406:	f7ff fe65 	bl	80020d4 <close>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800240a:	f06f 0006 	mvn.w	r0, #6
 800240e:	e002      	b.n	8002416 <send+0xb2>
      else if(tmp & Sn_IR_TIMEOUT)
 8002410:	0703      	lsls	r3, r0, #28
 8002412:	d403      	bmi.n	800241c <send+0xb8>
      else return SOCK_BUSY;
 8002414:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 8002416:	b003      	add	sp, #12
 8002418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         close(sn);
 800241c:	4630      	mov	r0, r6
 800241e:	f7ff fe59 	bl	80020d4 <close>
         return SOCKERR_TIMEOUT;
 8002422:	f06f 000c 	mvn.w	r0, #12
 8002426:	e7f6      	b.n	8002416 <send+0xb2>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002428:	881a      	ldrh	r2, [r3, #0]
 800242a:	423a      	tst	r2, r7
 800242c:	d018      	beq.n	8002460 <send+0xfc>
 800242e:	45a3      	cmp	fp, r4
 8002430:	d3f0      	bcc.n	8002414 <send+0xb0>
   wiz_send_data(sn, buf, len);
 8002432:	4651      	mov	r1, sl
 8002434:	4630      	mov	r0, r6
 8002436:	4622      	mov	r2, r4
   setSn_CR(sn,Sn_CR_SEND);
 8002438:	f505 7580 	add.w	r5, r5, #256	; 0x100
   wiz_send_data(sn, buf, len);
 800243c:	f7ff fdf2 	bl	8002024 <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
 8002440:	2120      	movs	r1, #32
 8002442:	4628      	mov	r0, r5
 8002444:	f7ff fd04 	bl	8001e50 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002448:	4628      	mov	r0, r5
 800244a:	f7ff fcd5 	bl	8001df8 <WIZCHIP_READ>
 800244e:	2800      	cmp	r0, #0
 8002450:	d1fa      	bne.n	8002448 <send+0xe4>
   sock_is_sending |= (1 << sn);
 8002452:	f8b8 3000 	ldrh.w	r3, [r8]
 8002456:	431f      	orrs	r7, r3
 8002458:	f8a8 7000 	strh.w	r7, [r8]
   return (int32_t)len;
 800245c:	4620      	mov	r0, r4
 800245e:	e7da      	b.n	8002416 <send+0xb2>
      if(len <= freesize) break;
 8002460:	45a3      	cmp	fp, r4
 8002462:	d3c2      	bcc.n	80023ea <send+0x86>
 8002464:	e7e5      	b.n	8002432 <send+0xce>
   CHECK_SOCKNUM();
 8002466:	f04f 30ff 	mov.w	r0, #4294967295
 800246a:	e7d4      	b.n	8002416 <send+0xb2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800246c:	f06f 0004 	mvn.w	r0, #4
 8002470:	e7d1      	b.n	8002416 <send+0xb2>
   CHECK_SOCKDATA();
 8002472:	f06f 000d 	mvn.w	r0, #13
 8002476:	e7ce      	b.n	8002416 <send+0xb2>
 8002478:	200000da 	.word	0x200000da
 800247c:	200000d8 	.word	0x200000d8

08002480 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002484:	2808      	cmp	r0, #8
{
 8002486:	4680      	mov	r8, r0
 8002488:	9100      	str	r1, [sp, #0]
 800248a:	4617      	mov	r7, r2
   CHECK_SOCKNUM();
 800248c:	d85c      	bhi.n	8002548 <recv+0xc8>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800248e:	0144      	lsls	r4, r0, #5
 8002490:	3408      	adds	r4, #8
 8002492:	4620      	mov	r0, r4
 8002494:	f7ff fcb0 	bl	8001df8 <WIZCHIP_READ>
 8002498:	f000 060f 	and.w	r6, r0, #15
 800249c:	2e01      	cmp	r6, #1
 800249e:	d156      	bne.n	800254e <recv+0xce>
   CHECK_SOCKDATA();
 80024a0:	2f00      	cmp	r7, #0
 80024a2:	d057      	beq.n	8002554 <recv+0xd4>
   
   recvsize = getSn_RxMAX(sn);
 80024a4:	f504 50f0 	add.w	r0, r4, #7680	; 0x1e00
 80024a8:	f7ff fca6 	bl	8001df8 <WIZCHIP_READ>
 80024ac:	fa06 f608 	lsl.w	r6, r6, r8
 80024b0:	4683      	mov	fp, r0
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
         tmp = getSn_SR(sn);
 80024b2:	f504 7940 	add.w	r9, r4, #768	; 0x300
         if (tmp != SOCK_ESTABLISHED)
         {
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80024b6:	f504 5af8 	add.w	sl, r4, #7936	; 0x1f00
         recvsize = getSn_RX_RSR(sn);
 80024ba:	4640      	mov	r0, r8
 80024bc:	f7ff fd91 	bl	8001fe2 <getSn_RX_RSR>
 80024c0:	4605      	mov	r5, r0
         tmp = getSn_SR(sn);
 80024c2:	4648      	mov	r0, r9
 80024c4:	f7ff fc98 	bl	8001df8 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
 80024c8:	2817      	cmp	r0, #23
 80024ca:	d032      	beq.n	8002532 <recv+0xb2>
            if(tmp == SOCK_CLOSE_WAIT)
 80024cc:	281c      	cmp	r0, #28
 80024ce:	d128      	bne.n	8002522 <recv+0xa2>
               if(recvsize != 0) break;
 80024d0:	b1e5      	cbz	r5, 800250c <recv+0x8c>
   recvsize = getSn_RxMAX(sn);
 80024d2:	ea4f 208b 	mov.w	r0, fp, lsl #10
 80024d6:	b280      	uxth	r0, r0
 80024d8:	4287      	cmp	r7, r0
 80024da:	bf28      	it	cs
 80024dc:	4607      	movcs	r7, r0
 80024de:	42bd      	cmp	r5, r7
 80024e0:	4628      	mov	r0, r5
 80024e2:	bf28      	it	cs
 80024e4:	4638      	movcs	r0, r7
 80024e6:	b287      	uxth	r7, r0
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
   wiz_recv_data(sn, buf, len);
 80024e8:	9900      	ldr	r1, [sp, #0]
 80024ea:	4640      	mov	r0, r8
 80024ec:	463a      	mov	r2, r7
   setSn_CR(sn,Sn_CR_RECV);
 80024ee:	f504 7480 	add.w	r4, r4, #256	; 0x100
   wiz_recv_data(sn, buf, len);
 80024f2:	f7ff fdc3 	bl	800207c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80024f6:	2140      	movs	r1, #64	; 0x40
 80024f8:	4620      	mov	r0, r4
 80024fa:	f7ff fca9 	bl	8001e50 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80024fe:	4620      	mov	r0, r4
 8002500:	f7ff fc7a 	bl	8001df8 <WIZCHIP_READ>
 8002504:	2800      	cmp	r0, #0
 8002506:	d1fa      	bne.n	80024fe <recv+0x7e>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002508:	4638      	mov	r0, r7
 800250a:	e00f      	b.n	800252c <recv+0xac>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800250c:	4640      	mov	r0, r8
 800250e:	f7ff fd47 	bl	8001fa0 <getSn_TX_FSR>
 8002512:	9001      	str	r0, [sp, #4]
 8002514:	4650      	mov	r0, sl
 8002516:	f7ff fc6f 	bl	8001df8 <WIZCHIP_READ>
 800251a:	9901      	ldr	r1, [sp, #4]
 800251c:	ebb1 2f80 	cmp.w	r1, r0, lsl #10
 8002520:	d107      	bne.n	8002532 <recv+0xb2>
                  close(sn);
 8002522:	4640      	mov	r0, r8
 8002524:	f7ff fdd6 	bl	80020d4 <close>
                  return SOCKERR_SOCKSTATUS;
 8002528:	f06f 0006 	mvn.w	r0, #6
}
 800252c:	b003      	add	sp, #12
 800252e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <recv+0xdc>)
 8002534:	8819      	ldrh	r1, [r3, #0]
 8002536:	4231      	tst	r1, r6
 8002538:	d003      	beq.n	8002542 <recv+0xc2>
 800253a:	2d00      	cmp	r5, #0
 800253c:	d1c9      	bne.n	80024d2 <recv+0x52>
 800253e:	4628      	mov	r0, r5
 8002540:	e7f4      	b.n	800252c <recv+0xac>
         if(recvsize != 0) break;
 8002542:	2d00      	cmp	r5, #0
 8002544:	d0b9      	beq.n	80024ba <recv+0x3a>
 8002546:	e7c4      	b.n	80024d2 <recv+0x52>
   CHECK_SOCKNUM();
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
 800254c:	e7ee      	b.n	800252c <recv+0xac>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800254e:	f06f 0004 	mvn.w	r0, #4
 8002552:	e7eb      	b.n	800252c <recv+0xac>
   CHECK_SOCKDATA();
 8002554:	f06f 000d 	mvn.w	r0, #13
 8002558:	e7e8      	b.n	800252c <recv+0xac>
 800255a:	bf00      	nop
 800255c:	200000d8 	.word	0x200000d8

08002560 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002560:	4770      	bx	lr

08002562 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002562:	7800      	ldrb	r0, [r0, #0]
 8002564:	4770      	bx	lr

08002566 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002566:	7001      	strb	r1, [r0, #0]
 8002568:	4770      	bx	lr

0800256a <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800256a:	2000      	movs	r0, #0
 800256c:	4770      	bx	lr

0800256e <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800256e:	4770      	bx	lr

08002570 <wizchip_cris_enter>:
 8002570:	4770      	bx	lr

08002572 <wizchip_cris_exit>:
 8002572:	4770      	bx	lr

08002574 <wizchip_cs_select>:
 8002574:	4770      	bx	lr
	...

08002578 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <reg_wizchip_cs_cbfunc+0x18>)
   if(!cs_sel || !cs_desel)
 800257a:	b100      	cbz	r0, 800257e <reg_wizchip_cs_cbfunc+0x6>
 800257c:	b921      	cbnz	r1, 8002588 <reg_wizchip_cs_cbfunc+0x10>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <reg_wizchip_cs_cbfunc+0x1c>)
 8002580:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002582:	4a05      	ldr	r2, [pc, #20]	; (8002598 <reg_wizchip_cs_cbfunc+0x20>)
 8002584:	619a      	str	r2, [r3, #24]
 8002586:	4770      	bx	lr
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002588:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800258a:	6199      	str	r1, [r3, #24]
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000028 	.word	0x20000028
 8002594:	08002575 	.word	0x08002575
 8002598:	08002561 	.word	0x08002561

0800259c <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <reg_wizchip_spi_cbfunc+0x24>)
{
 800259e:	b510      	push	{r4, lr}
 80025a0:	881c      	ldrh	r4, [r3, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80025a2:	05a4      	lsls	r4, r4, #22
 80025a4:	461a      	mov	r2, r3
 80025a6:	d400      	bmi.n	80025aa <reg_wizchip_spi_cbfunc+0xe>
 80025a8:	e7fe      	b.n	80025a8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80025aa:	b100      	cbz	r0, 80025ae <reg_wizchip_spi_cbfunc+0x12>
 80025ac:	b921      	cbnz	r1, 80025b8 <reg_wizchip_spi_cbfunc+0x1c>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <reg_wizchip_spi_cbfunc+0x28>)
 80025b0:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <reg_wizchip_spi_cbfunc+0x2c>)
 80025b4:	6213      	str	r3, [r2, #32]
 80025b6:	bd10      	pop	{r4, pc}
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80025b8:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80025ba:	6219      	str	r1, [r3, #32]
 80025bc:	bd10      	pop	{r4, pc}
 80025be:	bf00      	nop
 80025c0:	20000028 	.word	0x20000028
 80025c4:	0800256b 	.word	0x0800256b
 80025c8:	0800256f 	.word	0x0800256f

080025cc <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80025cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80025ce:	2206      	movs	r2, #6
 80025d0:	a904      	add	r1, sp, #16
 80025d2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80025d6:	f7ff fc6b 	bl	8001eb0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80025da:	2204      	movs	r2, #4
 80025dc:	eb0d 0102 	add.w	r1, sp, r2
 80025e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025e4:	f7ff fc64 	bl	8001eb0 <WIZCHIP_READ_BUF>
 80025e8:	a902      	add	r1, sp, #8
 80025ea:	2204      	movs	r2, #4
 80025ec:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80025f0:	f7ff fc5e 	bl	8001eb0 <WIZCHIP_READ_BUF>
 80025f4:	2204      	movs	r2, #4
 80025f6:	a903      	add	r1, sp, #12
 80025f8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80025fc:	f7ff fc58 	bl	8001eb0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	2000      	movs	r0, #0
 8002604:	f7ff fc24 	bl	8001e50 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002608:	2000      	movs	r0, #0
 800260a:	f7ff fbf5 	bl	8001df8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800260e:	a904      	add	r1, sp, #16
 8002610:	2206      	movs	r2, #6
 8002612:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002616:	f7ff fc87 	bl	8001f28 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800261a:	2204      	movs	r2, #4
 800261c:	eb0d 0102 	add.w	r1, sp, r2
 8002620:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002624:	f7ff fc80 	bl	8001f28 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002628:	a902      	add	r1, sp, #8
 800262a:	2204      	movs	r2, #4
 800262c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002630:	f7ff fc7a 	bl	8001f28 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002634:	2204      	movs	r2, #4
 8002636:	a903      	add	r1, sp, #12
 8002638:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800263c:	f7ff fc74 	bl	8001f28 <WIZCHIP_WRITE_BUF>
}
 8002640:	b007      	add	sp, #28
 8002642:	f85d fb04 	ldr.w	pc, [sp], #4

08002646 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002648:	4605      	mov	r5, r0
 800264a:	460c      	mov	r4, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 800264c:	f7ff ffbe 	bl	80025cc <wizchip_sw_reset>
   if(txsize)
 8002650:	b915      	cbnz	r5, 8002658 <wizchip_init+0x12>
		}

	#endif
   }

   if(rxsize)
 8002652:	b9ec      	cbnz	r4, 8002690 <wizchip_init+0x4a>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8002654:	2000      	movs	r0, #0
 8002656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002658:	1e6e      	subs	r6, r5, #1
   if(txsize)
 800265a:	4632      	mov	r2, r6
 800265c:	3507      	adds	r5, #7
 800265e:	2300      	movs	r3, #0
			tmp += txsize[i];
 8002660:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002664:	440b      	add	r3, r1
 8002666:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 8002668:	2b10      	cmp	r3, #16
 800266a:	dd02      	ble.n	8002672 <wizchip_init+0x2c>
 800266c:	f04f 30ff 	mov.w	r0, #4294967295
 8002670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002672:	42aa      	cmp	r2, r5
 8002674:	d1f4      	bne.n	8002660 <wizchip_init+0x1a>
 8002676:	f641 7508 	movw	r5, #7944	; 0x1f08
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800267a:	f242 0708 	movw	r7, #8200	; 0x2008
			setSn_TXBUF_SIZE(i, txsize[i]);
 800267e:	4628      	mov	r0, r5
 8002680:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002684:	3520      	adds	r5, #32
 8002686:	f7ff fbe3 	bl	8001e50 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800268a:	42bd      	cmp	r5, r7
 800268c:	d1f7      	bne.n	800267e <wizchip_init+0x38>
 800268e:	e7e0      	b.n	8002652 <wizchip_init+0xc>
 8002690:	1e65      	subs	r5, r4, #1
   if(rxsize)
 8002692:	462a      	mov	r2, r5
 8002694:	3407      	adds	r4, #7
 8002696:	2300      	movs	r3, #0
			tmp += rxsize[i];
 8002698:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800269c:	440b      	add	r3, r1
 800269e:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	dce3      	bgt.n	800266c <wizchip_init+0x26>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80026a4:	4294      	cmp	r4, r2
 80026a6:	d1f7      	bne.n	8002698 <wizchip_init+0x52>
 80026a8:	f641 6408 	movw	r4, #7688	; 0x1e08
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80026ac:	f641 7608 	movw	r6, #7944	; 0x1f08
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80026b0:	4620      	mov	r0, r4
 80026b2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80026b6:	3420      	adds	r4, #32
 80026b8:	f7ff fbca 	bl	8001e50 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80026bc:	42b4      	cmp	r4, r6
 80026be:	d1f7      	bne.n	80026b0 <wizchip_init+0x6a>
 80026c0:	e7c8      	b.n	8002654 <wizchip_init+0xe>

080026c2 <wizchip_clrinterrupt>:
}

void wizchip_clrinterrupt(intr_kind intr)
{
 80026c2:	b510      	push	{r4, lr}
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80026c4:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
{
 80026c8:	4604      	mov	r4, r0
   setIR(ir);
 80026ca:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80026ce:	f7ff fbbf 	bl	8001e50 <WIZCHIP_WRITE>
   setSIR(sir);
 80026d2:	0a21      	lsrs	r1, r4, #8
 80026d4:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
#endif   
}
 80026d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setSIR(sir);
 80026dc:	f7ff bbb8 	b.w	8001e50 <WIZCHIP_WRITE>

080026e0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80026e0:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80026e2:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80026e6:	f7ff fb87 	bl	8001df8 <WIZCHIP_READ>
 80026ea:	4604      	mov	r4, r0
   sir = getSIR();
 80026ec:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80026f0:	f7ff fb82 	bl	8001df8 <WIZCHIP_READ>
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
  ret = (ret << 8) + ir;
 80026f4:	0200      	lsls	r0, r0, #8
 80026f6:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 80026fa:	b280      	uxth	r0, r0
 80026fc:	4420      	add	r0, r4
  return (intr_kind)ret;
 80026fe:	b280      	uxth	r0, r0
}
 8002700:	bd10      	pop	{r4, pc}

08002702 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002702:	b510      	push	{r4, lr}
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002704:	b2c1      	uxtb	r1, r0
{
 8002706:	4604      	mov	r4, r0
   setIMR(imr);
 8002708:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800270c:	f7ff fba0 	bl	8001e50 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002710:	0a21      	lsrs	r1, r4, #8
 8002712:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
#endif   
}
 8002716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setSIMR(simr);
 800271a:	f7ff bb99 	b.w	8001e50 <WIZCHIP_WRITE>

0800271e <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800271e:	b510      	push	{r4, lr}
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8002720:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002724:	f7ff fb68 	bl	8001df8 <WIZCHIP_READ>
 8002728:	4604      	mov	r4, r0
   simr = getSIMR();
 800272a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800272e:	f7ff fb63 	bl	8001df8 <WIZCHIP_READ>
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
  ret = (ret << 8) + imr;
 8002732:	eb04 2000 	add.w	r0, r4, r0, lsl #8
  return (intr_kind)ret;
}
 8002736:	b280      	uxth	r0, r0
 8002738:	bd10      	pop	{r4, pc}

0800273a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800273a:	b508      	push	{r3, lr}
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 800273c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002740:	f7ff fb5a 	bl	8001df8 <WIZCHIP_READ>

#else
   tmp = -1;
#endif
   return tmp;
}
 8002744:	f000 0001 	and.w	r0, r0, #1
 8002748:	bd08      	pop	{r3, pc}

0800274a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800274a:	b508      	push	{r3, lr}
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 800274c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002750:	f7ff fb52 	bl	8001df8 <WIZCHIP_READ>
 8002754:	f000 0038 	and.w	r0, r0, #56	; 0x38
         tmp = PHY_POWER_NORM;
   #else
      tmp = -1;
   #endif
   return tmp;
}
 8002758:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800275c:	4258      	negs	r0, r3
 800275e:	4158      	adcs	r0, r3
 8002760:	bd08      	pop	{r3, pc}

08002762 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8002762:	b508      	push	{r3, lr}
   uint8_t tmp = getPHYCFGR();
 8002764:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002768:	f7ff fb46 	bl	8001df8 <WIZCHIP_READ>
   tmp &= PHYCFGR_RST;
   setPHYCFGR(tmp);
 800276c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8002770:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002774:	f7ff fb6c 	bl	8001e50 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002778:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800277c:	f7ff fb3c 	bl	8001df8 <WIZCHIP_READ>
   tmp |= ~PHYCFGR_RST;
 8002780:	f060 017f 	orn	r1, r0, #127	; 0x7f
   setPHYCFGR(tmp);
 8002784:	b2c9      	uxtb	r1, r1
 8002786:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
}
 800278a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   setPHYCFGR(tmp);
 800278e:	f7ff bb5f 	b.w	8001e50 <WIZCHIP_WRITE>

08002792 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002792:	b508      	push	{r3, lr}
   uint8_t tmp = 0;
   if(phyconf->by == PHY_CONFBY_SW)
 8002794:	7803      	ldrb	r3, [r0, #0]
 8002796:	2b01      	cmp	r3, #1
      tmp |= PHYCFGR_OPMD;
   else
      tmp &= ~PHYCFGR_OPMD;
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002798:	7843      	ldrb	r3, [r0, #1]
      tmp &= ~PHYCFGR_OPMD;
 800279a:	bf0c      	ite	eq
 800279c:	2140      	moveq	r1, #64	; 0x40
 800279e:	2100      	movne	r1, #0
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d109      	bne.n	80027b8 <wizphy_setphyconf+0x26>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80027a4:	f041 0138 	orr.w	r1, r1, #56	; 0x38
            tmp |= PHYCFGR_OPMDC_100H;
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80027a8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80027ac:	f7ff fb50 	bl	8001e50 <WIZCHIP_WRITE>
   wizphy_reset();
}
 80027b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   wizphy_reset();
 80027b4:	f7ff bfd5 	b.w	8002762 <wizphy_reset>
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80027b8:	78c3      	ldrb	r3, [r0, #3]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	7883      	ldrb	r3, [r0, #2]
 80027be:	d106      	bne.n	80027ce <wizphy_setphyconf+0x3c>
         if(phyconf->speed == PHY_SPEED_100)
 80027c0:	2b01      	cmp	r3, #1
            tmp |= PHYCFGR_OPMDC_100F;
 80027c2:	bf0c      	ite	eq
 80027c4:	f041 0118 	orreq.w	r1, r1, #24
            tmp |= PHYCFGR_OPMDC_10F;
 80027c8:	f041 0108 	orrne.w	r1, r1, #8
 80027cc:	e7ec      	b.n	80027a8 <wizphy_setphyconf+0x16>
         if(phyconf->speed == PHY_SPEED_100)
 80027ce:	2b01      	cmp	r3, #1
            tmp |= PHYCFGR_OPMDC_100H;
 80027d0:	bf08      	it	eq
 80027d2:	f041 0110 	orreq.w	r1, r1, #16
 80027d6:	e7e7      	b.n	80027a8 <wizphy_setphyconf+0x16>

080027d8 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80027d8:	b510      	push	{r4, lr}
 80027da:	4604      	mov	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
 80027dc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80027e0:	f7ff fb0a 	bl	8001df8 <WIZCHIP_READ>
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80027e4:	f3c0 1380 	ubfx	r3, r0, #6, #1
 80027e8:	f000 0038 	and.w	r0, r0, #56	; 0x38
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80027ec:	2820      	cmp	r0, #32
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80027ee:	7023      	strb	r3, [r4, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80027f0:	d001      	beq.n	80027f6 <wizphy_getphyconf+0x1e>
 80027f2:	2838      	cmp	r0, #56	; 0x38
 80027f4:	d11d      	bne.n	8002832 <wizphy_getphyconf+0x5a>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80027f6:	2301      	movs	r3, #1
         break;
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80027f8:	7063      	strb	r3, [r4, #1]
 80027fa:	f1a0 0310 	sub.w	r3, r0, #16
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b10      	cmp	r3, #16
 8002802:	d818      	bhi.n	8002836 <wizphy_getphyconf+0x5e>
 8002804:	2201      	movs	r2, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800280e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002812:	b183      	cbz	r3, 8002836 <wizphy_getphyconf+0x5e>
   switch(tmp & PHYCFGR_OPMDC_ALLA)
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002814:	70a2      	strb	r2, [r4, #2]
 8002816:	3808      	subs	r0, #8
 8002818:	b2c0      	uxtb	r0, r0
 800281a:	2818      	cmp	r0, #24
 800281c:	d80e      	bhi.n	800283c <wizphy_getphyconf+0x64>
 800281e:	2301      	movs	r3, #1
 8002820:	fa03 f000 	lsl.w	r0, r3, r0
 8002824:	f000 3001 	and.w	r0, r0, #16843009	; 0x1010101
 8002828:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800282c:	b130      	cbz	r0, 800283c <wizphy_getphyconf+0x64>
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
         break;
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800282e:	70e3      	strb	r3, [r4, #3]
 8002830:	bd10      	pop	{r4, pc}
         phyconf->mode = PHY_MODE_MANUAL;
 8002832:	2300      	movs	r3, #0
 8002834:	e7e0      	b.n	80027f8 <wizphy_getphyconf+0x20>
         phyconf->speed = PHY_SPEED_10;
 8002836:	2300      	movs	r3, #0
 8002838:	70a3      	strb	r3, [r4, #2]
         break;
 800283a:	e7ec      	b.n	8002816 <wizphy_getphyconf+0x3e>
         phyconf->duplex = PHY_DUPLEX_HALF;
 800283c:	2300      	movs	r3, #0
 800283e:	e7f6      	b.n	800282e <wizphy_getphyconf+0x56>

08002840 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002840:	b510      	push	{r4, lr}
 8002842:	4604      	mov	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
 8002844:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002848:	f7ff fad6 	bl	8001df8 <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800284c:	0643      	lsls	r3, r0, #25
 800284e:	d516      	bpl.n	800287e <wizphy_setphypmode+0x3e>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8002850:	f000 01c7 	and.w	r1, r0, #199	; 0xc7
   if( pmode == PHY_POWER_DOWN)
 8002854:	2c01      	cmp	r4, #1
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002856:	bf0c      	ite	eq
 8002858:	f041 0130 	orreq.w	r1, r1, #48	; 0x30
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800285c:	f041 0138 	orrne.w	r1, r1, #56	; 0x38
   setPHYCFGR(tmp);
 8002860:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002864:	f7ff faf4 	bl	8001e50 <WIZCHIP_WRITE>
   wizphy_reset();
 8002868:	f7ff ff7b 	bl	8002762 <wizphy_reset>
   tmp = getPHYCFGR();
 800286c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002870:	f7ff fac2 	bl	8001df8 <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
 8002874:	2c01      	cmp	r4, #1
 8002876:	d105      	bne.n	8002884 <wizphy_setphypmode+0x44>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8002878:	f010 0f30 	tst.w	r0, #48	; 0x30
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800287c:	d105      	bne.n	800288a <wizphy_setphypmode+0x4a>
   }
   return -1;
 800287e:	f04f 30ff 	mov.w	r0, #4294967295
 8002882:	bd10      	pop	{r4, pc}
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002884:	f010 0f38 	tst.w	r0, #56	; 0x38
 8002888:	e7f8      	b.n	800287c <wizphy_setphypmode+0x3c>
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800288a:	2000      	movs	r0, #0
}
 800288c:	bd10      	pop	{r4, pc}
	...

08002890 <ctlwizchip>:
{
 8002890:	b538      	push	{r3, r4, r5, lr}
 8002892:	460c      	mov	r4, r1
   switch(cwtype)
 8002894:	280f      	cmp	r0, #15
 8002896:	d864      	bhi.n	8002962 <ctlwizchip+0xd2>
 8002898:	e8df f000 	tbb	[pc, r0]
 800289c:	14180c08 	.word	0x14180c08
 80028a0:	2f23201c 	.word	0x2f23201c
 80028a4:	504c493b 	.word	0x504c493b
 80028a8:	6059540a 	.word	0x6059540a
         wizchip_sw_reset();
 80028ac:	f7ff fe8e 	bl	80025cc <wizchip_sw_reset>
   return 0;
 80028b0:	2000      	movs	r0, #0
         break;         
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
         if(arg != 0) 
 80028b4:	b129      	cbz	r1, 80028c2 <ctlwizchip+0x32>
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80028b6:	3108      	adds	r1, #8
         return wizchip_init(ptmp[0], ptmp[1]);
 80028b8:	4620      	mov	r0, r4
}
 80028ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         return wizchip_init(ptmp[0], ptmp[1]);
 80028be:	f7ff bec2 	b.w	8002646 <wizchip_init>
 80028c2:	e7f9      	b.n	80028b8 <ctlwizchip+0x28>
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80028c4:	8808      	ldrh	r0, [r1, #0]
 80028c6:	f7ff fefc 	bl	80026c2 <wizchip_clrinterrupt>
 80028ca:	e7f1      	b.n	80028b0 <ctlwizchip+0x20>
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80028cc:	f7ff ff08 	bl	80026e0 <wizchip_getinterrupt>
         *(uint16_t*)arg = getINTLEVEL();
 80028d0:	8020      	strh	r0, [r4, #0]
 80028d2:	e7ed      	b.n	80028b0 <ctlwizchip+0x20>
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80028d4:	8808      	ldrh	r0, [r1, #0]
 80028d6:	f7ff ff14 	bl	8002702 <wizchip_setinterruptmask>
 80028da:	e7e9      	b.n	80028b0 <ctlwizchip+0x20>
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80028dc:	f7ff ff1f 	bl	800271e <wizchip_getinterruptmask>
 80028e0:	e7f6      	b.n	80028d0 <ctlwizchip+0x40>
         setINTLEVEL(*(uint16_t*)arg);
 80028e2:	8809      	ldrh	r1, [r1, #0]
 80028e4:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80028e8:	0a09      	lsrs	r1, r1, #8
 80028ea:	f7ff fab1 	bl	8001e50 <WIZCHIP_WRITE>
 80028ee:	7821      	ldrb	r1, [r4, #0]
 80028f0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80028f4:	f7ff faac 	bl	8001e50 <WIZCHIP_WRITE>
 80028f8:	e7da      	b.n	80028b0 <ctlwizchip+0x20>
         *(uint16_t*)arg = getINTLEVEL();
 80028fa:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80028fe:	f7ff fa7b 	bl	8001df8 <WIZCHIP_READ>
 8002902:	4605      	mov	r5, r0
 8002904:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002908:	f7ff fa76 	bl	8001df8 <WIZCHIP_READ>
 800290c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8002910:	e7de      	b.n	80028d0 <ctlwizchip+0x40>
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <ctlwizchip+0xd8>)
 8002914:	789a      	ldrb	r2, [r3, #2]
 8002916:	700a      	strb	r2, [r1, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002918:	78da      	ldrb	r2, [r3, #3]
 800291a:	704a      	strb	r2, [r1, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800291c:	791a      	ldrb	r2, [r3, #4]
 800291e:	708a      	strb	r2, [r1, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002920:	795a      	ldrb	r2, [r3, #5]
 8002922:	70ca      	strb	r2, [r1, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002924:	799b      	ldrb	r3, [r3, #6]
 8002926:	710b      	strb	r3, [r1, #4]
         ((uint8_t*)arg)[5] = 0;
 8002928:	2000      	movs	r0, #0
 800292a:	7148      	strb	r0, [r1, #5]
         break;
 800292c:	bd38      	pop	{r3, r4, r5, pc}
         wizphy_reset();
 800292e:	f7ff ff18 	bl	8002762 <wizphy_reset>
 8002932:	e7bd      	b.n	80028b0 <ctlwizchip+0x20>
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002934:	4608      	mov	r0, r1
 8002936:	f7ff ff2c 	bl	8002792 <wizphy_setphyconf>
 800293a:	e7b9      	b.n	80028b0 <ctlwizchip+0x20>
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800293c:	4608      	mov	r0, r1
 800293e:	f7ff ff4b 	bl	80027d8 <wizphy_getphyconf>
 8002942:	e7b5      	b.n	80028b0 <ctlwizchip+0x20>
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002944:	7808      	ldrb	r0, [r1, #0]
}
 8002946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         return wizphy_setphypmode(*(uint8_t*)arg);
 800294a:	f7ff bf79 	b.w	8002840 <wizphy_setphypmode>
         tmp = wizphy_getphypmode();
 800294e:	f7ff fefc 	bl	800274a <wizphy_getphypmode>
         tmp = wizphy_getphylink();
 8002952:	b2c0      	uxtb	r0, r0
         if((int8_t)tmp == -1) return -1;
 8002954:	28ff      	cmp	r0, #255	; 0xff
 8002956:	d004      	beq.n	8002962 <ctlwizchip+0xd2>
         *(uint8_t*)arg = tmp;
 8002958:	7020      	strb	r0, [r4, #0]
 800295a:	e7a9      	b.n	80028b0 <ctlwizchip+0x20>
         tmp = wizphy_getphylink();
 800295c:	f7ff feed 	bl	800273a <wizphy_getphylink>
 8002960:	e7f7      	b.n	8002952 <ctlwizchip+0xc2>
         return -1;
 8002962:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002966:	bd38      	pop	{r3, r4, r5, pc}
 8002968:	20000028 	.word	0x20000028

0800296c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800296c:	b510      	push	{r4, lr}
   setSHAR(pnetinfo->mac);
 800296e:	4601      	mov	r1, r0
{
 8002970:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8002972:	2206      	movs	r2, #6
 8002974:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002978:	f7ff fad6 	bl	8001f28 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800297c:	2204      	movs	r2, #4
 800297e:	f104 010e 	add.w	r1, r4, #14
 8002982:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002986:	f7ff facf 	bl	8001f28 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800298a:	2204      	movs	r2, #4
 800298c:	f104 010a 	add.w	r1, r4, #10
 8002990:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002994:	f7ff fac8 	bl	8001f28 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002998:	2204      	movs	r2, #4
 800299a:	1da1      	adds	r1, r4, #6
 800299c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80029a0:	f7ff fac2 	bl	8001f28 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <wizchip_setnetinfo+0x54>)
 80029a6:	7ca2      	ldrb	r2, [r4, #18]
 80029a8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80029aa:	7ce2      	ldrb	r2, [r4, #19]
 80029ac:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80029ae:	7d22      	ldrb	r2, [r4, #20]
 80029b0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80029b2:	7d62      	ldrb	r2, [r4, #21]
 80029b4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80029b6:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <wizchip_setnetinfo+0x58>)
 80029b8:	7da2      	ldrb	r2, [r4, #22]
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	bd10      	pop	{r4, pc}
 80029be:	bf00      	nop
 80029c0:	200000f5 	.word	0x200000f5
 80029c4:	200000f4 	.word	0x200000f4

080029c8 <wizchip_getnetinfo>:
}

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80029c8:	b510      	push	{r4, lr}
   getSHAR(pnetinfo->mac);
 80029ca:	4601      	mov	r1, r0
{
 80029cc:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 80029ce:	2206      	movs	r2, #6
 80029d0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80029d4:	f7ff fa6c 	bl	8001eb0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80029d8:	2204      	movs	r2, #4
 80029da:	f104 010e 	add.w	r1, r4, #14
 80029de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029e2:	f7ff fa65 	bl	8001eb0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80029e6:	2204      	movs	r2, #4
 80029e8:	f104 010a 	add.w	r1, r4, #10
 80029ec:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80029f0:	f7ff fa5e 	bl	8001eb0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80029f4:	2204      	movs	r2, #4
 80029f6:	1da1      	adds	r1, r4, #6
 80029f8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80029fc:	f7ff fa58 	bl	8001eb0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <wizchip_getnetinfo+0x54>)
 8002a02:	781a      	ldrb	r2, [r3, #0]
 8002a04:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002a06:	785a      	ldrb	r2, [r3, #1]
 8002a08:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002a0a:	789a      	ldrb	r2, [r3, #2]
   pnetinfo->dns[3]= _DNS_[3];
 8002a0c:	78db      	ldrb	r3, [r3, #3]
 8002a0e:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <wizchip_getnetinfo+0x58>)
   pnetinfo->dns[2]= _DNS_[2];
 8002a12:	7522      	strb	r2, [r4, #20]
   pnetinfo->dhcp  = _DHCP_;
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	75a3      	strb	r3, [r4, #22]
 8002a18:	bd10      	pop	{r4, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200000f5 	.word	0x200000f5
 8002a20:	200000f4 	.word	0x200000f4

08002a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a2a:	e003      	b.n	8002a34 <LoopCopyDataInit>

08002a2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a32:	3104      	adds	r1, #4

08002a34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a34:	480b      	ldr	r0, [pc, #44]	; (8002a64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a3c:	d3f6      	bcc.n	8002a2c <CopyDataInit>
  ldr  r2, =_sbss
 8002a3e:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a40:	e002      	b.n	8002a48 <LoopFillZerobss>

08002a42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a44:	f842 3b04 	str.w	r3, [r2], #4

08002a48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a4c:	d3f9      	bcc.n	8002a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a4e:	f7ff f90b 	bl	8001c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a52:	f000 f817 	bl	8002a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a56:	f7fe ff65 	bl	8001924 <main>
  bx  lr    
 8002a5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a60:	08003bf4 	.word	0x08003bf4
  ldr  r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a68:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 8002a6c:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8002a70:	200003a8 	.word	0x200003a8

08002a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a74:	e7fe      	b.n	8002a74 <ADC_IRQHandler>
	...

08002a78 <__errno>:
 8002a78:	4b01      	ldr	r3, [pc, #4]	; (8002a80 <__errno+0x8>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000054 	.word	0x20000054

08002a84 <__libc_init_array>:
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	4e0d      	ldr	r6, [pc, #52]	; (8002abc <__libc_init_array+0x38>)
 8002a88:	4c0d      	ldr	r4, [pc, #52]	; (8002ac0 <__libc_init_array+0x3c>)
 8002a8a:	1ba4      	subs	r4, r4, r6
 8002a8c:	10a4      	asrs	r4, r4, #2
 8002a8e:	2500      	movs	r5, #0
 8002a90:	42a5      	cmp	r5, r4
 8002a92:	d109      	bne.n	8002aa8 <__libc_init_array+0x24>
 8002a94:	4e0b      	ldr	r6, [pc, #44]	; (8002ac4 <__libc_init_array+0x40>)
 8002a96:	4c0c      	ldr	r4, [pc, #48]	; (8002ac8 <__libc_init_array+0x44>)
 8002a98:	f000 ff7c 	bl	8003994 <_init>
 8002a9c:	1ba4      	subs	r4, r4, r6
 8002a9e:	10a4      	asrs	r4, r4, #2
 8002aa0:	2500      	movs	r5, #0
 8002aa2:	42a5      	cmp	r5, r4
 8002aa4:	d105      	bne.n	8002ab2 <__libc_init_array+0x2e>
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
 8002aa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aac:	4798      	blx	r3
 8002aae:	3501      	adds	r5, #1
 8002ab0:	e7ee      	b.n	8002a90 <__libc_init_array+0xc>
 8002ab2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ab6:	4798      	blx	r3
 8002ab8:	3501      	adds	r5, #1
 8002aba:	e7f2      	b.n	8002aa2 <__libc_init_array+0x1e>
 8002abc:	08003bec 	.word	0x08003bec
 8002ac0:	08003bec 	.word	0x08003bec
 8002ac4:	08003bec 	.word	0x08003bec
 8002ac8:	08003bf0 	.word	0x08003bf0

08002acc <memset>:
 8002acc:	4402      	add	r2, r0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d100      	bne.n	8002ad6 <memset+0xa>
 8002ad4:	4770      	bx	lr
 8002ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8002ada:	e7f9      	b.n	8002ad0 <memset+0x4>

08002adc <_free_r>:
 8002adc:	b538      	push	{r3, r4, r5, lr}
 8002ade:	4605      	mov	r5, r0
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	d045      	beq.n	8002b70 <_free_r+0x94>
 8002ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ae8:	1f0c      	subs	r4, r1, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bfb8      	it	lt
 8002aee:	18e4      	addlt	r4, r4, r3
 8002af0:	f000 fc44 	bl	800337c <__malloc_lock>
 8002af4:	4a1f      	ldr	r2, [pc, #124]	; (8002b74 <_free_r+0x98>)
 8002af6:	6813      	ldr	r3, [r2, #0]
 8002af8:	4610      	mov	r0, r2
 8002afa:	b933      	cbnz	r3, 8002b0a <_free_r+0x2e>
 8002afc:	6063      	str	r3, [r4, #4]
 8002afe:	6014      	str	r4, [r2, #0]
 8002b00:	4628      	mov	r0, r5
 8002b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b06:	f000 bc3a 	b.w	800337e <__malloc_unlock>
 8002b0a:	42a3      	cmp	r3, r4
 8002b0c:	d90c      	bls.n	8002b28 <_free_r+0x4c>
 8002b0e:	6821      	ldr	r1, [r4, #0]
 8002b10:	1862      	adds	r2, r4, r1
 8002b12:	4293      	cmp	r3, r2
 8002b14:	bf04      	itt	eq
 8002b16:	681a      	ldreq	r2, [r3, #0]
 8002b18:	685b      	ldreq	r3, [r3, #4]
 8002b1a:	6063      	str	r3, [r4, #4]
 8002b1c:	bf04      	itt	eq
 8002b1e:	1852      	addeq	r2, r2, r1
 8002b20:	6022      	streq	r2, [r4, #0]
 8002b22:	6004      	str	r4, [r0, #0]
 8002b24:	e7ec      	b.n	8002b00 <_free_r+0x24>
 8002b26:	4613      	mov	r3, r2
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	b10a      	cbz	r2, 8002b30 <_free_r+0x54>
 8002b2c:	42a2      	cmp	r2, r4
 8002b2e:	d9fa      	bls.n	8002b26 <_free_r+0x4a>
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	1858      	adds	r0, r3, r1
 8002b34:	42a0      	cmp	r0, r4
 8002b36:	d10b      	bne.n	8002b50 <_free_r+0x74>
 8002b38:	6820      	ldr	r0, [r4, #0]
 8002b3a:	4401      	add	r1, r0
 8002b3c:	1858      	adds	r0, r3, r1
 8002b3e:	4282      	cmp	r2, r0
 8002b40:	6019      	str	r1, [r3, #0]
 8002b42:	d1dd      	bne.n	8002b00 <_free_r+0x24>
 8002b44:	6810      	ldr	r0, [r2, #0]
 8002b46:	6852      	ldr	r2, [r2, #4]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	4401      	add	r1, r0
 8002b4c:	6019      	str	r1, [r3, #0]
 8002b4e:	e7d7      	b.n	8002b00 <_free_r+0x24>
 8002b50:	d902      	bls.n	8002b58 <_free_r+0x7c>
 8002b52:	230c      	movs	r3, #12
 8002b54:	602b      	str	r3, [r5, #0]
 8002b56:	e7d3      	b.n	8002b00 <_free_r+0x24>
 8002b58:	6820      	ldr	r0, [r4, #0]
 8002b5a:	1821      	adds	r1, r4, r0
 8002b5c:	428a      	cmp	r2, r1
 8002b5e:	bf04      	itt	eq
 8002b60:	6811      	ldreq	r1, [r2, #0]
 8002b62:	6852      	ldreq	r2, [r2, #4]
 8002b64:	6062      	str	r2, [r4, #4]
 8002b66:	bf04      	itt	eq
 8002b68:	1809      	addeq	r1, r1, r0
 8002b6a:	6021      	streq	r1, [r4, #0]
 8002b6c:	605c      	str	r4, [r3, #4]
 8002b6e:	e7c7      	b.n	8002b00 <_free_r+0x24>
 8002b70:	bd38      	pop	{r3, r4, r5, pc}
 8002b72:	bf00      	nop
 8002b74:	200000fc 	.word	0x200000fc

08002b78 <_malloc_r>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	1ccd      	adds	r5, r1, #3
 8002b7c:	f025 0503 	bic.w	r5, r5, #3
 8002b80:	3508      	adds	r5, #8
 8002b82:	2d0c      	cmp	r5, #12
 8002b84:	bf38      	it	cc
 8002b86:	250c      	movcc	r5, #12
 8002b88:	2d00      	cmp	r5, #0
 8002b8a:	4606      	mov	r6, r0
 8002b8c:	db01      	blt.n	8002b92 <_malloc_r+0x1a>
 8002b8e:	42a9      	cmp	r1, r5
 8002b90:	d903      	bls.n	8002b9a <_malloc_r+0x22>
 8002b92:	230c      	movs	r3, #12
 8002b94:	6033      	str	r3, [r6, #0]
 8002b96:	2000      	movs	r0, #0
 8002b98:	bd70      	pop	{r4, r5, r6, pc}
 8002b9a:	f000 fbef 	bl	800337c <__malloc_lock>
 8002b9e:	4a23      	ldr	r2, [pc, #140]	; (8002c2c <_malloc_r+0xb4>)
 8002ba0:	6814      	ldr	r4, [r2, #0]
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	b991      	cbnz	r1, 8002bcc <_malloc_r+0x54>
 8002ba6:	4c22      	ldr	r4, [pc, #136]	; (8002c30 <_malloc_r+0xb8>)
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	b91b      	cbnz	r3, 8002bb4 <_malloc_r+0x3c>
 8002bac:	4630      	mov	r0, r6
 8002bae:	f000 f8bd 	bl	8002d2c <_sbrk_r>
 8002bb2:	6020      	str	r0, [r4, #0]
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	4630      	mov	r0, r6
 8002bb8:	f000 f8b8 	bl	8002d2c <_sbrk_r>
 8002bbc:	1c43      	adds	r3, r0, #1
 8002bbe:	d126      	bne.n	8002c0e <_malloc_r+0x96>
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	6033      	str	r3, [r6, #0]
 8002bc4:	4630      	mov	r0, r6
 8002bc6:	f000 fbda 	bl	800337e <__malloc_unlock>
 8002bca:	e7e4      	b.n	8002b96 <_malloc_r+0x1e>
 8002bcc:	680b      	ldr	r3, [r1, #0]
 8002bce:	1b5b      	subs	r3, r3, r5
 8002bd0:	d41a      	bmi.n	8002c08 <_malloc_r+0x90>
 8002bd2:	2b0b      	cmp	r3, #11
 8002bd4:	d90f      	bls.n	8002bf6 <_malloc_r+0x7e>
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	50cd      	str	r5, [r1, r3]
 8002bda:	18cc      	adds	r4, r1, r3
 8002bdc:	4630      	mov	r0, r6
 8002bde:	f000 fbce 	bl	800337e <__malloc_unlock>
 8002be2:	f104 000b 	add.w	r0, r4, #11
 8002be6:	1d23      	adds	r3, r4, #4
 8002be8:	f020 0007 	bic.w	r0, r0, #7
 8002bec:	1ac3      	subs	r3, r0, r3
 8002bee:	d01b      	beq.n	8002c28 <_malloc_r+0xb0>
 8002bf0:	425a      	negs	r2, r3
 8002bf2:	50e2      	str	r2, [r4, r3]
 8002bf4:	bd70      	pop	{r4, r5, r6, pc}
 8002bf6:	428c      	cmp	r4, r1
 8002bf8:	bf0d      	iteet	eq
 8002bfa:	6863      	ldreq	r3, [r4, #4]
 8002bfc:	684b      	ldrne	r3, [r1, #4]
 8002bfe:	6063      	strne	r3, [r4, #4]
 8002c00:	6013      	streq	r3, [r2, #0]
 8002c02:	bf18      	it	ne
 8002c04:	460c      	movne	r4, r1
 8002c06:	e7e9      	b.n	8002bdc <_malloc_r+0x64>
 8002c08:	460c      	mov	r4, r1
 8002c0a:	6849      	ldr	r1, [r1, #4]
 8002c0c:	e7ca      	b.n	8002ba4 <_malloc_r+0x2c>
 8002c0e:	1cc4      	adds	r4, r0, #3
 8002c10:	f024 0403 	bic.w	r4, r4, #3
 8002c14:	42a0      	cmp	r0, r4
 8002c16:	d005      	beq.n	8002c24 <_malloc_r+0xac>
 8002c18:	1a21      	subs	r1, r4, r0
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	f000 f886 	bl	8002d2c <_sbrk_r>
 8002c20:	3001      	adds	r0, #1
 8002c22:	d0cd      	beq.n	8002bc0 <_malloc_r+0x48>
 8002c24:	6025      	str	r5, [r4, #0]
 8002c26:	e7d9      	b.n	8002bdc <_malloc_r+0x64>
 8002c28:	bd70      	pop	{r4, r5, r6, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200000fc 	.word	0x200000fc
 8002c30:	20000100 	.word	0x20000100

08002c34 <iprintf>:
 8002c34:	b40f      	push	{r0, r1, r2, r3}
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <iprintf+0x2c>)
 8002c38:	b513      	push	{r0, r1, r4, lr}
 8002c3a:	681c      	ldr	r4, [r3, #0]
 8002c3c:	b124      	cbz	r4, 8002c48 <iprintf+0x14>
 8002c3e:	69a3      	ldr	r3, [r4, #24]
 8002c40:	b913      	cbnz	r3, 8002c48 <iprintf+0x14>
 8002c42:	4620      	mov	r0, r4
 8002c44:	f000 fa9a 	bl	800317c <__sinit>
 8002c48:	ab05      	add	r3, sp, #20
 8002c4a:	9a04      	ldr	r2, [sp, #16]
 8002c4c:	68a1      	ldr	r1, [r4, #8]
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	4620      	mov	r0, r4
 8002c52:	f000 fbbf 	bl	80033d4 <_vfiprintf_r>
 8002c56:	b002      	add	sp, #8
 8002c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c5c:	b004      	add	sp, #16
 8002c5e:	4770      	bx	lr
 8002c60:	20000054 	.word	0x20000054

08002c64 <_puts_r>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	460e      	mov	r6, r1
 8002c68:	4605      	mov	r5, r0
 8002c6a:	b118      	cbz	r0, 8002c74 <_puts_r+0x10>
 8002c6c:	6983      	ldr	r3, [r0, #24]
 8002c6e:	b90b      	cbnz	r3, 8002c74 <_puts_r+0x10>
 8002c70:	f000 fa84 	bl	800317c <__sinit>
 8002c74:	69ab      	ldr	r3, [r5, #24]
 8002c76:	68ac      	ldr	r4, [r5, #8]
 8002c78:	b913      	cbnz	r3, 8002c80 <_puts_r+0x1c>
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f000 fa7e 	bl	800317c <__sinit>
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <_puts_r+0xac>)
 8002c82:	429c      	cmp	r4, r3
 8002c84:	d117      	bne.n	8002cb6 <_puts_r+0x52>
 8002c86:	686c      	ldr	r4, [r5, #4]
 8002c88:	89a3      	ldrh	r3, [r4, #12]
 8002c8a:	071b      	lsls	r3, r3, #28
 8002c8c:	d51d      	bpl.n	8002cca <_puts_r+0x66>
 8002c8e:	6923      	ldr	r3, [r4, #16]
 8002c90:	b1db      	cbz	r3, 8002cca <_puts_r+0x66>
 8002c92:	3e01      	subs	r6, #1
 8002c94:	68a3      	ldr	r3, [r4, #8]
 8002c96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	60a3      	str	r3, [r4, #8]
 8002c9e:	b9e9      	cbnz	r1, 8002cdc <_puts_r+0x78>
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da2e      	bge.n	8002d02 <_puts_r+0x9e>
 8002ca4:	4622      	mov	r2, r4
 8002ca6:	210a      	movs	r1, #10
 8002ca8:	4628      	mov	r0, r5
 8002caa:	f000 f893 	bl	8002dd4 <__swbuf_r>
 8002cae:	3001      	adds	r0, #1
 8002cb0:	d011      	beq.n	8002cd6 <_puts_r+0x72>
 8002cb2:	200a      	movs	r0, #10
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
 8002cb6:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <_puts_r+0xb0>)
 8002cb8:	429c      	cmp	r4, r3
 8002cba:	d101      	bne.n	8002cc0 <_puts_r+0x5c>
 8002cbc:	68ac      	ldr	r4, [r5, #8]
 8002cbe:	e7e3      	b.n	8002c88 <_puts_r+0x24>
 8002cc0:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <_puts_r+0xb4>)
 8002cc2:	429c      	cmp	r4, r3
 8002cc4:	bf08      	it	eq
 8002cc6:	68ec      	ldreq	r4, [r5, #12]
 8002cc8:	e7de      	b.n	8002c88 <_puts_r+0x24>
 8002cca:	4621      	mov	r1, r4
 8002ccc:	4628      	mov	r0, r5
 8002cce:	f000 f8e5 	bl	8002e9c <__swsetup_r>
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d0dd      	beq.n	8002c92 <_puts_r+0x2e>
 8002cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002cda:	bd70      	pop	{r4, r5, r6, pc}
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	da04      	bge.n	8002cea <_puts_r+0x86>
 8002ce0:	69a2      	ldr	r2, [r4, #24]
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	db06      	blt.n	8002cf4 <_puts_r+0x90>
 8002ce6:	290a      	cmp	r1, #10
 8002ce8:	d004      	beq.n	8002cf4 <_puts_r+0x90>
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	6022      	str	r2, [r4, #0]
 8002cf0:	7019      	strb	r1, [r3, #0]
 8002cf2:	e7cf      	b.n	8002c94 <_puts_r+0x30>
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f000 f86c 	bl	8002dd4 <__swbuf_r>
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d1c9      	bne.n	8002c94 <_puts_r+0x30>
 8002d00:	e7e9      	b.n	8002cd6 <_puts_r+0x72>
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	200a      	movs	r0, #10
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	6022      	str	r2, [r4, #0]
 8002d0a:	7018      	strb	r0, [r3, #0]
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	bf00      	nop
 8002d10:	08003b70 	.word	0x08003b70
 8002d14:	08003b90 	.word	0x08003b90
 8002d18:	08003b50 	.word	0x08003b50

08002d1c <puts>:
 8002d1c:	4b02      	ldr	r3, [pc, #8]	; (8002d28 <puts+0xc>)
 8002d1e:	4601      	mov	r1, r0
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	f7ff bf9f 	b.w	8002c64 <_puts_r>
 8002d26:	bf00      	nop
 8002d28:	20000054 	.word	0x20000054

08002d2c <_sbrk_r>:
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	4c06      	ldr	r4, [pc, #24]	; (8002d48 <_sbrk_r+0x1c>)
 8002d30:	2300      	movs	r3, #0
 8002d32:	4605      	mov	r5, r0
 8002d34:	4608      	mov	r0, r1
 8002d36:	6023      	str	r3, [r4, #0]
 8002d38:	f7fe ff70 	bl	8001c1c <_sbrk>
 8002d3c:	1c43      	adds	r3, r0, #1
 8002d3e:	d102      	bne.n	8002d46 <_sbrk_r+0x1a>
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	b103      	cbz	r3, 8002d46 <_sbrk_r+0x1a>
 8002d44:	602b      	str	r3, [r5, #0]
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
 8002d48:	200003a4 	.word	0x200003a4

08002d4c <__sread>:
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	460c      	mov	r4, r1
 8002d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d54:	f000 fdea 	bl	800392c <_read_r>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	bfab      	itete	ge
 8002d5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d5e:	89a3      	ldrhlt	r3, [r4, #12]
 8002d60:	181b      	addge	r3, r3, r0
 8002d62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d66:	bfac      	ite	ge
 8002d68:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d6a:	81a3      	strhlt	r3, [r4, #12]
 8002d6c:	bd10      	pop	{r4, pc}

08002d6e <__swrite>:
 8002d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d72:	461f      	mov	r7, r3
 8002d74:	898b      	ldrh	r3, [r1, #12]
 8002d76:	05db      	lsls	r3, r3, #23
 8002d78:	4605      	mov	r5, r0
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	4616      	mov	r6, r2
 8002d7e:	d505      	bpl.n	8002d8c <__swrite+0x1e>
 8002d80:	2302      	movs	r3, #2
 8002d82:	2200      	movs	r2, #0
 8002d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d88:	f000 fa82 	bl	8003290 <_lseek_r>
 8002d8c:	89a3      	ldrh	r3, [r4, #12]
 8002d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d96:	81a3      	strh	r3, [r4, #12]
 8002d98:	4632      	mov	r2, r6
 8002d9a:	463b      	mov	r3, r7
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002da2:	f000 b869 	b.w	8002e78 <_write_r>

08002da6 <__sseek>:
 8002da6:	b510      	push	{r4, lr}
 8002da8:	460c      	mov	r4, r1
 8002daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dae:	f000 fa6f 	bl	8003290 <_lseek_r>
 8002db2:	1c43      	adds	r3, r0, #1
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	bf15      	itete	ne
 8002db8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002dba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002dbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002dc2:	81a3      	strheq	r3, [r4, #12]
 8002dc4:	bf18      	it	ne
 8002dc6:	81a3      	strhne	r3, [r4, #12]
 8002dc8:	bd10      	pop	{r4, pc}

08002dca <__sclose>:
 8002dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dce:	f000 b8d3 	b.w	8002f78 <_close_r>
	...

08002dd4 <__swbuf_r>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	460e      	mov	r6, r1
 8002dd8:	4614      	mov	r4, r2
 8002dda:	4605      	mov	r5, r0
 8002ddc:	b118      	cbz	r0, 8002de6 <__swbuf_r+0x12>
 8002dde:	6983      	ldr	r3, [r0, #24]
 8002de0:	b90b      	cbnz	r3, 8002de6 <__swbuf_r+0x12>
 8002de2:	f000 f9cb 	bl	800317c <__sinit>
 8002de6:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <__swbuf_r+0x98>)
 8002de8:	429c      	cmp	r4, r3
 8002dea:	d12a      	bne.n	8002e42 <__swbuf_r+0x6e>
 8002dec:	686c      	ldr	r4, [r5, #4]
 8002dee:	69a3      	ldr	r3, [r4, #24]
 8002df0:	60a3      	str	r3, [r4, #8]
 8002df2:	89a3      	ldrh	r3, [r4, #12]
 8002df4:	071a      	lsls	r2, r3, #28
 8002df6:	d52e      	bpl.n	8002e56 <__swbuf_r+0x82>
 8002df8:	6923      	ldr	r3, [r4, #16]
 8002dfa:	b363      	cbz	r3, 8002e56 <__swbuf_r+0x82>
 8002dfc:	6923      	ldr	r3, [r4, #16]
 8002dfe:	6820      	ldr	r0, [r4, #0]
 8002e00:	1ac0      	subs	r0, r0, r3
 8002e02:	6963      	ldr	r3, [r4, #20]
 8002e04:	b2f6      	uxtb	r6, r6
 8002e06:	4298      	cmp	r0, r3
 8002e08:	4637      	mov	r7, r6
 8002e0a:	db04      	blt.n	8002e16 <__swbuf_r+0x42>
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f000 f94a 	bl	80030a8 <_fflush_r>
 8002e14:	bb28      	cbnz	r0, 8002e62 <__swbuf_r+0x8e>
 8002e16:	68a3      	ldr	r3, [r4, #8]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	60a3      	str	r3, [r4, #8]
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	6022      	str	r2, [r4, #0]
 8002e22:	701e      	strb	r6, [r3, #0]
 8002e24:	6963      	ldr	r3, [r4, #20]
 8002e26:	3001      	adds	r0, #1
 8002e28:	4298      	cmp	r0, r3
 8002e2a:	d004      	beq.n	8002e36 <__swbuf_r+0x62>
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	07db      	lsls	r3, r3, #31
 8002e30:	d519      	bpl.n	8002e66 <__swbuf_r+0x92>
 8002e32:	2e0a      	cmp	r6, #10
 8002e34:	d117      	bne.n	8002e66 <__swbuf_r+0x92>
 8002e36:	4621      	mov	r1, r4
 8002e38:	4628      	mov	r0, r5
 8002e3a:	f000 f935 	bl	80030a8 <_fflush_r>
 8002e3e:	b190      	cbz	r0, 8002e66 <__swbuf_r+0x92>
 8002e40:	e00f      	b.n	8002e62 <__swbuf_r+0x8e>
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <__swbuf_r+0x9c>)
 8002e44:	429c      	cmp	r4, r3
 8002e46:	d101      	bne.n	8002e4c <__swbuf_r+0x78>
 8002e48:	68ac      	ldr	r4, [r5, #8]
 8002e4a:	e7d0      	b.n	8002dee <__swbuf_r+0x1a>
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <__swbuf_r+0xa0>)
 8002e4e:	429c      	cmp	r4, r3
 8002e50:	bf08      	it	eq
 8002e52:	68ec      	ldreq	r4, [r5, #12]
 8002e54:	e7cb      	b.n	8002dee <__swbuf_r+0x1a>
 8002e56:	4621      	mov	r1, r4
 8002e58:	4628      	mov	r0, r5
 8002e5a:	f000 f81f 	bl	8002e9c <__swsetup_r>
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d0cc      	beq.n	8002dfc <__swbuf_r+0x28>
 8002e62:	f04f 37ff 	mov.w	r7, #4294967295
 8002e66:	4638      	mov	r0, r7
 8002e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	08003b70 	.word	0x08003b70
 8002e70:	08003b90 	.word	0x08003b90
 8002e74:	08003b50 	.word	0x08003b50

08002e78 <_write_r>:
 8002e78:	b538      	push	{r3, r4, r5, lr}
 8002e7a:	4c07      	ldr	r4, [pc, #28]	; (8002e98 <_write_r+0x20>)
 8002e7c:	4605      	mov	r5, r0
 8002e7e:	4608      	mov	r0, r1
 8002e80:	4611      	mov	r1, r2
 8002e82:	2200      	movs	r2, #0
 8002e84:	6022      	str	r2, [r4, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f7fe fc56 	bl	8001738 <_write>
 8002e8c:	1c43      	adds	r3, r0, #1
 8002e8e:	d102      	bne.n	8002e96 <_write_r+0x1e>
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	b103      	cbz	r3, 8002e96 <_write_r+0x1e>
 8002e94:	602b      	str	r3, [r5, #0]
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
 8002e98:	200003a4 	.word	0x200003a4

08002e9c <__swsetup_r>:
 8002e9c:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <__swsetup_r+0xcc>)
 8002e9e:	b570      	push	{r4, r5, r6, lr}
 8002ea0:	681d      	ldr	r5, [r3, #0]
 8002ea2:	4606      	mov	r6, r0
 8002ea4:	460c      	mov	r4, r1
 8002ea6:	b125      	cbz	r5, 8002eb2 <__swsetup_r+0x16>
 8002ea8:	69ab      	ldr	r3, [r5, #24]
 8002eaa:	b913      	cbnz	r3, 8002eb2 <__swsetup_r+0x16>
 8002eac:	4628      	mov	r0, r5
 8002eae:	f000 f965 	bl	800317c <__sinit>
 8002eb2:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <__swsetup_r+0xd0>)
 8002eb4:	429c      	cmp	r4, r3
 8002eb6:	d10f      	bne.n	8002ed8 <__swsetup_r+0x3c>
 8002eb8:	686c      	ldr	r4, [r5, #4]
 8002eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	0715      	lsls	r5, r2, #28
 8002ec2:	d42c      	bmi.n	8002f1e <__swsetup_r+0x82>
 8002ec4:	06d0      	lsls	r0, r2, #27
 8002ec6:	d411      	bmi.n	8002eec <__swsetup_r+0x50>
 8002ec8:	2209      	movs	r2, #9
 8002eca:	6032      	str	r2, [r6, #0]
 8002ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ed0:	81a3      	strh	r3, [r4, #12]
 8002ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
 8002ed8:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <__swsetup_r+0xd4>)
 8002eda:	429c      	cmp	r4, r3
 8002edc:	d101      	bne.n	8002ee2 <__swsetup_r+0x46>
 8002ede:	68ac      	ldr	r4, [r5, #8]
 8002ee0:	e7eb      	b.n	8002eba <__swsetup_r+0x1e>
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <__swsetup_r+0xd8>)
 8002ee4:	429c      	cmp	r4, r3
 8002ee6:	bf08      	it	eq
 8002ee8:	68ec      	ldreq	r4, [r5, #12]
 8002eea:	e7e6      	b.n	8002eba <__swsetup_r+0x1e>
 8002eec:	0751      	lsls	r1, r2, #29
 8002eee:	d512      	bpl.n	8002f16 <__swsetup_r+0x7a>
 8002ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ef2:	b141      	cbz	r1, 8002f06 <__swsetup_r+0x6a>
 8002ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ef8:	4299      	cmp	r1, r3
 8002efa:	d002      	beq.n	8002f02 <__swsetup_r+0x66>
 8002efc:	4630      	mov	r0, r6
 8002efe:	f7ff fded 	bl	8002adc <_free_r>
 8002f02:	2300      	movs	r3, #0
 8002f04:	6363      	str	r3, [r4, #52]	; 0x34
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6063      	str	r3, [r4, #4]
 8002f12:	6923      	ldr	r3, [r4, #16]
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	f043 0308 	orr.w	r3, r3, #8
 8002f1c:	81a3      	strh	r3, [r4, #12]
 8002f1e:	6923      	ldr	r3, [r4, #16]
 8002f20:	b94b      	cbnz	r3, 8002f36 <__swsetup_r+0x9a>
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2c:	d003      	beq.n	8002f36 <__swsetup_r+0x9a>
 8002f2e:	4621      	mov	r1, r4
 8002f30:	4630      	mov	r0, r6
 8002f32:	f000 f9e3 	bl	80032fc <__smakebuf_r>
 8002f36:	89a2      	ldrh	r2, [r4, #12]
 8002f38:	f012 0301 	ands.w	r3, r2, #1
 8002f3c:	d00c      	beq.n	8002f58 <__swsetup_r+0xbc>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60a3      	str	r3, [r4, #8]
 8002f42:	6963      	ldr	r3, [r4, #20]
 8002f44:	425b      	negs	r3, r3
 8002f46:	61a3      	str	r3, [r4, #24]
 8002f48:	6923      	ldr	r3, [r4, #16]
 8002f4a:	b953      	cbnz	r3, 8002f62 <__swsetup_r+0xc6>
 8002f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002f54:	d1ba      	bne.n	8002ecc <__swsetup_r+0x30>
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	0792      	lsls	r2, r2, #30
 8002f5a:	bf58      	it	pl
 8002f5c:	6963      	ldrpl	r3, [r4, #20]
 8002f5e:	60a3      	str	r3, [r4, #8]
 8002f60:	e7f2      	b.n	8002f48 <__swsetup_r+0xac>
 8002f62:	2000      	movs	r0, #0
 8002f64:	e7f7      	b.n	8002f56 <__swsetup_r+0xba>
 8002f66:	bf00      	nop
 8002f68:	20000054 	.word	0x20000054
 8002f6c:	08003b70 	.word	0x08003b70
 8002f70:	08003b90 	.word	0x08003b90
 8002f74:	08003b50 	.word	0x08003b50

08002f78 <_close_r>:
 8002f78:	b538      	push	{r3, r4, r5, lr}
 8002f7a:	4c06      	ldr	r4, [pc, #24]	; (8002f94 <_close_r+0x1c>)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	4605      	mov	r5, r0
 8002f80:	4608      	mov	r0, r1
 8002f82:	6023      	str	r3, [r4, #0]
 8002f84:	f7fe fe64 	bl	8001c50 <_close>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d102      	bne.n	8002f92 <_close_r+0x1a>
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	b103      	cbz	r3, 8002f92 <_close_r+0x1a>
 8002f90:	602b      	str	r3, [r5, #0]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	200003a4 	.word	0x200003a4

08002f98 <__sflush_r>:
 8002f98:	898a      	ldrh	r2, [r1, #12]
 8002f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	0710      	lsls	r0, r2, #28
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	d45a      	bmi.n	800305c <__sflush_r+0xc4>
 8002fa6:	684b      	ldr	r3, [r1, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	dc05      	bgt.n	8002fb8 <__sflush_r+0x20>
 8002fac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	dc02      	bgt.n	8002fb8 <__sflush_r+0x20>
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fba:	2e00      	cmp	r6, #0
 8002fbc:	d0f9      	beq.n	8002fb2 <__sflush_r+0x1a>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fc4:	682f      	ldr	r7, [r5, #0]
 8002fc6:	602b      	str	r3, [r5, #0]
 8002fc8:	d033      	beq.n	8003032 <__sflush_r+0x9a>
 8002fca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fcc:	89a3      	ldrh	r3, [r4, #12]
 8002fce:	075a      	lsls	r2, r3, #29
 8002fd0:	d505      	bpl.n	8002fde <__sflush_r+0x46>
 8002fd2:	6863      	ldr	r3, [r4, #4]
 8002fd4:	1ac0      	subs	r0, r0, r3
 8002fd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fd8:	b10b      	cbz	r3, 8002fde <__sflush_r+0x46>
 8002fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fdc:	1ac0      	subs	r0, r0, r3
 8002fde:	2300      	movs	r3, #0
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fe4:	6a21      	ldr	r1, [r4, #32]
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	47b0      	blx	r6
 8002fea:	1c43      	adds	r3, r0, #1
 8002fec:	89a3      	ldrh	r3, [r4, #12]
 8002fee:	d106      	bne.n	8002ffe <__sflush_r+0x66>
 8002ff0:	6829      	ldr	r1, [r5, #0]
 8002ff2:	291d      	cmp	r1, #29
 8002ff4:	d84b      	bhi.n	800308e <__sflush_r+0xf6>
 8002ff6:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <__sflush_r+0x10c>)
 8002ff8:	40ca      	lsrs	r2, r1
 8002ffa:	07d6      	lsls	r6, r2, #31
 8002ffc:	d547      	bpl.n	800308e <__sflush_r+0xf6>
 8002ffe:	2200      	movs	r2, #0
 8003000:	6062      	str	r2, [r4, #4]
 8003002:	04d9      	lsls	r1, r3, #19
 8003004:	6922      	ldr	r2, [r4, #16]
 8003006:	6022      	str	r2, [r4, #0]
 8003008:	d504      	bpl.n	8003014 <__sflush_r+0x7c>
 800300a:	1c42      	adds	r2, r0, #1
 800300c:	d101      	bne.n	8003012 <__sflush_r+0x7a>
 800300e:	682b      	ldr	r3, [r5, #0]
 8003010:	b903      	cbnz	r3, 8003014 <__sflush_r+0x7c>
 8003012:	6560      	str	r0, [r4, #84]	; 0x54
 8003014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003016:	602f      	str	r7, [r5, #0]
 8003018:	2900      	cmp	r1, #0
 800301a:	d0ca      	beq.n	8002fb2 <__sflush_r+0x1a>
 800301c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003020:	4299      	cmp	r1, r3
 8003022:	d002      	beq.n	800302a <__sflush_r+0x92>
 8003024:	4628      	mov	r0, r5
 8003026:	f7ff fd59 	bl	8002adc <_free_r>
 800302a:	2000      	movs	r0, #0
 800302c:	6360      	str	r0, [r4, #52]	; 0x34
 800302e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003032:	6a21      	ldr	r1, [r4, #32]
 8003034:	2301      	movs	r3, #1
 8003036:	4628      	mov	r0, r5
 8003038:	47b0      	blx	r6
 800303a:	1c41      	adds	r1, r0, #1
 800303c:	d1c6      	bne.n	8002fcc <__sflush_r+0x34>
 800303e:	682b      	ldr	r3, [r5, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0c3      	beq.n	8002fcc <__sflush_r+0x34>
 8003044:	2b1d      	cmp	r3, #29
 8003046:	d001      	beq.n	800304c <__sflush_r+0xb4>
 8003048:	2b16      	cmp	r3, #22
 800304a:	d101      	bne.n	8003050 <__sflush_r+0xb8>
 800304c:	602f      	str	r7, [r5, #0]
 800304e:	e7b0      	b.n	8002fb2 <__sflush_r+0x1a>
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003056:	81a3      	strh	r3, [r4, #12]
 8003058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800305c:	690f      	ldr	r7, [r1, #16]
 800305e:	2f00      	cmp	r7, #0
 8003060:	d0a7      	beq.n	8002fb2 <__sflush_r+0x1a>
 8003062:	0793      	lsls	r3, r2, #30
 8003064:	680e      	ldr	r6, [r1, #0]
 8003066:	bf08      	it	eq
 8003068:	694b      	ldreq	r3, [r1, #20]
 800306a:	600f      	str	r7, [r1, #0]
 800306c:	bf18      	it	ne
 800306e:	2300      	movne	r3, #0
 8003070:	eba6 0807 	sub.w	r8, r6, r7
 8003074:	608b      	str	r3, [r1, #8]
 8003076:	f1b8 0f00 	cmp.w	r8, #0
 800307a:	dd9a      	ble.n	8002fb2 <__sflush_r+0x1a>
 800307c:	4643      	mov	r3, r8
 800307e:	463a      	mov	r2, r7
 8003080:	6a21      	ldr	r1, [r4, #32]
 8003082:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003084:	4628      	mov	r0, r5
 8003086:	47b0      	blx	r6
 8003088:	2800      	cmp	r0, #0
 800308a:	dc07      	bgt.n	800309c <__sflush_r+0x104>
 800308c:	89a3      	ldrh	r3, [r4, #12]
 800308e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003092:	81a3      	strh	r3, [r4, #12]
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800309c:	4407      	add	r7, r0
 800309e:	eba8 0800 	sub.w	r8, r8, r0
 80030a2:	e7e8      	b.n	8003076 <__sflush_r+0xde>
 80030a4:	20400001 	.word	0x20400001

080030a8 <_fflush_r>:
 80030a8:	b538      	push	{r3, r4, r5, lr}
 80030aa:	690b      	ldr	r3, [r1, #16]
 80030ac:	4605      	mov	r5, r0
 80030ae:	460c      	mov	r4, r1
 80030b0:	b1db      	cbz	r3, 80030ea <_fflush_r+0x42>
 80030b2:	b118      	cbz	r0, 80030bc <_fflush_r+0x14>
 80030b4:	6983      	ldr	r3, [r0, #24]
 80030b6:	b90b      	cbnz	r3, 80030bc <_fflush_r+0x14>
 80030b8:	f000 f860 	bl	800317c <__sinit>
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <_fflush_r+0x48>)
 80030be:	429c      	cmp	r4, r3
 80030c0:	d109      	bne.n	80030d6 <_fflush_r+0x2e>
 80030c2:	686c      	ldr	r4, [r5, #4]
 80030c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030c8:	b17b      	cbz	r3, 80030ea <_fflush_r+0x42>
 80030ca:	4621      	mov	r1, r4
 80030cc:	4628      	mov	r0, r5
 80030ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030d2:	f7ff bf61 	b.w	8002f98 <__sflush_r>
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <_fflush_r+0x4c>)
 80030d8:	429c      	cmp	r4, r3
 80030da:	d101      	bne.n	80030e0 <_fflush_r+0x38>
 80030dc:	68ac      	ldr	r4, [r5, #8]
 80030de:	e7f1      	b.n	80030c4 <_fflush_r+0x1c>
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <_fflush_r+0x50>)
 80030e2:	429c      	cmp	r4, r3
 80030e4:	bf08      	it	eq
 80030e6:	68ec      	ldreq	r4, [r5, #12]
 80030e8:	e7ec      	b.n	80030c4 <_fflush_r+0x1c>
 80030ea:	2000      	movs	r0, #0
 80030ec:	bd38      	pop	{r3, r4, r5, pc}
 80030ee:	bf00      	nop
 80030f0:	08003b70 	.word	0x08003b70
 80030f4:	08003b90 	.word	0x08003b90
 80030f8:	08003b50 	.word	0x08003b50

080030fc <_cleanup_r>:
 80030fc:	4901      	ldr	r1, [pc, #4]	; (8003104 <_cleanup_r+0x8>)
 80030fe:	f000 b8a9 	b.w	8003254 <_fwalk_reent>
 8003102:	bf00      	nop
 8003104:	080030a9 	.word	0x080030a9

08003108 <std.isra.0>:
 8003108:	2300      	movs	r3, #0
 800310a:	b510      	push	{r4, lr}
 800310c:	4604      	mov	r4, r0
 800310e:	6003      	str	r3, [r0, #0]
 8003110:	6043      	str	r3, [r0, #4]
 8003112:	6083      	str	r3, [r0, #8]
 8003114:	8181      	strh	r1, [r0, #12]
 8003116:	6643      	str	r3, [r0, #100]	; 0x64
 8003118:	81c2      	strh	r2, [r0, #14]
 800311a:	6103      	str	r3, [r0, #16]
 800311c:	6143      	str	r3, [r0, #20]
 800311e:	6183      	str	r3, [r0, #24]
 8003120:	4619      	mov	r1, r3
 8003122:	2208      	movs	r2, #8
 8003124:	305c      	adds	r0, #92	; 0x5c
 8003126:	f7ff fcd1 	bl	8002acc <memset>
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <std.isra.0+0x38>)
 800312c:	6263      	str	r3, [r4, #36]	; 0x24
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <std.isra.0+0x3c>)
 8003130:	62a3      	str	r3, [r4, #40]	; 0x28
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <std.isra.0+0x40>)
 8003134:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <std.isra.0+0x44>)
 8003138:	6224      	str	r4, [r4, #32]
 800313a:	6323      	str	r3, [r4, #48]	; 0x30
 800313c:	bd10      	pop	{r4, pc}
 800313e:	bf00      	nop
 8003140:	08002d4d 	.word	0x08002d4d
 8003144:	08002d6f 	.word	0x08002d6f
 8003148:	08002da7 	.word	0x08002da7
 800314c:	08002dcb 	.word	0x08002dcb

08003150 <__sfmoreglue>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	1e4a      	subs	r2, r1, #1
 8003154:	2568      	movs	r5, #104	; 0x68
 8003156:	4355      	muls	r5, r2
 8003158:	460e      	mov	r6, r1
 800315a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800315e:	f7ff fd0b 	bl	8002b78 <_malloc_r>
 8003162:	4604      	mov	r4, r0
 8003164:	b140      	cbz	r0, 8003178 <__sfmoreglue+0x28>
 8003166:	2100      	movs	r1, #0
 8003168:	e880 0042 	stmia.w	r0, {r1, r6}
 800316c:	300c      	adds	r0, #12
 800316e:	60a0      	str	r0, [r4, #8]
 8003170:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003174:	f7ff fcaa 	bl	8002acc <memset>
 8003178:	4620      	mov	r0, r4
 800317a:	bd70      	pop	{r4, r5, r6, pc}

0800317c <__sinit>:
 800317c:	6983      	ldr	r3, [r0, #24]
 800317e:	b510      	push	{r4, lr}
 8003180:	4604      	mov	r4, r0
 8003182:	bb33      	cbnz	r3, 80031d2 <__sinit+0x56>
 8003184:	6483      	str	r3, [r0, #72]	; 0x48
 8003186:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003188:	6503      	str	r3, [r0, #80]	; 0x50
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <__sinit+0x58>)
 800318c:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <__sinit+0x5c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6282      	str	r2, [r0, #40]	; 0x28
 8003192:	4298      	cmp	r0, r3
 8003194:	bf04      	itt	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	6183      	streq	r3, [r0, #24]
 800319a:	f000 f81f 	bl	80031dc <__sfp>
 800319e:	6060      	str	r0, [r4, #4]
 80031a0:	4620      	mov	r0, r4
 80031a2:	f000 f81b 	bl	80031dc <__sfp>
 80031a6:	60a0      	str	r0, [r4, #8]
 80031a8:	4620      	mov	r0, r4
 80031aa:	f000 f817 	bl	80031dc <__sfp>
 80031ae:	2200      	movs	r2, #0
 80031b0:	60e0      	str	r0, [r4, #12]
 80031b2:	2104      	movs	r1, #4
 80031b4:	6860      	ldr	r0, [r4, #4]
 80031b6:	f7ff ffa7 	bl	8003108 <std.isra.0>
 80031ba:	2201      	movs	r2, #1
 80031bc:	2109      	movs	r1, #9
 80031be:	68a0      	ldr	r0, [r4, #8]
 80031c0:	f7ff ffa2 	bl	8003108 <std.isra.0>
 80031c4:	2202      	movs	r2, #2
 80031c6:	2112      	movs	r1, #18
 80031c8:	68e0      	ldr	r0, [r4, #12]
 80031ca:	f7ff ff9d 	bl	8003108 <std.isra.0>
 80031ce:	2301      	movs	r3, #1
 80031d0:	61a3      	str	r3, [r4, #24]
 80031d2:	bd10      	pop	{r4, pc}
 80031d4:	08003b4c 	.word	0x08003b4c
 80031d8:	080030fd 	.word	0x080030fd

080031dc <__sfp>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <__sfp+0x74>)
 80031e0:	681e      	ldr	r6, [r3, #0]
 80031e2:	69b3      	ldr	r3, [r6, #24]
 80031e4:	4607      	mov	r7, r0
 80031e6:	b913      	cbnz	r3, 80031ee <__sfp+0x12>
 80031e8:	4630      	mov	r0, r6
 80031ea:	f7ff ffc7 	bl	800317c <__sinit>
 80031ee:	3648      	adds	r6, #72	; 0x48
 80031f0:	68b4      	ldr	r4, [r6, #8]
 80031f2:	6873      	ldr	r3, [r6, #4]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	d503      	bpl.n	8003200 <__sfp+0x24>
 80031f8:	6833      	ldr	r3, [r6, #0]
 80031fa:	b133      	cbz	r3, 800320a <__sfp+0x2e>
 80031fc:	6836      	ldr	r6, [r6, #0]
 80031fe:	e7f7      	b.n	80031f0 <__sfp+0x14>
 8003200:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003204:	b16d      	cbz	r5, 8003222 <__sfp+0x46>
 8003206:	3468      	adds	r4, #104	; 0x68
 8003208:	e7f4      	b.n	80031f4 <__sfp+0x18>
 800320a:	2104      	movs	r1, #4
 800320c:	4638      	mov	r0, r7
 800320e:	f7ff ff9f 	bl	8003150 <__sfmoreglue>
 8003212:	6030      	str	r0, [r6, #0]
 8003214:	2800      	cmp	r0, #0
 8003216:	d1f1      	bne.n	80031fc <__sfp+0x20>
 8003218:	230c      	movs	r3, #12
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	4604      	mov	r4, r0
 800321e:	4620      	mov	r0, r4
 8003220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003226:	81e3      	strh	r3, [r4, #14]
 8003228:	2301      	movs	r3, #1
 800322a:	81a3      	strh	r3, [r4, #12]
 800322c:	6665      	str	r5, [r4, #100]	; 0x64
 800322e:	6025      	str	r5, [r4, #0]
 8003230:	60a5      	str	r5, [r4, #8]
 8003232:	6065      	str	r5, [r4, #4]
 8003234:	6125      	str	r5, [r4, #16]
 8003236:	6165      	str	r5, [r4, #20]
 8003238:	61a5      	str	r5, [r4, #24]
 800323a:	2208      	movs	r2, #8
 800323c:	4629      	mov	r1, r5
 800323e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003242:	f7ff fc43 	bl	8002acc <memset>
 8003246:	6365      	str	r5, [r4, #52]	; 0x34
 8003248:	63a5      	str	r5, [r4, #56]	; 0x38
 800324a:	64a5      	str	r5, [r4, #72]	; 0x48
 800324c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800324e:	e7e6      	b.n	800321e <__sfp+0x42>
 8003250:	08003b4c 	.word	0x08003b4c

08003254 <_fwalk_reent>:
 8003254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003258:	4680      	mov	r8, r0
 800325a:	4689      	mov	r9, r1
 800325c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003260:	2600      	movs	r6, #0
 8003262:	b914      	cbnz	r4, 800326a <_fwalk_reent+0x16>
 8003264:	4630      	mov	r0, r6
 8003266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800326a:	68a5      	ldr	r5, [r4, #8]
 800326c:	6867      	ldr	r7, [r4, #4]
 800326e:	3f01      	subs	r7, #1
 8003270:	d501      	bpl.n	8003276 <_fwalk_reent+0x22>
 8003272:	6824      	ldr	r4, [r4, #0]
 8003274:	e7f5      	b.n	8003262 <_fwalk_reent+0xe>
 8003276:	89ab      	ldrh	r3, [r5, #12]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d907      	bls.n	800328c <_fwalk_reent+0x38>
 800327c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003280:	3301      	adds	r3, #1
 8003282:	d003      	beq.n	800328c <_fwalk_reent+0x38>
 8003284:	4629      	mov	r1, r5
 8003286:	4640      	mov	r0, r8
 8003288:	47c8      	blx	r9
 800328a:	4306      	orrs	r6, r0
 800328c:	3568      	adds	r5, #104	; 0x68
 800328e:	e7ee      	b.n	800326e <_fwalk_reent+0x1a>

08003290 <_lseek_r>:
 8003290:	b538      	push	{r3, r4, r5, lr}
 8003292:	4c07      	ldr	r4, [pc, #28]	; (80032b0 <_lseek_r+0x20>)
 8003294:	4605      	mov	r5, r0
 8003296:	4608      	mov	r0, r1
 8003298:	4611      	mov	r1, r2
 800329a:	2200      	movs	r2, #0
 800329c:	6022      	str	r2, [r4, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	f7fe fce0 	bl	8001c64 <_lseek>
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d102      	bne.n	80032ae <_lseek_r+0x1e>
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	b103      	cbz	r3, 80032ae <_lseek_r+0x1e>
 80032ac:	602b      	str	r3, [r5, #0]
 80032ae:	bd38      	pop	{r3, r4, r5, pc}
 80032b0:	200003a4 	.word	0x200003a4

080032b4 <__swhatbuf_r>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	460e      	mov	r6, r1
 80032b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032bc:	2900      	cmp	r1, #0
 80032be:	b090      	sub	sp, #64	; 0x40
 80032c0:	4614      	mov	r4, r2
 80032c2:	461d      	mov	r5, r3
 80032c4:	da07      	bge.n	80032d6 <__swhatbuf_r+0x22>
 80032c6:	2300      	movs	r3, #0
 80032c8:	602b      	str	r3, [r5, #0]
 80032ca:	89b3      	ldrh	r3, [r6, #12]
 80032cc:	061a      	lsls	r2, r3, #24
 80032ce:	d410      	bmi.n	80032f2 <__swhatbuf_r+0x3e>
 80032d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d4:	e00e      	b.n	80032f4 <__swhatbuf_r+0x40>
 80032d6:	aa01      	add	r2, sp, #4
 80032d8:	f000 fb3a 	bl	8003950 <_fstat_r>
 80032dc:	2800      	cmp	r0, #0
 80032de:	dbf2      	blt.n	80032c6 <__swhatbuf_r+0x12>
 80032e0:	9a02      	ldr	r2, [sp, #8]
 80032e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032ea:	425a      	negs	r2, r3
 80032ec:	415a      	adcs	r2, r3
 80032ee:	602a      	str	r2, [r5, #0]
 80032f0:	e7ee      	b.n	80032d0 <__swhatbuf_r+0x1c>
 80032f2:	2340      	movs	r3, #64	; 0x40
 80032f4:	2000      	movs	r0, #0
 80032f6:	6023      	str	r3, [r4, #0]
 80032f8:	b010      	add	sp, #64	; 0x40
 80032fa:	bd70      	pop	{r4, r5, r6, pc}

080032fc <__smakebuf_r>:
 80032fc:	898b      	ldrh	r3, [r1, #12]
 80032fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003300:	079d      	lsls	r5, r3, #30
 8003302:	4606      	mov	r6, r0
 8003304:	460c      	mov	r4, r1
 8003306:	d507      	bpl.n	8003318 <__smakebuf_r+0x1c>
 8003308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800330c:	6023      	str	r3, [r4, #0]
 800330e:	6123      	str	r3, [r4, #16]
 8003310:	2301      	movs	r3, #1
 8003312:	6163      	str	r3, [r4, #20]
 8003314:	b002      	add	sp, #8
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	ab01      	add	r3, sp, #4
 800331a:	466a      	mov	r2, sp
 800331c:	f7ff ffca 	bl	80032b4 <__swhatbuf_r>
 8003320:	9900      	ldr	r1, [sp, #0]
 8003322:	4605      	mov	r5, r0
 8003324:	4630      	mov	r0, r6
 8003326:	f7ff fc27 	bl	8002b78 <_malloc_r>
 800332a:	b948      	cbnz	r0, 8003340 <__smakebuf_r+0x44>
 800332c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003330:	059a      	lsls	r2, r3, #22
 8003332:	d4ef      	bmi.n	8003314 <__smakebuf_r+0x18>
 8003334:	f023 0303 	bic.w	r3, r3, #3
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	81a3      	strh	r3, [r4, #12]
 800333e:	e7e3      	b.n	8003308 <__smakebuf_r+0xc>
 8003340:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <__smakebuf_r+0x7c>)
 8003342:	62b3      	str	r3, [r6, #40]	; 0x28
 8003344:	89a3      	ldrh	r3, [r4, #12]
 8003346:	6020      	str	r0, [r4, #0]
 8003348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334c:	81a3      	strh	r3, [r4, #12]
 800334e:	9b00      	ldr	r3, [sp, #0]
 8003350:	6163      	str	r3, [r4, #20]
 8003352:	9b01      	ldr	r3, [sp, #4]
 8003354:	6120      	str	r0, [r4, #16]
 8003356:	b15b      	cbz	r3, 8003370 <__smakebuf_r+0x74>
 8003358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800335c:	4630      	mov	r0, r6
 800335e:	f000 fb09 	bl	8003974 <_isatty_r>
 8003362:	b128      	cbz	r0, 8003370 <__smakebuf_r+0x74>
 8003364:	89a3      	ldrh	r3, [r4, #12]
 8003366:	f023 0303 	bic.w	r3, r3, #3
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	81a3      	strh	r3, [r4, #12]
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	431d      	orrs	r5, r3
 8003374:	81a5      	strh	r5, [r4, #12]
 8003376:	e7cd      	b.n	8003314 <__smakebuf_r+0x18>
 8003378:	080030fd 	.word	0x080030fd

0800337c <__malloc_lock>:
 800337c:	4770      	bx	lr

0800337e <__malloc_unlock>:
 800337e:	4770      	bx	lr

08003380 <__sfputc_r>:
 8003380:	6893      	ldr	r3, [r2, #8]
 8003382:	3b01      	subs	r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	b410      	push	{r4}
 8003388:	6093      	str	r3, [r2, #8]
 800338a:	da09      	bge.n	80033a0 <__sfputc_r+0x20>
 800338c:	6994      	ldr	r4, [r2, #24]
 800338e:	42a3      	cmp	r3, r4
 8003390:	db02      	blt.n	8003398 <__sfputc_r+0x18>
 8003392:	b2cb      	uxtb	r3, r1
 8003394:	2b0a      	cmp	r3, #10
 8003396:	d103      	bne.n	80033a0 <__sfputc_r+0x20>
 8003398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800339c:	f7ff bd1a 	b.w	8002dd4 <__swbuf_r>
 80033a0:	6813      	ldr	r3, [r2, #0]
 80033a2:	1c58      	adds	r0, r3, #1
 80033a4:	6010      	str	r0, [r2, #0]
 80033a6:	7019      	strb	r1, [r3, #0]
 80033a8:	b2c8      	uxtb	r0, r1
 80033aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <__sfputs_r>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	4606      	mov	r6, r0
 80033b4:	460f      	mov	r7, r1
 80033b6:	4614      	mov	r4, r2
 80033b8:	18d5      	adds	r5, r2, r3
 80033ba:	42ac      	cmp	r4, r5
 80033bc:	d101      	bne.n	80033c2 <__sfputs_r+0x12>
 80033be:	2000      	movs	r0, #0
 80033c0:	e007      	b.n	80033d2 <__sfputs_r+0x22>
 80033c2:	463a      	mov	r2, r7
 80033c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c8:	4630      	mov	r0, r6
 80033ca:	f7ff ffd9 	bl	8003380 <__sfputc_r>
 80033ce:	1c43      	adds	r3, r0, #1
 80033d0:	d1f3      	bne.n	80033ba <__sfputs_r+0xa>
 80033d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033d4 <_vfiprintf_r>:
 80033d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d8:	b09d      	sub	sp, #116	; 0x74
 80033da:	460c      	mov	r4, r1
 80033dc:	4617      	mov	r7, r2
 80033de:	9303      	str	r3, [sp, #12]
 80033e0:	4606      	mov	r6, r0
 80033e2:	b118      	cbz	r0, 80033ec <_vfiprintf_r+0x18>
 80033e4:	6983      	ldr	r3, [r0, #24]
 80033e6:	b90b      	cbnz	r3, 80033ec <_vfiprintf_r+0x18>
 80033e8:	f7ff fec8 	bl	800317c <__sinit>
 80033ec:	4b7c      	ldr	r3, [pc, #496]	; (80035e0 <_vfiprintf_r+0x20c>)
 80033ee:	429c      	cmp	r4, r3
 80033f0:	d157      	bne.n	80034a2 <_vfiprintf_r+0xce>
 80033f2:	6874      	ldr	r4, [r6, #4]
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	0718      	lsls	r0, r3, #28
 80033f8:	d55d      	bpl.n	80034b6 <_vfiprintf_r+0xe2>
 80033fa:	6923      	ldr	r3, [r4, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d05a      	beq.n	80034b6 <_vfiprintf_r+0xe2>
 8003400:	2300      	movs	r3, #0
 8003402:	9309      	str	r3, [sp, #36]	; 0x24
 8003404:	2320      	movs	r3, #32
 8003406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800340a:	2330      	movs	r3, #48	; 0x30
 800340c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003410:	f04f 0b01 	mov.w	fp, #1
 8003414:	46b8      	mov	r8, r7
 8003416:	4645      	mov	r5, r8
 8003418:	f815 3b01 	ldrb.w	r3, [r5], #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d155      	bne.n	80034cc <_vfiprintf_r+0xf8>
 8003420:	ebb8 0a07 	subs.w	sl, r8, r7
 8003424:	d00b      	beq.n	800343e <_vfiprintf_r+0x6a>
 8003426:	4653      	mov	r3, sl
 8003428:	463a      	mov	r2, r7
 800342a:	4621      	mov	r1, r4
 800342c:	4630      	mov	r0, r6
 800342e:	f7ff ffbf 	bl	80033b0 <__sfputs_r>
 8003432:	3001      	adds	r0, #1
 8003434:	f000 80c4 	beq.w	80035c0 <_vfiprintf_r+0x1ec>
 8003438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800343a:	4453      	add	r3, sl
 800343c:	9309      	str	r3, [sp, #36]	; 0x24
 800343e:	f898 3000 	ldrb.w	r3, [r8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80bc 	beq.w	80035c0 <_vfiprintf_r+0x1ec>
 8003448:	2300      	movs	r3, #0
 800344a:	f04f 32ff 	mov.w	r2, #4294967295
 800344e:	9304      	str	r3, [sp, #16]
 8003450:	9307      	str	r3, [sp, #28]
 8003452:	9205      	str	r2, [sp, #20]
 8003454:	9306      	str	r3, [sp, #24]
 8003456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800345a:	931a      	str	r3, [sp, #104]	; 0x68
 800345c:	2205      	movs	r2, #5
 800345e:	7829      	ldrb	r1, [r5, #0]
 8003460:	4860      	ldr	r0, [pc, #384]	; (80035e4 <_vfiprintf_r+0x210>)
 8003462:	f7fc fec5 	bl	80001f0 <memchr>
 8003466:	f105 0801 	add.w	r8, r5, #1
 800346a:	9b04      	ldr	r3, [sp, #16]
 800346c:	2800      	cmp	r0, #0
 800346e:	d131      	bne.n	80034d4 <_vfiprintf_r+0x100>
 8003470:	06d9      	lsls	r1, r3, #27
 8003472:	bf44      	itt	mi
 8003474:	2220      	movmi	r2, #32
 8003476:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800347a:	071a      	lsls	r2, r3, #28
 800347c:	bf44      	itt	mi
 800347e:	222b      	movmi	r2, #43	; 0x2b
 8003480:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003484:	782a      	ldrb	r2, [r5, #0]
 8003486:	2a2a      	cmp	r2, #42	; 0x2a
 8003488:	d02c      	beq.n	80034e4 <_vfiprintf_r+0x110>
 800348a:	9a07      	ldr	r2, [sp, #28]
 800348c:	2100      	movs	r1, #0
 800348e:	200a      	movs	r0, #10
 8003490:	46a8      	mov	r8, r5
 8003492:	3501      	adds	r5, #1
 8003494:	f898 3000 	ldrb.w	r3, [r8]
 8003498:	3b30      	subs	r3, #48	; 0x30
 800349a:	2b09      	cmp	r3, #9
 800349c:	d96d      	bls.n	800357a <_vfiprintf_r+0x1a6>
 800349e:	b371      	cbz	r1, 80034fe <_vfiprintf_r+0x12a>
 80034a0:	e026      	b.n	80034f0 <_vfiprintf_r+0x11c>
 80034a2:	4b51      	ldr	r3, [pc, #324]	; (80035e8 <_vfiprintf_r+0x214>)
 80034a4:	429c      	cmp	r4, r3
 80034a6:	d101      	bne.n	80034ac <_vfiprintf_r+0xd8>
 80034a8:	68b4      	ldr	r4, [r6, #8]
 80034aa:	e7a3      	b.n	80033f4 <_vfiprintf_r+0x20>
 80034ac:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <_vfiprintf_r+0x218>)
 80034ae:	429c      	cmp	r4, r3
 80034b0:	bf08      	it	eq
 80034b2:	68f4      	ldreq	r4, [r6, #12]
 80034b4:	e79e      	b.n	80033f4 <_vfiprintf_r+0x20>
 80034b6:	4621      	mov	r1, r4
 80034b8:	4630      	mov	r0, r6
 80034ba:	f7ff fcef 	bl	8002e9c <__swsetup_r>
 80034be:	2800      	cmp	r0, #0
 80034c0:	d09e      	beq.n	8003400 <_vfiprintf_r+0x2c>
 80034c2:	f04f 30ff 	mov.w	r0, #4294967295
 80034c6:	b01d      	add	sp, #116	; 0x74
 80034c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034cc:	2b25      	cmp	r3, #37	; 0x25
 80034ce:	d0a7      	beq.n	8003420 <_vfiprintf_r+0x4c>
 80034d0:	46a8      	mov	r8, r5
 80034d2:	e7a0      	b.n	8003416 <_vfiprintf_r+0x42>
 80034d4:	4a43      	ldr	r2, [pc, #268]	; (80035e4 <_vfiprintf_r+0x210>)
 80034d6:	1a80      	subs	r0, r0, r2
 80034d8:	fa0b f000 	lsl.w	r0, fp, r0
 80034dc:	4318      	orrs	r0, r3
 80034de:	9004      	str	r0, [sp, #16]
 80034e0:	4645      	mov	r5, r8
 80034e2:	e7bb      	b.n	800345c <_vfiprintf_r+0x88>
 80034e4:	9a03      	ldr	r2, [sp, #12]
 80034e6:	1d11      	adds	r1, r2, #4
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	9103      	str	r1, [sp, #12]
 80034ec:	2a00      	cmp	r2, #0
 80034ee:	db01      	blt.n	80034f4 <_vfiprintf_r+0x120>
 80034f0:	9207      	str	r2, [sp, #28]
 80034f2:	e004      	b.n	80034fe <_vfiprintf_r+0x12a>
 80034f4:	4252      	negs	r2, r2
 80034f6:	f043 0302 	orr.w	r3, r3, #2
 80034fa:	9207      	str	r2, [sp, #28]
 80034fc:	9304      	str	r3, [sp, #16]
 80034fe:	f898 3000 	ldrb.w	r3, [r8]
 8003502:	2b2e      	cmp	r3, #46	; 0x2e
 8003504:	d110      	bne.n	8003528 <_vfiprintf_r+0x154>
 8003506:	f898 3001 	ldrb.w	r3, [r8, #1]
 800350a:	2b2a      	cmp	r3, #42	; 0x2a
 800350c:	f108 0101 	add.w	r1, r8, #1
 8003510:	d137      	bne.n	8003582 <_vfiprintf_r+0x1ae>
 8003512:	9b03      	ldr	r3, [sp, #12]
 8003514:	1d1a      	adds	r2, r3, #4
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	9203      	str	r2, [sp, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	bfb8      	it	lt
 800351e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003522:	f108 0802 	add.w	r8, r8, #2
 8003526:	9305      	str	r3, [sp, #20]
 8003528:	4d31      	ldr	r5, [pc, #196]	; (80035f0 <_vfiprintf_r+0x21c>)
 800352a:	f898 1000 	ldrb.w	r1, [r8]
 800352e:	2203      	movs	r2, #3
 8003530:	4628      	mov	r0, r5
 8003532:	f7fc fe5d 	bl	80001f0 <memchr>
 8003536:	b140      	cbz	r0, 800354a <_vfiprintf_r+0x176>
 8003538:	2340      	movs	r3, #64	; 0x40
 800353a:	1b40      	subs	r0, r0, r5
 800353c:	fa03 f000 	lsl.w	r0, r3, r0
 8003540:	9b04      	ldr	r3, [sp, #16]
 8003542:	4303      	orrs	r3, r0
 8003544:	9304      	str	r3, [sp, #16]
 8003546:	f108 0801 	add.w	r8, r8, #1
 800354a:	f898 1000 	ldrb.w	r1, [r8]
 800354e:	4829      	ldr	r0, [pc, #164]	; (80035f4 <_vfiprintf_r+0x220>)
 8003550:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003554:	2206      	movs	r2, #6
 8003556:	f108 0701 	add.w	r7, r8, #1
 800355a:	f7fc fe49 	bl	80001f0 <memchr>
 800355e:	2800      	cmp	r0, #0
 8003560:	d034      	beq.n	80035cc <_vfiprintf_r+0x1f8>
 8003562:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <_vfiprintf_r+0x224>)
 8003564:	bb03      	cbnz	r3, 80035a8 <_vfiprintf_r+0x1d4>
 8003566:	9b03      	ldr	r3, [sp, #12]
 8003568:	3307      	adds	r3, #7
 800356a:	f023 0307 	bic.w	r3, r3, #7
 800356e:	3308      	adds	r3, #8
 8003570:	9303      	str	r3, [sp, #12]
 8003572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003574:	444b      	add	r3, r9
 8003576:	9309      	str	r3, [sp, #36]	; 0x24
 8003578:	e74c      	b.n	8003414 <_vfiprintf_r+0x40>
 800357a:	fb00 3202 	mla	r2, r0, r2, r3
 800357e:	2101      	movs	r1, #1
 8003580:	e786      	b.n	8003490 <_vfiprintf_r+0xbc>
 8003582:	2300      	movs	r3, #0
 8003584:	9305      	str	r3, [sp, #20]
 8003586:	4618      	mov	r0, r3
 8003588:	250a      	movs	r5, #10
 800358a:	4688      	mov	r8, r1
 800358c:	3101      	adds	r1, #1
 800358e:	f898 2000 	ldrb.w	r2, [r8]
 8003592:	3a30      	subs	r2, #48	; 0x30
 8003594:	2a09      	cmp	r2, #9
 8003596:	d903      	bls.n	80035a0 <_vfiprintf_r+0x1cc>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0c5      	beq.n	8003528 <_vfiprintf_r+0x154>
 800359c:	9005      	str	r0, [sp, #20]
 800359e:	e7c3      	b.n	8003528 <_vfiprintf_r+0x154>
 80035a0:	fb05 2000 	mla	r0, r5, r0, r2
 80035a4:	2301      	movs	r3, #1
 80035a6:	e7f0      	b.n	800358a <_vfiprintf_r+0x1b6>
 80035a8:	ab03      	add	r3, sp, #12
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4622      	mov	r2, r4
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <_vfiprintf_r+0x228>)
 80035b0:	a904      	add	r1, sp, #16
 80035b2:	4630      	mov	r0, r6
 80035b4:	f3af 8000 	nop.w
 80035b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80035bc:	4681      	mov	r9, r0
 80035be:	d1d8      	bne.n	8003572 <_vfiprintf_r+0x19e>
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	065b      	lsls	r3, r3, #25
 80035c4:	f53f af7d 	bmi.w	80034c2 <_vfiprintf_r+0xee>
 80035c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035ca:	e77c      	b.n	80034c6 <_vfiprintf_r+0xf2>
 80035cc:	ab03      	add	r3, sp, #12
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	4622      	mov	r2, r4
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <_vfiprintf_r+0x228>)
 80035d4:	a904      	add	r1, sp, #16
 80035d6:	4630      	mov	r0, r6
 80035d8:	f000 f888 	bl	80036ec <_printf_i>
 80035dc:	e7ec      	b.n	80035b8 <_vfiprintf_r+0x1e4>
 80035de:	bf00      	nop
 80035e0:	08003b70 	.word	0x08003b70
 80035e4:	08003bb0 	.word	0x08003bb0
 80035e8:	08003b90 	.word	0x08003b90
 80035ec:	08003b50 	.word	0x08003b50
 80035f0:	08003bb6 	.word	0x08003bb6
 80035f4:	08003bba 	.word	0x08003bba
 80035f8:	00000000 	.word	0x00000000
 80035fc:	080033b1 	.word	0x080033b1

08003600 <_printf_common>:
 8003600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003604:	4691      	mov	r9, r2
 8003606:	461f      	mov	r7, r3
 8003608:	688a      	ldr	r2, [r1, #8]
 800360a:	690b      	ldr	r3, [r1, #16]
 800360c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003610:	4293      	cmp	r3, r2
 8003612:	bfb8      	it	lt
 8003614:	4613      	movlt	r3, r2
 8003616:	f8c9 3000 	str.w	r3, [r9]
 800361a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800361e:	4606      	mov	r6, r0
 8003620:	460c      	mov	r4, r1
 8003622:	b112      	cbz	r2, 800362a <_printf_common+0x2a>
 8003624:	3301      	adds	r3, #1
 8003626:	f8c9 3000 	str.w	r3, [r9]
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	0699      	lsls	r1, r3, #26
 800362e:	bf42      	ittt	mi
 8003630:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003634:	3302      	addmi	r3, #2
 8003636:	f8c9 3000 	strmi.w	r3, [r9]
 800363a:	6825      	ldr	r5, [r4, #0]
 800363c:	f015 0506 	ands.w	r5, r5, #6
 8003640:	d107      	bne.n	8003652 <_printf_common+0x52>
 8003642:	f104 0a19 	add.w	sl, r4, #25
 8003646:	68e3      	ldr	r3, [r4, #12]
 8003648:	f8d9 2000 	ldr.w	r2, [r9]
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	429d      	cmp	r5, r3
 8003650:	db29      	blt.n	80036a6 <_printf_common+0xa6>
 8003652:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	3300      	adds	r3, #0
 800365a:	bf18      	it	ne
 800365c:	2301      	movne	r3, #1
 800365e:	0692      	lsls	r2, r2, #26
 8003660:	d42e      	bmi.n	80036c0 <_printf_common+0xc0>
 8003662:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003666:	4639      	mov	r1, r7
 8003668:	4630      	mov	r0, r6
 800366a:	47c0      	blx	r8
 800366c:	3001      	adds	r0, #1
 800366e:	d021      	beq.n	80036b4 <_printf_common+0xb4>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	68e5      	ldr	r5, [r4, #12]
 8003674:	f8d9 2000 	ldr.w	r2, [r9]
 8003678:	f003 0306 	and.w	r3, r3, #6
 800367c:	2b04      	cmp	r3, #4
 800367e:	bf08      	it	eq
 8003680:	1aad      	subeq	r5, r5, r2
 8003682:	68a3      	ldr	r3, [r4, #8]
 8003684:	6922      	ldr	r2, [r4, #16]
 8003686:	bf0c      	ite	eq
 8003688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800368c:	2500      	movne	r5, #0
 800368e:	4293      	cmp	r3, r2
 8003690:	bfc4      	itt	gt
 8003692:	1a9b      	subgt	r3, r3, r2
 8003694:	18ed      	addgt	r5, r5, r3
 8003696:	f04f 0900 	mov.w	r9, #0
 800369a:	341a      	adds	r4, #26
 800369c:	454d      	cmp	r5, r9
 800369e:	d11b      	bne.n	80036d8 <_printf_common+0xd8>
 80036a0:	2000      	movs	r0, #0
 80036a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a6:	2301      	movs	r3, #1
 80036a8:	4652      	mov	r2, sl
 80036aa:	4639      	mov	r1, r7
 80036ac:	4630      	mov	r0, r6
 80036ae:	47c0      	blx	r8
 80036b0:	3001      	adds	r0, #1
 80036b2:	d103      	bne.n	80036bc <_printf_common+0xbc>
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036bc:	3501      	adds	r5, #1
 80036be:	e7c2      	b.n	8003646 <_printf_common+0x46>
 80036c0:	18e1      	adds	r1, r4, r3
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	2030      	movs	r0, #48	; 0x30
 80036c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036ca:	4422      	add	r2, r4
 80036cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036d4:	3302      	adds	r3, #2
 80036d6:	e7c4      	b.n	8003662 <_printf_common+0x62>
 80036d8:	2301      	movs	r3, #1
 80036da:	4622      	mov	r2, r4
 80036dc:	4639      	mov	r1, r7
 80036de:	4630      	mov	r0, r6
 80036e0:	47c0      	blx	r8
 80036e2:	3001      	adds	r0, #1
 80036e4:	d0e6      	beq.n	80036b4 <_printf_common+0xb4>
 80036e6:	f109 0901 	add.w	r9, r9, #1
 80036ea:	e7d7      	b.n	800369c <_printf_common+0x9c>

080036ec <_printf_i>:
 80036ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036f0:	4617      	mov	r7, r2
 80036f2:	7e0a      	ldrb	r2, [r1, #24]
 80036f4:	b085      	sub	sp, #20
 80036f6:	2a6e      	cmp	r2, #110	; 0x6e
 80036f8:	4698      	mov	r8, r3
 80036fa:	4606      	mov	r6, r0
 80036fc:	460c      	mov	r4, r1
 80036fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003700:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003704:	f000 80bc 	beq.w	8003880 <_printf_i+0x194>
 8003708:	d81a      	bhi.n	8003740 <_printf_i+0x54>
 800370a:	2a63      	cmp	r2, #99	; 0x63
 800370c:	d02e      	beq.n	800376c <_printf_i+0x80>
 800370e:	d80a      	bhi.n	8003726 <_printf_i+0x3a>
 8003710:	2a00      	cmp	r2, #0
 8003712:	f000 80c8 	beq.w	80038a6 <_printf_i+0x1ba>
 8003716:	2a58      	cmp	r2, #88	; 0x58
 8003718:	f000 808a 	beq.w	8003830 <_printf_i+0x144>
 800371c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003720:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003724:	e02a      	b.n	800377c <_printf_i+0x90>
 8003726:	2a64      	cmp	r2, #100	; 0x64
 8003728:	d001      	beq.n	800372e <_printf_i+0x42>
 800372a:	2a69      	cmp	r2, #105	; 0x69
 800372c:	d1f6      	bne.n	800371c <_printf_i+0x30>
 800372e:	6821      	ldr	r1, [r4, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003736:	d023      	beq.n	8003780 <_printf_i+0x94>
 8003738:	1d11      	adds	r1, r2, #4
 800373a:	6019      	str	r1, [r3, #0]
 800373c:	6813      	ldr	r3, [r2, #0]
 800373e:	e027      	b.n	8003790 <_printf_i+0xa4>
 8003740:	2a73      	cmp	r2, #115	; 0x73
 8003742:	f000 80b4 	beq.w	80038ae <_printf_i+0x1c2>
 8003746:	d808      	bhi.n	800375a <_printf_i+0x6e>
 8003748:	2a6f      	cmp	r2, #111	; 0x6f
 800374a:	d02a      	beq.n	80037a2 <_printf_i+0xb6>
 800374c:	2a70      	cmp	r2, #112	; 0x70
 800374e:	d1e5      	bne.n	800371c <_printf_i+0x30>
 8003750:	680a      	ldr	r2, [r1, #0]
 8003752:	f042 0220 	orr.w	r2, r2, #32
 8003756:	600a      	str	r2, [r1, #0]
 8003758:	e003      	b.n	8003762 <_printf_i+0x76>
 800375a:	2a75      	cmp	r2, #117	; 0x75
 800375c:	d021      	beq.n	80037a2 <_printf_i+0xb6>
 800375e:	2a78      	cmp	r2, #120	; 0x78
 8003760:	d1dc      	bne.n	800371c <_printf_i+0x30>
 8003762:	2278      	movs	r2, #120	; 0x78
 8003764:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003768:	496e      	ldr	r1, [pc, #440]	; (8003924 <_printf_i+0x238>)
 800376a:	e064      	b.n	8003836 <_printf_i+0x14a>
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003772:	1d11      	adds	r1, r2, #4
 8003774:	6019      	str	r1, [r3, #0]
 8003776:	6813      	ldr	r3, [r2, #0]
 8003778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800377c:	2301      	movs	r3, #1
 800377e:	e0a3      	b.n	80038c8 <_printf_i+0x1dc>
 8003780:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003784:	f102 0104 	add.w	r1, r2, #4
 8003788:	6019      	str	r1, [r3, #0]
 800378a:	d0d7      	beq.n	800373c <_printf_i+0x50>
 800378c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003790:	2b00      	cmp	r3, #0
 8003792:	da03      	bge.n	800379c <_printf_i+0xb0>
 8003794:	222d      	movs	r2, #45	; 0x2d
 8003796:	425b      	negs	r3, r3
 8003798:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800379c:	4962      	ldr	r1, [pc, #392]	; (8003928 <_printf_i+0x23c>)
 800379e:	220a      	movs	r2, #10
 80037a0:	e017      	b.n	80037d2 <_printf_i+0xe6>
 80037a2:	6820      	ldr	r0, [r4, #0]
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80037aa:	d003      	beq.n	80037b4 <_printf_i+0xc8>
 80037ac:	1d08      	adds	r0, r1, #4
 80037ae:	6018      	str	r0, [r3, #0]
 80037b0:	680b      	ldr	r3, [r1, #0]
 80037b2:	e006      	b.n	80037c2 <_printf_i+0xd6>
 80037b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037b8:	f101 0004 	add.w	r0, r1, #4
 80037bc:	6018      	str	r0, [r3, #0]
 80037be:	d0f7      	beq.n	80037b0 <_printf_i+0xc4>
 80037c0:	880b      	ldrh	r3, [r1, #0]
 80037c2:	4959      	ldr	r1, [pc, #356]	; (8003928 <_printf_i+0x23c>)
 80037c4:	2a6f      	cmp	r2, #111	; 0x6f
 80037c6:	bf14      	ite	ne
 80037c8:	220a      	movne	r2, #10
 80037ca:	2208      	moveq	r2, #8
 80037cc:	2000      	movs	r0, #0
 80037ce:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80037d2:	6865      	ldr	r5, [r4, #4]
 80037d4:	60a5      	str	r5, [r4, #8]
 80037d6:	2d00      	cmp	r5, #0
 80037d8:	f2c0 809c 	blt.w	8003914 <_printf_i+0x228>
 80037dc:	6820      	ldr	r0, [r4, #0]
 80037de:	f020 0004 	bic.w	r0, r0, #4
 80037e2:	6020      	str	r0, [r4, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d13f      	bne.n	8003868 <_printf_i+0x17c>
 80037e8:	2d00      	cmp	r5, #0
 80037ea:	f040 8095 	bne.w	8003918 <_printf_i+0x22c>
 80037ee:	4675      	mov	r5, lr
 80037f0:	2a08      	cmp	r2, #8
 80037f2:	d10b      	bne.n	800380c <_printf_i+0x120>
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	07da      	lsls	r2, r3, #31
 80037f8:	d508      	bpl.n	800380c <_printf_i+0x120>
 80037fa:	6923      	ldr	r3, [r4, #16]
 80037fc:	6862      	ldr	r2, [r4, #4]
 80037fe:	429a      	cmp	r2, r3
 8003800:	bfde      	ittt	le
 8003802:	2330      	movle	r3, #48	; 0x30
 8003804:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003808:	f105 35ff 	addle.w	r5, r5, #4294967295
 800380c:	ebae 0305 	sub.w	r3, lr, r5
 8003810:	6123      	str	r3, [r4, #16]
 8003812:	f8cd 8000 	str.w	r8, [sp]
 8003816:	463b      	mov	r3, r7
 8003818:	aa03      	add	r2, sp, #12
 800381a:	4621      	mov	r1, r4
 800381c:	4630      	mov	r0, r6
 800381e:	f7ff feef 	bl	8003600 <_printf_common>
 8003822:	3001      	adds	r0, #1
 8003824:	d155      	bne.n	80038d2 <_printf_i+0x1e6>
 8003826:	f04f 30ff 	mov.w	r0, #4294967295
 800382a:	b005      	add	sp, #20
 800382c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003830:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003834:	493c      	ldr	r1, [pc, #240]	; (8003928 <_printf_i+0x23c>)
 8003836:	6822      	ldr	r2, [r4, #0]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800383e:	f100 0504 	add.w	r5, r0, #4
 8003842:	601d      	str	r5, [r3, #0]
 8003844:	d001      	beq.n	800384a <_printf_i+0x15e>
 8003846:	6803      	ldr	r3, [r0, #0]
 8003848:	e002      	b.n	8003850 <_printf_i+0x164>
 800384a:	0655      	lsls	r5, r2, #25
 800384c:	d5fb      	bpl.n	8003846 <_printf_i+0x15a>
 800384e:	8803      	ldrh	r3, [r0, #0]
 8003850:	07d0      	lsls	r0, r2, #31
 8003852:	bf44      	itt	mi
 8003854:	f042 0220 	orrmi.w	r2, r2, #32
 8003858:	6022      	strmi	r2, [r4, #0]
 800385a:	b91b      	cbnz	r3, 8003864 <_printf_i+0x178>
 800385c:	6822      	ldr	r2, [r4, #0]
 800385e:	f022 0220 	bic.w	r2, r2, #32
 8003862:	6022      	str	r2, [r4, #0]
 8003864:	2210      	movs	r2, #16
 8003866:	e7b1      	b.n	80037cc <_printf_i+0xe0>
 8003868:	4675      	mov	r5, lr
 800386a:	fbb3 f0f2 	udiv	r0, r3, r2
 800386e:	fb02 3310 	mls	r3, r2, r0, r3
 8003872:	5ccb      	ldrb	r3, [r1, r3]
 8003874:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003878:	4603      	mov	r3, r0
 800387a:	2800      	cmp	r0, #0
 800387c:	d1f5      	bne.n	800386a <_printf_i+0x17e>
 800387e:	e7b7      	b.n	80037f0 <_printf_i+0x104>
 8003880:	6808      	ldr	r0, [r1, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	6949      	ldr	r1, [r1, #20]
 8003886:	f010 0f80 	tst.w	r0, #128	; 0x80
 800388a:	d004      	beq.n	8003896 <_printf_i+0x1aa>
 800388c:	1d10      	adds	r0, r2, #4
 800388e:	6018      	str	r0, [r3, #0]
 8003890:	6813      	ldr	r3, [r2, #0]
 8003892:	6019      	str	r1, [r3, #0]
 8003894:	e007      	b.n	80038a6 <_printf_i+0x1ba>
 8003896:	f010 0f40 	tst.w	r0, #64	; 0x40
 800389a:	f102 0004 	add.w	r0, r2, #4
 800389e:	6018      	str	r0, [r3, #0]
 80038a0:	6813      	ldr	r3, [r2, #0]
 80038a2:	d0f6      	beq.n	8003892 <_printf_i+0x1a6>
 80038a4:	8019      	strh	r1, [r3, #0]
 80038a6:	2300      	movs	r3, #0
 80038a8:	6123      	str	r3, [r4, #16]
 80038aa:	4675      	mov	r5, lr
 80038ac:	e7b1      	b.n	8003812 <_printf_i+0x126>
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	1d11      	adds	r1, r2, #4
 80038b2:	6019      	str	r1, [r3, #0]
 80038b4:	6815      	ldr	r5, [r2, #0]
 80038b6:	6862      	ldr	r2, [r4, #4]
 80038b8:	2100      	movs	r1, #0
 80038ba:	4628      	mov	r0, r5
 80038bc:	f7fc fc98 	bl	80001f0 <memchr>
 80038c0:	b108      	cbz	r0, 80038c6 <_printf_i+0x1da>
 80038c2:	1b40      	subs	r0, r0, r5
 80038c4:	6060      	str	r0, [r4, #4]
 80038c6:	6863      	ldr	r3, [r4, #4]
 80038c8:	6123      	str	r3, [r4, #16]
 80038ca:	2300      	movs	r3, #0
 80038cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038d0:	e79f      	b.n	8003812 <_printf_i+0x126>
 80038d2:	6923      	ldr	r3, [r4, #16]
 80038d4:	462a      	mov	r2, r5
 80038d6:	4639      	mov	r1, r7
 80038d8:	4630      	mov	r0, r6
 80038da:	47c0      	blx	r8
 80038dc:	3001      	adds	r0, #1
 80038de:	d0a2      	beq.n	8003826 <_printf_i+0x13a>
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	079b      	lsls	r3, r3, #30
 80038e4:	d507      	bpl.n	80038f6 <_printf_i+0x20a>
 80038e6:	2500      	movs	r5, #0
 80038e8:	f104 0919 	add.w	r9, r4, #25
 80038ec:	68e3      	ldr	r3, [r4, #12]
 80038ee:	9a03      	ldr	r2, [sp, #12]
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	429d      	cmp	r5, r3
 80038f4:	db05      	blt.n	8003902 <_printf_i+0x216>
 80038f6:	68e0      	ldr	r0, [r4, #12]
 80038f8:	9b03      	ldr	r3, [sp, #12]
 80038fa:	4298      	cmp	r0, r3
 80038fc:	bfb8      	it	lt
 80038fe:	4618      	movlt	r0, r3
 8003900:	e793      	b.n	800382a <_printf_i+0x13e>
 8003902:	2301      	movs	r3, #1
 8003904:	464a      	mov	r2, r9
 8003906:	4639      	mov	r1, r7
 8003908:	4630      	mov	r0, r6
 800390a:	47c0      	blx	r8
 800390c:	3001      	adds	r0, #1
 800390e:	d08a      	beq.n	8003826 <_printf_i+0x13a>
 8003910:	3501      	adds	r5, #1
 8003912:	e7eb      	b.n	80038ec <_printf_i+0x200>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1a7      	bne.n	8003868 <_printf_i+0x17c>
 8003918:	780b      	ldrb	r3, [r1, #0]
 800391a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800391e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003922:	e765      	b.n	80037f0 <_printf_i+0x104>
 8003924:	08003bd2 	.word	0x08003bd2
 8003928:	08003bc1 	.word	0x08003bc1

0800392c <_read_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	4c07      	ldr	r4, [pc, #28]	; (800394c <_read_r+0x20>)
 8003930:	4605      	mov	r5, r0
 8003932:	4608      	mov	r0, r1
 8003934:	4611      	mov	r1, r2
 8003936:	2200      	movs	r2, #0
 8003938:	6022      	str	r2, [r4, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	f7fe f960 	bl	8001c00 <_read>
 8003940:	1c43      	adds	r3, r0, #1
 8003942:	d102      	bne.n	800394a <_read_r+0x1e>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	b103      	cbz	r3, 800394a <_read_r+0x1e>
 8003948:	602b      	str	r3, [r5, #0]
 800394a:	bd38      	pop	{r3, r4, r5, pc}
 800394c:	200003a4 	.word	0x200003a4

08003950 <_fstat_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4c07      	ldr	r4, [pc, #28]	; (8003970 <_fstat_r+0x20>)
 8003954:	2300      	movs	r3, #0
 8003956:	4605      	mov	r5, r0
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	f7fe f97a 	bl	8001c56 <_fstat>
 8003962:	1c43      	adds	r3, r0, #1
 8003964:	d102      	bne.n	800396c <_fstat_r+0x1c>
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	b103      	cbz	r3, 800396c <_fstat_r+0x1c>
 800396a:	602b      	str	r3, [r5, #0]
 800396c:	bd38      	pop	{r3, r4, r5, pc}
 800396e:	bf00      	nop
 8003970:	200003a4 	.word	0x200003a4

08003974 <_isatty_r>:
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4c06      	ldr	r4, [pc, #24]	; (8003990 <_isatty_r+0x1c>)
 8003978:	2300      	movs	r3, #0
 800397a:	4605      	mov	r5, r0
 800397c:	4608      	mov	r0, r1
 800397e:	6023      	str	r3, [r4, #0]
 8003980:	f7fe f96e 	bl	8001c60 <_isatty>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	d102      	bne.n	800398e <_isatty_r+0x1a>
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	b103      	cbz	r3, 800398e <_isatty_r+0x1a>
 800398c:	602b      	str	r3, [r5, #0]
 800398e:	bd38      	pop	{r3, r4, r5, pc}
 8003990:	200003a4 	.word	0x200003a4

08003994 <_init>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	bf00      	nop
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr

080039a0 <_fini>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr
